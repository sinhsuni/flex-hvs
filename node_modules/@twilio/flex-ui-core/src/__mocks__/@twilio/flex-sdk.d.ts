/// <reference types="jest" />
import { PublicConfig } from "@twilio/flex-sdk";
export declare const createClient: jest.Mock<Promise<{
    createTelemetryClient: jest.Mock<{
        name: string;
        createEventGroup: jest.Mock<{
            name: string;
            createEventGroup: jest.Mock<{
                name: string;
                addEvents: jest.Mock<Promise<void>, []>;
            }, []>;
            setSessionData: jest.Mock<any, any>;
        }, [groupName: string]>;
        setSessionData: jest.Mock<any, any>;
    }, [name: string]>;
    destroy: jest.Mock<any, any>;
    updateToken: jest.Mock<{
        (): Promise<void>;
        <T>(value: T | PromiseLike<T>): Promise<T>;
    }, []>;
    config: {
        account: {
            set: jest.Mock<any, any>;
        };
    };
}>, []>;
export declare const getAccountConfig: jest.Mock<Promise<{
    accountSid: string;
    attributes: {};
    callRecordingEnabled: boolean;
    callRecordingWebhookUrl: string;
    chatServiceInstanceSid: string;
    crmAttributes: {};
    crmCallbackUrl: string;
    crmEnabled: boolean;
    crmFallbackUrl: string;
    crmType: string;
    dateCreated: Date;
    dateUpdated: Date;
    messagingServiceInstanceSid: string;
    runtimeDomain: string;
    flexServiceInstanceSid: string;
    outboundCallFlows: {};
    pluginServiceEnabled: boolean;
    pluginServiceAttributes: {};
    publicAttributes: {};
    serviceVersion: string;
    serverlessServiceSids: string[];
    status: string;
    taskrouterTargetTaskqueueSid: string;
    taskrouterTargetWorkflowSid: string;
    taskrouterTaskqueues: {
        sid: string;
        targettable: boolean;
    }[];
    taskrouterWorkerAttributes: {};
    taskrouterWorkerChannels: {};
    taskrouterWorkspaceSid: string;
    uiDependencies: {};
    uiAttributes: {};
    uiLanguage: string;
    uiVersion: string;
    queueStatsConfiguration: {
        default: {};
        queue_configurations: {
            queue_sid: string;
            reset_timezone: string;
            reset_time: string;
        }[];
        queue_channel_configurations: {
            queue_sid: string;
            channel_sid: string;
            service_level_threshold: number;
            short_abandoned_threshold: number;
        }[];
    };
    url: string;
}>, []>;
export declare const getPublicConfig: jest.Mock<Promise<PublicConfig>, []>;
