import { MapDispatchToPropsParam, Options } from "react-redux";
import { Store } from "redux";
import * as TwilioChat from "twilio-chat";
import { Device } from "twilio-client";
import { SyncClient } from "twilio-sync";
import { Supervisor } from "twilio-taskrouter";
import { FlexEventEmitter } from "./FlexEvents";
import { AppState } from "./state/AppState";
import { FlexState } from "./Store";
export declare const pastTokens: Array<string>;
export declare type FlexStateCallback = (storeState: FlexState) => AppState;
export declare class FlexModule {
    private static store;
    static stateCallback: FlexStateCallback;
    static events: FlexEventEmitter;
    static init(store: Store<FlexState>, stateCb?: FlexStateCallback): void;
    static get state(): AppState;
    static dispatch(action: any): any;
    private static _chatClient;
    static get initialized(): boolean;
    static get chatClient(): TwilioChat.Client;
    static set chatClient(value: TwilioChat.Client);
    private static _workerClient;
    static get workerClient(): Supervisor;
    static set workerClient(value: Supervisor);
    private static _insightsClient;
    static get insightsClient(): SyncClient;
    static set insightsClient(syncClient: SyncClient);
    private static _voiceClient;
    static get voiceClient(): Device;
}
declare type StateToProps<OwnProps, StateProps, State> = (state: State, ownProps: OwnProps) => StateProps;
declare type StateToPropsFactory<OwnProps, StateProps, State> = (state: State, props: OwnProps) => StateToProps<OwnProps, StateProps, State>;
declare type StateToPropsParam<OwnProps, StateProps, State> = StateToProps<OwnProps, StateProps, State> | StateToPropsFactory<OwnProps, StateProps, State>;
/**
 * "connect" function from "react-redux", respecting the location of a chat store in redux store.
 * State for mapStateToProps will be evaluated to ChatState
 * @private
 */
export declare function connect<StateProps, DispatchProps = {}, OwnProps = {}>(mapStateToProps: StateToPropsParam<OwnProps, StateProps, AppState>, mapDispatchToProps?: null | MapDispatchToPropsParam<DispatchProps, OwnProps>, mergeProps?: any, options?: Options<{}, StateProps, OwnProps, FlexState>): import("react-redux").InferableComponentEnhancerWithProps<StateProps & DispatchProps, OwnProps>;
export {};
