import { FilterDefinition } from "@twilio/flex-ui-core";
import * as React from "react";
import { AppState } from "../../../state";
import { ActiveFilter } from "../../../state/ViewState";
import { TeamsViewImplOwnProps, TeamsViewImplProps } from "./TeamsViewImpl";
/**
 * @typedef {Function} TeamsView.FilterDefinitionFactory
 */
export declare type FilterDefinitionFactory = (appState: AppState, ownProps: TeamsViewProps) => FilterDefinition;
/**
 * Properties of Teams view.
 * @typedef {TeamsView.TeamsViewProps} TeamsView.TeamsViewProps
 * @property {RouteComponentProps<TeamsView.TeamsViewRouteParams>} [route] Represents route params.
 * @property {Array<FiltersList.FilterDefinition | TeamsView.FilterDefinitionFactory>} [filters] - List of filters or filterFactories
 * @property {ActiveFilter | Array<ActiveFilter> | string} [hiddenFilter] - Hidden filter definition
 */
export declare type TeamsViewProps = Omit<TeamsViewImplOwnProps, "isViewActive"> & {
    filters: Array<FilterDefinition | FilterDefinitionFactory>;
};
/**
 * @typedef {TeamsView.TeamsViewProps} TeamsView.TeamsViewChildrenProps
 * @property {ActiveFilters} [appliedFilters] Represents applied filters.
 * @property {Array<FiltersList.FilterDefinition>} [filters] - List of filters .
 * @property {ActiveFilter | Array<ActiveFilter> | string} [hiddenFilter] - Hidden filter definition.
 * @property {string} [monitoredTaskSid] - Represents current monitoring task.
 * @property {SupervisorState.SupervisorWorkerState} [stickyWorker] - Represents selected worker.
 * @property {Array<SupervisorState.SupervisorWorkerState>} [workers] - Represents list of workers.
 * @property {RouteComponentProps<TeamsView.TeamsViewRouteParams>} [route] Represents route params.
 */
export declare type TeamsViewChildrenProps = TeamsViewImplProps;
/**
 * Properties of routes in teams view.
 * @typedef TeamsView.TeamsViewRouteParams
 * @property {("tasks" | "workers")} [resources] Represents if task or worker is part of route resource.
 * @property {string} [sid] Represents the indentification of the task or worker
 */
export interface TeamsViewRouteParams {
    resource?: "tasks" | "workers";
    sid?: string;
}
/**
 * @classdesc This renders teams page.
 * @class TeamsView
 * @component
 * @hideconstructor
 * @param {TeamsView.TeamsViewProps} - Properties to be passed to configure this component.
 * @category Components / Programmable
 */
export declare class TeamsView extends React.PureComponent<TeamsViewProps> {
    static readonly displayName = "TeamsView";
    /**
     * Dynamic content store
     * @static
     * @type {DynamicContentStore<TeamsView.TeamsViewProps>}
     * @readonly
     */
    static readonly Content: import("@twilio/flex-ui-core").DynamicContentStore;
    static activitiesFilter: (appState: AppState) => FilterDefinition;
    /**
     * Default properties
     * @static
     * @type {Partial<TeamsView.TeamsViewProps>}
     * @readonly
     */
    static readonly defaultProps: Partial<TeamsViewProps>;
    private getBaseRoute;
    render(): JSX.Element;
    private renderChildrenFromRoute;
}
export declare const Connected: import("react-redux").ComponentClass<Pick<TeamsViewImplProps, never> & import("../..").ThemeProps & import("./TeamsViewImpl").ViewProps<import("./TeamsViewImpl").TeamsViewRouteParams, import("react-router").StaticContext, any> & {
    hiddenFilter?: string | ActiveFilter | ActiveFilter[];
}> & {
    WrappedComponent: React.ComponentType<TeamsViewImplProps>;
};
