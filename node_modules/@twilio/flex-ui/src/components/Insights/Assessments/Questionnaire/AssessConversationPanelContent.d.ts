import * as React from "react";
import { IQuestionnaire, IAssessment } from "../../../../core/Insights/Questionnaires/Questionnaire.models";
interface AssessPanelContentComponentStateProps {
    questionnaires: Array<IQuestionnaire>;
    segmentId?: string;
}
declare type AssessPanelContentComponentOwnProps = {
    segmentId?: string;
};
declare type AssessPanelContentComponentProps = AssessPanelContentComponentStateProps & AssessPanelContentComponentOwnProps;
declare type AssessPanelContentComponentState = {
    selectedQuestionnaireId?: string;
};
export declare class AssessPanelContentComponent extends React.PureComponent<AssessPanelContentComponentProps, AssessPanelContentComponentState> {
    state: AssessPanelContentComponentState;
    static getDerivedStateFromProps(nextProps: AssessPanelContentComponentProps, prevState: AssessPanelContentComponentState): AssessPanelContentComponentState;
    onAnswerSubmitted: (assessment: IAssessment) => void;
    renderQuestionnaire(): JSX.Element;
    render(): JSX.Element;
}
export declare const AssessPanelContent: import("react-redux").ComponentClass<Pick<AssessPanelContentComponentProps, never> & AssessPanelContentComponentOwnProps> & {
    WrappedComponent: React.ComponentType<AssessPanelContentComponentProps>;
};
export {};
