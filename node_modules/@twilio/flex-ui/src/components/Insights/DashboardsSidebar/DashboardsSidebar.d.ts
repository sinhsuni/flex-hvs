import * as React from "react";
import { AnalyticalDashboard, ProjectDashboard } from "../../../models/InsightsModel";
import { ThemeProps } from "../../theme";
interface DashboardsSidebarImplStateProps {
    projectDashboards: ProjectDashboard[];
    analyticalDashboards: AnalyticalDashboard[];
    selectedCategory: string | undefined;
    currentAuthor: string | undefined;
}
interface DashboardsSidebarImplOwnProps {
    currentDashboardId?: string;
    dashboardsFilter: (dashboard: AnalyticalDashboard | ProjectDashboard) => boolean;
    dashboardTabFilter: (tab: ProjectDashboard["tabs"][0], dashboard: ProjectDashboard) => boolean;
}
declare type DashboardsSidebarImplProps = DashboardsSidebarImplStateProps & ThemeProps & DashboardsSidebarImplOwnProps;
declare type DashboardsSidebarImplState = {
    myDashboardsSelected: boolean;
};
export declare class DashboardsSidebarImpl extends React.PureComponent<DashboardsSidebarImplProps, DashboardsSidebarImplState> {
    state: DashboardsSidebarImplState;
    private onMyDashboardsSelected;
    render(): JSX.Element;
}
export declare const ConnectedDashboardsSidebar: import("react-redux").ComponentClass<Pick<DashboardsSidebarImplProps, "theme" | "currentDashboardId" | "dashboardsFilter" | "dashboardTabFilter"> & DashboardsSidebarImplOwnProps> & {
    WrappedComponent: React.ComponentType<DashboardsSidebarImplProps>;
};
export declare type DashboardsSidebarProps = React.ComponentProps<typeof ConnectedDashboardsSidebar>;
export declare class DashboardsSidebar extends React.Component<DashboardsSidebarProps> {
    static readonly defaultProps: Omit<Partial<React.ComponentProps<typeof DashboardsSidebar>>, "currentDashboardId">;
    render(): JSX.Element;
}
export {};
