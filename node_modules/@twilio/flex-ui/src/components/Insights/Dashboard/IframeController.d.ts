import * as React from "react";
export interface IframeControllerRenderProps {
    refFn: React.Ref<HTMLIFrameElement>;
}
interface IframeControllerOwnProps {
    dashboardId: string;
    children: (props: IframeControllerRenderProps) => React.ReactNode;
    events?: {
        [event: string]: IframeEventHandler;
    };
}
interface IframeControllerState {
    listeningForDrillableItems: boolean;
}
interface IframeControllerStateProps {
    drillableItems?: string[];
}
export declare type IframeControllerProps = IframeControllerOwnProps & IframeControllerStateProps;
export declare type IframeEventHandler = (eventData: unknown, eventId: string) => void;
export declare class _IframeController extends React.PureComponent<IframeControllerProps> {
    readonly state: IframeControllerState;
    private iframe;
    private gdEventHandlers;
    constructor(props: IframeControllerProps);
    private handle;
    private sendDrillableItems;
    private handleListeningForDrillableItems;
    private handleUiLink;
    private handleDashboardCreated;
    private handleDashboardSaved;
    private handleDrillDown;
    private handleDashboardDeleted;
    private delegateEventToOriginal;
    private handleIncomingMessage;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: IframeControllerOwnProps): Promise<void>;
    ref: (r: HTMLIFrameElement | null) => void;
    render(): React.ReactNode;
}
export declare const IframeController: import("react-redux").ComponentClass<Pick<IframeControllerProps, "children" | "events" | "dashboardId"> & IframeControllerOwnProps> & {
    WrappedComponent: React.ComponentType<IframeControllerProps>;
};
export {};
