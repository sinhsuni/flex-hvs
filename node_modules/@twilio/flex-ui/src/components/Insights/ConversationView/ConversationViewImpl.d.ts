import * as React from "react";
import { RouteComponentProps } from "react-router";
import { ContentFragment, DynamicContentStore } from "@twilio/flex-ui-core";
import { Player as TwilioPlayer } from "@twilio/player";
import { FlexContextType } from "../../../core";
import { Segment, SegmentList } from "../../../state/InsightsState.definitions";
import { ViewAdditionalProps } from "../../ViewCollection";
import { InsightsPlayerMediaLink, InsightsPlayerMediaLinkType } from "../Player/Player.definitions";
export declare const displayName = "ConversationView";
export declare const Content: DynamicContentStore;
export interface ConversationViewImplStateProps {
    segment?: Segment;
    segmentList?: SegmentList;
    agentId?: string;
    mediaLinks?: InsightsPlayerMediaLink[];
    mediaLinkId?: string;
    mediaLinkType?: InsightsPlayerMediaLinkType;
}
export interface ConversationViewImplDispatchProps {
    updateSegmentId: (segmentId?: string) => void;
}
export declare type ConversationViewImplOwnProps = ViewAdditionalProps & {
    context?: FlexContextType;
    children?: React.ReactElement<ContentFragment>;
    playerRef?: (instance: TwilioPlayer | null) => void;
    route: RouteComponentProps<{
        segmentId: string;
    }>;
    segmentId: string;
};
export declare type ConversationViewImplProps = ConversationViewImplStateProps & ConversationViewImplDispatchProps & ConversationViewImplOwnProps;
interface ConversationViewImplState {
    player: TwilioPlayer | null;
    seekToSecond?: number;
}
export declare class ConversationViewImpl extends React.PureComponent<ConversationViewImplProps, ConversationViewImplState> {
    state: ConversationViewImplState;
    static getDerivedStateFromProps(props: ConversationViewImplProps, state: ConversationViewImplState): {
        seekToSecond: number;
    } | {
        seekToSecond?: undefined;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: ConversationViewImplProps, prevState: ConversationViewImplState): Promise<void>;
    fetchChatTranscripts(): void;
    seekPlayer(): void;
    componentWillUnmount(): void;
    tryParseDashboardId(): string;
    handleSegmentSelect: (id: string) => void;
    handleSegmentMarkClick: (segmentId: string) => void;
    handleBackButton: () => void | Promise<any>;
    getSegmentListIds(): string[];
    render(): JSX.Element;
}
export {};
