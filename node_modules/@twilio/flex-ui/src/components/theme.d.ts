import { ThemedReactEmotionInterface } from "react-emotion";
import { OptionalThemeProps } from "emotion-theming";
import { Theme as ControlsTheme, ButtonThemeProps, CSSProps, CoreThemeColors } from "@twilio/flex-ui-core";
import { IncomingTaskCanvasThemeProps } from "./canvas/IncomingTaskCanvas/IncomingTaskCanvas.definitions";
import { NoTasksCanvasThemeProps } from "./canvas/NoTaskCanvas/NoTasksCanvas";
import { ParticipantsCanvasThemeProps } from "./canvas/ParticipantsCanvas/ParticipantsCanvas.definitions";
import { TaskCanvasThemeProps } from "./canvas/TaskCanvas/TaskCanvas.definitions";
import { TaskCanvasThemeProps as SupervisorTaskCanvasThemeProps } from "./supervisor/TaskCanvas/TaskCanvas";
import { OutboundDialerPanelThemeProps } from "./OutboundDialerPanel/OutboundDialerPanel.definition";
import { TaskDetailsPanelThemeProps } from "./canvas/TaskDetailsPanel/TaskDetailsPanel.definitions";
import { TaskInfoPanelThemeProps } from "./canvas/TaskInfoPanel/TaskInfoPanel.definitions";
import { ConnectingOutboundCallCanvasThemeProps } from "./canvas/ConnectingOutboundCallCanvas/ConnectingOutboundCallCanvas.definitions";
export interface ChannelColors {
    inactive: string;
    call: string;
    video: string;
    sms: string;
    chat: string;
    facebook: string;
    line: string;
    whatsapp: string;
    custom: string;
}
/**
 * Base Flex colors
 * @typedef Theme.BaseThemeColors
 * @property {string} holdColor - Color of the hold button
 * @property {string} declineColor - Color of the decline button
 * @property {string} declineTextColor - Color of the decline text
 * @property {string} acceptColor - Color of the accept button
 * @property {string} acceptTextColor - Color of the accept text
 * @property {string} completeTaskColor - Color of the "complete task" button
 * @property {string} flexBlueColor - FlexBlue color
 * @property {string} agentAvailableColor - Color that indicates available agent status
 * @property {string} agentBusyColor - Color that indicates busy agent status
 * @property {string} agentUnavailableColor - Color that indicates unavailable agent status
 * @property {string} agentOfflineColor - Color that indicates offline agent status
 */
export interface BaseThemeColors {
    holdColor: string;
    declineColor: string;
    acceptColor: string;
    declineTextColor: string;
    acceptTextColor: string;
    completeTaskColor: string;
    flexBlueColor: string;
    agentAvailableColor: string;
    agentBusyColor: string;
    agentUnavailableColor: string;
    agentOfflineColor: string;
}
/**
 * Theme options. Material UI theme options are also valid - see {@link https://material-ui.com/customization/themes/}
 * @category Theme
 * @interface Theme
 * @property {string} [name]
 *
 * @property {Object} UserActivityControls
 * @property {CSSProps} UserActivityControls.Divider
 * @property {CSSProps} UserActivityControls.Items
 * @property {CSSProps} UserActivityControls.Item
 *
 * @property {Object} LoginView
 * @property {CSSProps} LoginView.Container
 * @property {CSSProps} LoginView.LoginButton
 * @property {CSSProps} LoginView.Logo
 *
 * @property {Object} RuntimeLoginView
 * @property {CSSProps} RuntimeLoginView.Container
 * @property {CSSProps} RuntimeLoginView.LoginButton
 *
 * @property {Object} LoginFormView
 * @property {CSSProps} LoginFormView.Container
 * @property {CSSProps} LoginFormView.LoginButton
 *
 * @property {CSSProps} RootContainer
 *
 * @property {Object} AgentDesktopView
 * @property {CSSProps} AgentDesktopView.Panel1
 * @property {CSSProps} AgentDesktopView.Panel2
 * @property {CSSProps} AgentDesktopView.ContentSplitter
 *
 * @property {Object} MainHeader
 * @property {CSSProps} MainHeader.Container
 * @property {Theme.ButtonThemeProps} MainHeader.Button
 *
 * @property {CSSProps} MainContainer
 *
 * @property {Object} SideNav
 * @property {CSSProps} SideNav.Container
 * @property {Theme.ButtonThemeProps} SideNav.Button
 * @property {Theme.ButtonThemeProps} SideNav.Icon
 *
 * @property {Theme.TaskCanvasThemeProps} TaskCanvas
 *
 * @property {Object} TaskCanvasHeader
 * @property {CSSProps} TaskCanvasHeader.Container
 * @property {Theme.ButtonThemeProps} TaskCanvasHeader.EndTaskButton
 * @property {Theme.ButtonThemeProps} TaskCanvasHeader.WrapupTaskButton
 *
 * @property {Theme.IncomingTaskCanvasThemeProps} IncomingTaskCanvas
 *
 * @property {Theme.ConnectingOutboundCallCanvasThemeProps} ConnectingOutboundCallCanvas
 *
 * @property {Object} CallCanvas
 * @property {CSSProps} CallCanvas.Button
 * @property {CSSProps} CallCanvas.HangUpButton
 *
 * @property {Theme.TaskInfoPanelThemeProps} TaskInfoPanel
 *
 * @property {Theme.TaskDetailsPanelThemeProps} TaskDetailsPanel
 *
 * @property {Object} TaskList
 * @property {Object} TaskList.Filter
 * @property {CSSProps} TaskList.Filter.Container
 * @property {CSSProps} TaskList.Filter.EntryButton
 * @property {Object} TaskList.Filter.Menu
 * @property {CSSProps} TaskList.Filter.Menu.Items
 * @property {CSSProps} TaskList.Filter.Menu.Item
 * @property {Object} TaskList.Item
 * @property {CSSProps} TaskList.Item.Container
 * @property {CSSProps} TaskList.Item.SelectedContainer
 * @property {CSSProps} TaskList.Item.Icon
 * @property {Object} TaskList.Item.Buttons
 * @property {CSSProps} TaskList.Item.Buttons.DefaultButton
 * @property {CSSProps} TaskList.Item.Buttons.AcceptButton
 * @property {CSSProps} TaskList.Item.Buttons.RejectButton
 *
 * @property {Object} TaskCard
 * @property {Object} TaskCard.Container
 * @property {CSSProps} TaskCard.Container.Default
 * @property {CSSProps} TaskCard.Container.Selected
 * @property {CSSProps} TaskCard.Container.Hover
 * @property {Object} TaskCard.IconArea
 * @property {CSSProps} TaskCard.IconArea.Default
 * @property {Object} TaskCard.ContentArea
 * @property {CSSProps} TaskCard.ContentArea.Default
 * @property {CSSProps} TaskCard.ContentArea.Inactive
 *
 * @property {CSSProps} TaskCardPlaceholder
 *
 * @property {Theme.NoTasksCanvasThemeProps} NoTasksCanvas
 *
 * @property {Object} CRMContainer
 * @property {CSSProps} CRMContainer.Container
 * @property {Object} CRMContainer.Placeholder
 * @property {CSSProps} CRMContainer.Placeholder.Container
 * @property {CSSProps} CRMContainer.Placeholder.Icon
 * @property {CSSProps} CRMContainer.Placeholder.Button
 * @property {CSSProps} CRMContainer.Placeholder.Hint
 *
 * @property {Object} Supervisor
 * @property {CSSProps} Supervisor.Container
 * @property {Theme.SupervisorTaskCanvasThemeProps} Supervisor.TaskCanvas
 * @property {Object} Supervisor.WorkerCanvas
 * @property {CSSProps} Supervisor.WorkerCanvas.Container
 * @property {CSSProps} Supervisor.WorkerCanvas.Header
 * @property {CSSProps} Supervisor.WorkerCanvas.SectionCaption
 * @property {CSSProps} Supervisor.FilterButton
 * @property {Object} Supervisor.Search
 * @property {CSSProps} Supervisor.Search.Container
 * @property {CSSProps} Supervisor.Search.Button
 *
 * @property {Object} WorkerDirectory
 * @property {CSSProps} WorkerDirectory.Container
 * @property {Object} WorkerDirectory.Header
 * @property {CSSProps} WorkerDirectory.Header.Button
 * @property {CSSProps} WorkerDirectory.Header.Container
 * @property {CSSProps} WorkerDirectory.ItemsContainer
 * @property {CSSProps} WorkerDirectory.Item
 * @property {CSSProps} WorkerDirectory.ItemActionButton
 * @property {Object} WorkerDirectory.QueueItem
 * @property {CSSProps} WorkerDirectory.QueueItem.Avatar
 *
 * @property {Object} WorkerSkills
 * @property {CSSProps} WorkerSkills.SaveButton
 * @property {CSSProps} WorkerSkills.CancelButton
 * @property {CSSProps} WorkerSkills.DeleteButton
 *
 * @property {Object} LoadingView
 * @property {CSSProps} LoadingView.Container
 *
 * @property {Object} ErrorPage
 * @property {CSSProps} ErrorPage.Container
 * @property {Object} ErrorPage.Actions
 * @property {CSSProps} ErrorPage.Actions.RetryButton
 * @property {CSSProps} ErrorPage.Actions.DownloadReportButton
 *
 * @property {Theme.ParticipantsCanvasThemeProps} ParticipantsCanvas
 *
 * @property {Theme.OutboundDialerPanelThemeProps} OutboundDialerPanel
 *
 * @property {(Theme.CoreThemeColors | Theme.BaseThemeColors)} colors theme colors
 */
export interface Theme extends ControlsTheme {
    colors: CoreThemeColors & BaseThemeColors;
    name?: string;
    UserActivityControls: {
        Divider: CSSProps;
        Items: CSSProps;
        Item: CSSProps;
    };
    LoginView: {
        Container: CSSProps;
        LoginButton: CSSProps;
        Logo: CSSProps;
    };
    RuntimeLoginView: {
        Container: CSSProps;
        LoginButton: CSSProps;
    };
    LoginFormView: {
        Container: CSSProps;
        LoginButton: CSSProps;
    };
    RootContainer: CSSProps;
    AgentDesktopView: {
        Panel1: CSSProps;
        Panel2: CSSProps;
        ContentSplitter: CSSProps;
    };
    MainHeader: {
        Container: CSSProps;
        Button: ButtonThemeProps;
    };
    MainContainer: CSSProps;
    SideNav: {
        Container: CSSProps;
        Button: ButtonThemeProps;
        Icon: ButtonThemeProps;
    };
    TaskCanvas: TaskCanvasThemeProps;
    TaskCanvasHeader: {
        Container: CSSProps;
        EndTaskButton: ButtonThemeProps;
        WrapupTaskButton: ButtonThemeProps;
    };
    IncomingTaskCanvas: IncomingTaskCanvasThemeProps;
    ConnectingOutboundCallCanvas: ConnectingOutboundCallCanvasThemeProps;
    CallCanvas: {
        Button: CSSProps;
        HangUpButton: CSSProps;
    };
    TaskInfoPanel: TaskInfoPanelThemeProps;
    TaskDetailsPanel: TaskDetailsPanelThemeProps;
    TaskList: {
        Filter: {
            Container: CSSProps;
            EntryButton: CSSProps;
            Menu: {
                Items: CSSProps;
                Item: CSSProps;
            };
        };
        Item: {
            Container: CSSProps;
            SelectedContainer: CSSProps;
            Icon: CSSProps;
            Buttons: {
                DefaultButton: CSSProps;
                AcceptButton: CSSProps;
                RejectButton: CSSProps;
            };
        };
    };
    TaskCard: {
        Container: {
            Default: CSSProps;
            Selected: CSSProps;
            Hover: CSSProps;
        };
        IconArea: {
            Default: CSSProps;
        };
        ContentArea: {
            Default: CSSProps;
            Inactive: CSSProps;
        };
    };
    TaskCardPlaceholder: CSSProps;
    NoTasksCanvas: NoTasksCanvasThemeProps;
    CRMContainer: {
        Container: CSSProps;
        Placeholder: {
            Container: CSSProps;
            Icon: CSSProps;
            Button: CSSProps;
            Hint: CSSProps;
        };
    };
    Supervisor: {
        Container: CSSProps;
        TaskCanvas: SupervisorTaskCanvasThemeProps;
        WorkerCanvas: {
            Container: CSSProps;
            Header: CSSProps;
            SectionCaption: CSSProps;
        };
        FilterButton: CSSProps;
        Search: {
            Container: CSSProps;
            Button: CSSProps;
        };
    };
    WorkerDirectory: {
        Container: CSSProps;
        Header: {
            Button: CSSProps;
            Container: CSSProps;
        };
        ItemsContainer: CSSProps;
        Item: CSSProps;
        ItemActionButton: CSSProps;
        QueueItem: {
            Avatar: CSSProps;
        };
    };
    WorkerSkills: {
        SaveButton: CSSProps;
        CancelButton: CSSProps;
        DeleteButton: CSSProps;
    };
    LoadingView: {
        Container: CSSProps;
    };
    ErrorPage: {
        Container: CSSProps;
        Actions: {
            RetryButton: CSSProps;
            DownloadReportButton: CSSProps;
        };
    };
    ParticipantsCanvas: ParticipantsCanvasThemeProps;
    QueueStats: {
        Container: CSSProps;
        TilesGrid: CSSProps;
        TableContainer: CSSProps;
    };
    QueuesStats: {
        Container: CSSProps;
        TilesGrid: CSSProps;
        TableContainer: CSSProps;
        QueuesDataTableCell: CSSProps;
    };
    ConversationView: {
        Container: CSSProps;
        Button: CSSProps;
        PrimaryButton: CSSProps;
        PrimaryButtonHover: CSSProps;
        Player: {
            Container: CSSProps;
        };
        SegmentInfo: {
            Container: CSSProps;
        };
        ConversationInfo: {
            Container: CSSProps;
        };
        Questionnaire: {
            Answer: CSSProps;
            AnswerSelected: CSSProps;
            AnswerHover: CSSProps;
        };
    };
    ToggleLoggingPanel: {
        IconButton: CSSProps;
        Panel: CSSProps;
        Button: CSSProps;
    };
    ErrorUI: {
        Panel: CSSProps;
        IconButton: CSSProps;
        NoErrorsIcon: CSSProps;
        CloseButton: CSSProps;
        DownloadButton: CSSProps;
        ClearButton: CSSProps;
        ActionText: CSSProps;
        WarningIcon: CSSProps;
        ErrorContainer: CSSProps;
    };
    OutboundDialerPanel: OutboundDialerPanelThemeProps;
    TranscriptPlayer: {
        Sidepanel: CSSProps;
    };
    Dashboards: {
        Sidebar: {
            Container: CSSProps;
            Divider: CSSProps;
            ActionButton: CSSProps;
            Item: CSSProps;
            SelectedItem: CSSProps;
        };
    };
}
declare const _default: ThemedReactEmotionInterface<Theme>;
export default _default;
export declare type PropsWithTheme<P> = OptionalThemeProps<P, Theme>;
/**
 * @typedef ThemeProps
 * @property {Theme} [theme]
 * @memberof Theme
 */
export declare type ThemeProps = {
    theme?: Theme;
};
export declare const withTheme: <P, C>(Component: C) => C;
