/// <reference types="node" />
import { EventEmitter } from "events";
import { SSOTokenPayload } from "./core/SSOLoginHandler.definitions";
import { FlexError } from "./FlexError";
/**
 * @static
 * @category Core
 * @namespace FlexEvent
 * @hideconstructor
 */
export declare enum FlexEvent {
    /**
     * View resized
     *
     * @name FlexEvent.viewResized
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("viewResized", () => {});
     */
    viewResized = "viewResized",
    /**
     * Flex splitter resized
     *
     * @name FlexEvent.flexSplitterResize
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("flexSplitterResize", () => {});
     */
    flexSplitterResize = "flexSplitterResize",
    /**
     * User logged in. Fired during @see {Manager} creation
     *
     * @name FlexEvent.userLoggedIn
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("userLoggedIn", () => {});
     */
    userLoggedIn = "userLoggedIn",
    /**
     * Selected view changed
     *
     * @name FlexEvent.selectedViewChanged
     * @param {string} viewName name of the view
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("selectedViewChanged", (viewName) => {});
     */
    selectedViewChanged = "selectedViewChanged",
    /**
     * Token updated
     *
     * @name FlexEvent.tokenUpdated
     * @param {SSOTokenPayload} tokenPayload new token payload
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("tokenUpdated", (tokenPayload) => {});
     */
    tokenUpdated = "tokenUpdated",
    /**
     * Token expired
     *
     * @name FlexEvent.tokenExpired
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("tokenExpired", () => {});
     */
    tokenExpired = "tokenExpired",
    /**
     * All plugins are loaded
     *
     * @name FlexEvent.pluginsLoaded
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("pluginsLoaded", () => {});
     */
    pluginsLoaded = "pluginsLoaded",
    /**
     * Report issues on chat channel joining for agent
     *
     * @name FlexEvent.chatChannelJoining
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("chatChannelJoining", () => {});
     */
    chatChannelJoining = "chatChannelJoining",
    /**
     * Connection status is changed
     *
     * @name FlexEvent.connectionStateChanged
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("connectionStateChanged", () => {});
     */
    connectionStateChanged = "connectionStateChanged",
    /**
     * Generic error has been thrown
     *
     * @name FlexEvent.error
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("flexError", () => {});
     */
    error = "flexError",
    /**
     * Emitted when SingleSessionGuard validate current Flex session
     *
     * @name FlexEvent.sessionValidated
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("sessionValidated", () => {});
     */
    sessionValidated = "sessionValidated",
    /**
     * Emitted when a SDK clients get shut down
     *
     * @name FlexEvent.sessionInvalidated
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("sessionInvalidated", () => {});
     */
    sessionInvalidated = "sessionInvalidated",
    /**
     * Ytica Token updated
     *
     * @name FlexEvent.yticaTokenUpdated
     * @param {} yticaToken new token
     * @example
     * import { Manager } from "@twilio/flex-ui";
     * const manager = Manager.getInstance();
     * manager.events.addListener("yticaTokenUpdated", (yticaToken) => {});
     */
    yticaTokenUpdated = "yticaTokenUpdated"
}
export declare enum FlexConnectionStatus {
    connected = "connected",
    notConnected = "notConnected"
}
export declare class FlexEventEmitter extends EventEmitter {
    constructor();
    emit(event: FlexEvent, ...args: Array<any>): boolean;
    emitSplitterResize(): void;
    emitViewResized(windowInnerWidth: number): void;
    emitUserLoggedIn(): void;
    emitSelectedViewChanged: (newViewName: string, isSameViewResized: boolean) => void;
    emitTokenUpdated(tokenPayload: SSOTokenPayload): void;
    emitTokenExpired(): void;
    emitPluginsLoaded(): void;
    emitChatChannelJoining(status: string): void;
    emitConnectionStateChanged(connectionState: FlexConnectionStatus): void;
    emitError(error: FlexError): void;
    emitSessionInvalidated(): void;
    emitSessionValidated(): void;
    emitYticaTokenUpdated(yticaToken: string): void;
}
export declare const getProxiedFlexEventEmitter: (instance: FlexEventEmitter) => any;
