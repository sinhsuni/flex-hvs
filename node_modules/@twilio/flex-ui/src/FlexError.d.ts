import { Config } from "./state/AppConfig";
import { TwilioErrorCodes } from "./TwilioDebugger";
/**
 * FlexError types
 * @category Flex Errors
 * @enum {"app" | "chatSDK" | "syncSDK" | "taskrouterSDK" | "voiceSDK"} FlexErrorType
 * @property {"app"} app - Errors originating from the app itself
 * @property {"chatSDK"} chatSDK - Errors originating from Chat SDK
 * @property {"syncSDK"} syncSDK - Errors originating from Sync SDK
 * @property {"taskrouterSDK"} taskrouterSDK - Errors originating from Taskrouter SDK
 * @property {"flexSDK"} flexSDK - Errors originating from Flex SDK
 * @property {"voiceSDK"} voiceSDK - Errors originating from Voice SDK
 * @memberof FlexError
 */
export declare enum FlexErrorType {
    app = "app",
    chatSDK = "chatSDK",
    syncSDK = "syncSDK",
    taskrouterSDK = "taskrouterSDK",
    flexSDK = "flexSDK",
    voiceSDK = "voiceSDK"
}
/**
 * FlexError severity
 * @category Flex Errors
 * @enum {"user" | "normal" | "severe" } FlexErrorSeverity
 * @property {"user"} user - Errors originating from denial to user request, not actual error
 * @property {"normal"} normal - Normal error condition
 * @property {"severe"} severe - Severe error condition (some system hard down)
 * @memberof FlexError
 */
export declare enum FlexErrorSeverity {
    user = "user",
    normal = "normal",
    severe = "severe"
}
/**
 * Information about the plugin
 * @category Flex Errors
 * @typedef PluginInfo
 * @property {string} [name] Name of the plugin
 * @property {string} [version] Version of the plugin
 * @memberof FlexError
 */
export declare type PluginInfo = {
    name?: string;
    version?: string;
};
/**
 * Flex Error Content
 * @category Flex Errors
 * @typedef FlexErrorContents
 * @property {FlexError.exports.FlexErrorType} [type] Type of the error
 * @property {Error} [wrappedError] The original error
 * @property {FlexError.PluginInfo} [plugin] Information about the plugin where the error occured (if applicable)
 * @property {string} [context] Error context, including theme customizations
 * @property {string} [description] Longer and more verbose description of the error than message property, possibly with variable metadata
 * @property {FlexError.exports.FlexErrorSeverity} [severity] Severity level of the error
 * @memberof FlexError
 */
export declare type FlexErrorContents = {
    type?: FlexErrorType;
    wrappedError?: Error;
    plugin?: PluginInfo;
    context?: string;
    description?: string;
    severity?: FlexErrorSeverity;
    twilioErrorCode?: TwilioErrorCodes;
};
/**
 * Information about the session where the error occured
 * @category Flex Errors
 * @typedef SessionData
 * @property {Config} [config] Session configuration
 * @property {string} [reactVersion] React version
 * @property {string} [bundleType] Bundle type
 * @memberof FlexError
 */
export declare type SessionData = {
    config?: Config;
    reactVersion?: string;
    bundleType?: string;
    plugins?: {
        name: string;
    }[];
    userAgent?: string;
};
/**
 * @category Flex Errors
 * @class FlexError
 * @classdesc Provides an abstraction on top of the standard Error
 * @hideconstructor
 * @extends Error
 */
export declare class FlexError extends Error {
    /**
     * Flex content
     * @type {FlexError.FlexErrorContents}
     */
    content: FlexErrorContents;
    /**
     * Session data
     * @type {FlexError.SessionData}
     */
    sessionData: SessionData;
    /**
     * Date when the error has been triggered
     * @type {Date}
     */
    time: Date;
    /**
     * Timestamp related with the latest relevant log
     * @type {string}
     */
    logManagerTimestamp: string;
    constructor(message: string, content?: FlexErrorContents);
    private getLogTime;
    /**
     * type, indicating what part of the FlexUI caused the issue, the library itself or any of the sdks
     * @type {FlexError.exports.FlexErrorType}
     */
    get type(): FlexErrorType;
    /**
     * gets you the logs associated with this Flex error.
     * @type {string}
     */
    get logs(): string;
    /**
     * Represents log line
     * @type {string}
     */
    get logLine(): string;
}
export declare const isFlexError: (e: Error) => e is FlexError;
declare class ErrorManagerImpl {
    private debuggerTransport;
    sessionData: {};
    initDebugger(): void;
    private handleCoreError;
    private ErrorSeverityFromCoreErrorSeverity;
    private ErrorTypeFromCoreErrorType;
    constructor();
    /**
     * @private
     */
    updateSessionData(sessionData: SessionData): void;
    /**
     * Processes a FlexError
     * @name processError
     * @function
     * @param {FlexError} error Error to be processed
     * @returns {FlexError}
     * @memberof ErrorManager
     * @deprecated
     *
     * @example
     * ErrorManager.processError(new FlexError("no connection", {description: "There was no internet connection"})); // creates and processes an error
     */
    processError(error: FlexError): FlexError;
    /**
     * Creates and processes a FlexError
     * @name createAndProcessError
     * @function
     * @param {string} message message field of FlexError
     * @returns {FlexErrorContents} content part of FlexError
     * @memberof ErrorManager
     * @deprecated
     *
     * @example
     * ErrorManager.createAndProcessError( "no connection",  {description: "There was no internet connection", context:"some context"});
     */
    createAndProcessError(message: string, content?: FlexErrorContents): FlexError;
}
/**
 * @class ErrorManager
 * @hideconstructor
 * @category Flex Errors
 */
export declare const ErrorManager: ErrorManagerImpl;
export {};
