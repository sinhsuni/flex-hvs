import { AxiosInstance } from "axios";
import { JwtPayload } from "jwt-decode";
import type { Manager } from "../../Manager";
import { IdentityClient } from "./Identity.definitions";
export interface InsightsToken extends JwtPayload {
    allow?: Record<string, Record<string, string[]>>;
    account_id?: string;
    email?: string;
    workspace_id?: string;
}
export default class NextIdentityClient implements IdentityClient {
    private manager;
    private userName;
    private userEmail;
    private ssoLoginUrl;
    private insightsIdentityUrl;
    private flexAccountSid?;
    insightsToken?: string;
    private decodedInsightsToken?;
    private insightsTokenExpiresAt?;
    private tokenRefreshTimeout?;
    private goodDataSessionId?;
    private goodDataSSOProvider?;
    axios: AxiosInstance;
    loading: boolean;
    isLoggedIn: boolean;
    constructor(manager: Manager);
    get user(): {
        workspace_id: string;
        account_id: string;
        name: string;
        email: string;
    };
    private fetchToken;
    private refreshToken;
    ssoLogin: () => Promise<void>;
    logout: () => Promise<void>;
    hasPermission: (permission: string) => boolean;
    getServiceSsoUrl: (targetService: string, targetUrl: string, params?: object) => Promise<string>;
    getWorkspaceEncryptedClaims: () => Promise<string>;
    getSSOProvider: () => Promise<string>;
}
