import { SyncClient } from "twilio-sync";
/**
 * Conference state
 * @typedef ConferencesState.ConferenceState
 * @property {ConferencesState.Conference} source source object of the conference
 * @category State
 */
export interface baseConferenceState<Conference> {
    source: Conference;
}
/**
 * State for known conferences
 * @interface ConferencesState
 * @property {Map<string, ConferencesState.ConferenceState>} states active conferences states by conference SID
 * @category State
 */
export interface baseConferencesState<Conference> {
    readonly client?: SyncClient;
    readonly states: Map<string, baseConferenceState<Conference>>;
}
/**
 * Participant type
 * @typedef {"worker" | "customer" | "transfer" | "supervisor" | ""} ParticipantType
 * @memberof ConferencesState
 */
export declare type ParticipantType = "worker" | "customer" | "transfer" | "supervisor" | "";
/**
 * Participant status
 * @typedef {"left" | "joined" | "recently_left"} ParticipantStatus
 * @memberof ConferencesState
 */
export declare type ParticipantStatus = "left" | "joined" | "recently_left";
/**
 * Conference status
 * @typedef {"left" | "joined" | "recently_left"} ConferenceStatus
 * @memberof ConferencesState
 */
export declare type ConferenceStatus = "started" | "ended";
export interface OutboundTransfer {
    sid: string;
    status: string;
    source: any;
}
export interface baseConferenceListenerCallback<ConferenceListener> {
    (listener: ConferenceListener): void;
}
export declare enum ConferenceListenerState {
    initializing = "initializing",
    initialized = "initialized",
    destroying = "destroying"
}
export interface baseConferenceListenerWrapper<ConferenceListener> {
    consumers: Array<String>;
    listener: ConferenceListener;
}
export interface baseUpdateConferencePayload<Conference> {
    conference: Conference;
}
export interface baseUpdateMultipleConferencePayload<Conference> {
    conferences: Array<Conference>;
}
