import { AnyAction } from "redux";
import { baseConferencesState, baseConferenceState, baseUpdateMultipleConferencePayload, baseUpdateConferencePayload } from "./Conferences.definitions";
import { ConferenceListener } from "./ConferenceListener";
import { Conference } from "./Conference";
export declare type ConferenceState = baseConferenceState<Conference>;
export declare type ConferencesState = baseConferencesState<Conference>;
export declare type UpdateMultipleConferencePayload = baseUpdateMultipleConferencePayload<Conference>;
export declare type UpdateConferencePayload = baseUpdateConferencePayload<Conference>;
export declare function reduce(state: ConferencesState, action: AnyAction): ConferencesState;
export declare class Actions {
    private static handleConferenceUpdateThrottler;
    private static handleConferenceUpdateCalls;
    private static dispatchAction;
    static assignInsights(insightsClient: any): void;
    private static handleConferenceUpdateImpl;
    static handleConferenceUpdate(listener: ConferenceListener): void;
    static updateConferencesWithParticipant(participantSid: string): void;
    static shutdown(): void;
}
