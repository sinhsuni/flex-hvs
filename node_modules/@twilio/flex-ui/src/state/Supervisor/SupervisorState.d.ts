import { Dispatch } from "redux";
import { ITask, IWorker } from "../../models";
import { Conference } from "../Conferences";
import { SupervisorWorkerState } from "../State.definition";
import { SupervisorWorkersListener } from "./SupervisorWorkerListener";
import { CallMonitoringStatus } from "./SupervisorState.definitions";
export { CallMonitoringStatus } from "./SupervisorState.definitions";
/**
 * Call monitoring state
 * @typedef CallMonitoring
 * @property {SupervisorState.CallMonitoringStatus} status status of the monitor call
 * @property {ITask} [task] Monitored task
 * @property {Array<IWorker>} [workers] List of the participating the call
 * @memberof SupervisorState
 */
export interface CallMonitoring {
    readonly status: CallMonitoringStatus;
    readonly task?: ITask;
    readonly workers?: Array<IWorker>;
}
/**
 * State of the supervisor view
 * @interface SupervisorState
 * @property {SupervisorState.CallMonitoring} callMonitoring state of call monitoring
 * @property {SupervisorState.SupervisorWorkerState} [stickyWorker] currently selected worker state
 * @property {Array<SupervisorState.SupervisorWorkerState>} [workers] currently showing worker states
 * @category State
 */
export interface SupervisorState {
    readonly callMonitoring: CallMonitoring;
    readonly listener?: SupervisorWorkersListener;
    readonly stickyWorker?: SupervisorWorkerState;
    readonly workers?: Array<SupervisorWorkerState>;
    readonly isLoadingWorkers: boolean;
    readonly errorLoadingWorkers: LiveQueryError;
}
export declare enum LiveQueryError {
    None = 0,
    Other = 1,
    LongQuery = 2
}
interface SyncError extends Error {
    code?: SyncErrorCodes | number;
}
declare enum SyncErrorCodes {
    TooManyOperators = 54509,
    TooManyItems = 54510
}
export declare type SupervisorStateAction = {
    type: typeof UPDATE_STATE;
    payload: Partial<SupervisorState>;
} | {
    type: typeof MONITORING_SUCCEEDED;
    payload: {
        conference: Conference;
    };
} | {
    type: typeof MONITORING_UPDATED;
    payload: {
        conference: Conference;
    };
} | {
    type: typeof LOAD_WORKERS_START;
} | {
    type: typeof LOAD_WORKERS_FAILED;
    payload: Error | SyncError;
};
export declare const UPDATE_STATE = "SUPERVISOR_UPDATE";
export declare const MONITORING_SUCCEEDED = "SUPERVISOR_INCOMING_CALL";
export declare const MONITORING_UPDATED = "SUPERVISOR_INCOMING_CALL_UPDATE";
export declare const LOAD_WORKERS_START = "SUPERVISOR_LOAD_WORKERS_START";
export declare const LOAD_WORKERS_FAILED = "SUPERVISOR_LOAD_WORKERS_FAILED";
export declare function reduce(state?: SupervisorState, action?: SupervisorStateAction): SupervisorState;
export declare class Actions {
    private static _dispatcher;
    private static listenedConferences;
    private static callMonitoringStart;
    private static stateUpdateThrottler;
    private static pendingStateUpdate;
    private static dispatchStateUpdate;
    static get dispatcher(): Dispatch<any>;
    static set dispatcher(dispatcher: Dispatch<any>);
    static assignInsights(insightsClient: any): void;
    static monitorCall(task: ITask): Promise<void>;
    private static isMonitoredWorkerStillInTheCall;
    private static manageConferenceListening;
    static updateStateWorkers(workers: Array<SupervisorWorkerState>): void;
    static startLoadingWorkers(): void;
    static updateStateStickyWorker(stickyWorker: SupervisorWorkerState): void;
    static setActiveFilterQuery(query: string, taskFilter: string): void;
    static setStickyWorkerSid(sid: string, taskSid: string): void;
    static shutdown(): void;
}
