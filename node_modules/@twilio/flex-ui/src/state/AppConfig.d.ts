import { AccountConfigData, ClientOptions } from "@twilio/flex-sdk";
import { CoreThemeColors, DeepPartial } from "@twilio/flex-ui-core";
import { LogLevelDesc } from "loglevel";
import Client from "twilio-chat";
import { WorkerOptions } from "twilio-taskrouter";
import { BaseThemeColors, Theme } from "../components/theme";
import { CompatibilityOptions } from "../core/CompatibilityChecker";
import { HistoryBuildOptions } from "../history";
import { ITask } from "../models";
import { QueuesConfig } from "./QueuesState/QueuesStateTypes";
/**
 * @category Core
 * @namespace Configuration
 */
/**
 * Task filter callback
 * @callback TaskFilterCallback
 * @private
 * @deprecated
 * @returns {boolean} whether task should be included
 */
export declare type TaskFilterCallback = (task: ITask) => boolean;
/**
 * Task filter definition
 * @typedef TaskFilter
 * @property {TaskFilterCallback} callback callback to filter the tasks
 * @property {string} [text] label to be shown for the filter
 * @deprecated
 * @private
 */
export interface TaskFilter {
    callback: TaskFilterCallback;
    text?: string;
}
/**
 * Theme configuration
 * @typedef Configuration.ThemeConfigProps
 * @property {Config.PredefinedThemeName} [baseName] predefined theme name to take as base
 * @property {CoreThemeColors | BaseThemeColors} [colors] color overrides to be applied
 * @property {boolean} [light] whether theme is light or not
 * @property {Theme} [theme] Overrides for the theme object
 */
export interface ThemeConfigProps {
    baseName?: PredefinedThemeName;
    colors?: Partial<CoreThemeColors & BaseThemeColors>;
    light?: boolean;
    overrides?: DeepPartial<Theme>;
}
/**
 * Options for Twilio SDKs used by Flex
 * @typedef Configuration.SDKOptions
 * @property {WorkerOptions} [worker] options to pass to TaskRouter Worker SDK. See {@link https://twilio.github.io/twilio-taskrouter.js/Worker.html#Worker__anchor}
 * @property {Client.Options} [chat] options to pass to Chat SDK. See {@link https://media.twiliocdn.com/sdk/js/chat/releases/3.4.0/docs/Client.html#.create__anchor}
 * @property {Object} [voice] options to pass to Voice SDK. See {@link https://www.twilio.com/docs/voice/client/javascript/device#constructor}
 * @property {Object} [insights] options to pass to Sync SDK. See {@link https://media.twiliocdn.com/sdk/js/sync/releases/0.11.1/docs/Client.html#Client__anchor}
 * @property {ClientOptions} options to pass to Flex SDK.
 */
export interface SDKOptions {
    worker?: WorkerOptions;
    chat?: Client.Options;
    voice?: object;
    insights?: object;
    flex?: DeepPartial<ClientOptions>;
}
declare type DeprecatedThemeName = "MediumTheme" | "DarkTheme" | "BlueMediumTheme" | "BlueDarkTheme";
/**
 * Predefined theme name
 * @typedef {"GreyLight" | "GreyDark" | "FlexLight" | "FlexDark"} Configuration.PredefinedThemeName
 */
export declare type PredefinedThemeName = DeprecatedThemeName | "GreyLight" | "GreyDark" | "FlexLight" | "FlexDark";
/**
 * Plugin Service interface
 * @typedef Configuration.PluginService
 * @property {boolean} [enabled] Whether the plugin service is enabled or not
 */
export interface PluginService {
    enabled?: boolean;
}
/**
 * Custom plugins interface
 * @typedef Configuration.CustomPlugins
 * @property {number} phase plugin phase
 * @property {string} name plugin name
 * @property {string} src url where plugin can be found
 * @property {string} [version] plugin version
 */
export interface CustomPlugins {
    phase: number;
    name: string;
    src: string;
    version?: string;
}
/**
 * Plugin service attributes interface
 * @typedef Configuration.PluginServiceAttributes
 * @property {string} [custom_plugins_url] url to the plugin JSON
 * @property {Configuration.CustomPlugins} [custom_plugins] array of plugins
 */
export interface PluginServiceAttributes {
    custom_plugins_url?: string;
    custom_plugins?: CustomPlugins[];
}
/**
 * File attachment configuration
 * @typedef Configuration.FileAttachmentConfig
 * @property {number} [maxFileSize=10485760] Maximum file size that can be uploaded. Enter a value in bytes. Default is 10mb
 * @property {Array<string>} [acceptedExtensions=["jpg", "jpeg", "png", "gif", "txt", "pdf"]] Allowed file extensions to be uploaded.
 * @property {boolean} [readOnly=false] Represents if file attachment is read only
 */
export interface FileAttachmentConfig {
    maxFileSize?: number;
    acceptedExtensions?: Array<string>;
    readOnly?: boolean;
}
export interface LocationConfig {
    name: string;
    edge: Array<string> | string;
}
/**
 * Configuration interface
 *
 * @typedef Configuration.AppConfiguration
 * @property {string} [language] language code, not used
 * @property {"silent" | "error" | "warning" | "info" | "debug" | "trace"} [logLevel="error"] level for logger
 * @property {Configuration.ThemeConfigProps | Configuration.PredefinedThemeName} [colorTheme] color theme configuration
 * @property {Configuration.SDKOptions} [sdkOptions] SDK options
 * @property {Configuration.SSOConfiguration} [sso] SSO configuration
 * @property {Configuration.PluginService} [pluginService] PluginService configuration
 * @property {Object} [componentProps] Props to be set for React components. Key of the object is component name. e.g. { AgentDesktopView: { showPanel2: false } }
 * @property {Object} [router] Router configuration
 * @property {"browser" | "memory"} [router.type] type of the router
 * @property {Object} [router.history] history object to use for routing
 * @property {boolean} [router.isolate] whether to isolate Flex routing from other routing. Makes Flex to use memory router.
 * @property {boolean} [disableBrowserVoice] whether to disable Twilio Voice SDK instantiation
 * @property {boolean} [rejectPendingReservations] whether to reject all pending reservations if user goes to an offline activity
 * @property {Object} [warmTransfers] Warm transfer configuration
 * @property {boolean} [warmTransfers.enabled] Whether to enable warm transfer feature
 * @property {Configuration.Notifications} [notifications] Notification configuration
 * @property {Configuration.FileAttachmentConfig} [fileAttachment] File attachment configuration
 * @memberof Configuration
 */
export interface Config {
    language?: string;
    logLevel?: LogLevelDesc;
    colorTheme?: ThemeConfigProps | PredefinedThemeName;
    serviceBaseUrl?: string;
    sdkOptions?: SDKOptions;
    sso?: SSOConfig;
    pluginService?: PluginService;
    componentProps?: any;
    router?: {
        type: "browser" | "memory";
        history?: HistoryBuildOptions;
        isolate?: boolean;
    };
    disableBrowserVoice?: boolean;
    initialDeviceCheck?: boolean;
    rejectPendingReservations?: boolean;
    warmTransfers?: {
        enabled?: boolean;
    };
    insights?: {
        baseUrl?: string;
        analyticsUrl?: string;
        identityUrl?: string;
        questionnairesUrl?: string;
        assessmentsApiUrl?: string;
        ssoUrl?: string;
        player?: {
            baseUrl: string;
            mediaApiUrl: string;
        };
    };
    enableClientCalling?: boolean;
    fileAttachment?: FileAttachmentConfig;
    holdMusicUrl?: string;
    holdMusicMethod?: string;
    locations?: Array<LocationConfig>;
    disableTelemetry?: boolean;
    enableReduxLogging?: boolean;
    logger?: {};
    markdown?: {
        enabled: boolean;
        mode?: "readOnly" | "readWrite";
    };
    notifications?: {
        browser: boolean;
        mode?: "whenNotInFocus" | "always";
    };
}
/**
 * Skill definition
 *
 * @typedef Configuration.SkillDefinition
 * @property {string} name name of the skill
 * @property {boolean} multivalue whether skill may have a numerical level
 * @property {number} [minimum] maximum value for level
 * @property {number} [maximum] minimum value for level
 */
export interface SkillDefinition {
    name: string;
    multivalue: boolean;
    minimum?: number;
    maximum?: number;
}
interface IntegrationsConfig {
    name: string;
    type: string;
    active: boolean;
    config: any;
    logo?: string;
    author?: string;
}
interface OutboundFlows {
    [key: string]: {
        enabled: boolean;
        caller_id: string;
        queue_sid: string;
        location: string;
        workflow_sid: string;
    };
}
/**
 * Service configuration
 *
 * @typedef {Object} Configuration.ServiceConfiguration
 * @property {string} account_sid account SID
 * @property {string} chat_service_instance_sid chat service instance SID
 * @property {string} runtime_domain Twilio Runtime Domain
 * @property {string} taskrouter_workspace_sid Task Router Workspace SID for Flex
 * @property {string} taskrouter_target_taskqueue_sid Task Router Task Queue SID
 * @property {string} taskrouter_target_workflow_sid Task Router Workflow SID
 * @property {any} outbound_call_flows Outbound call flows
 * @property {Array<Manager.SkillDefinition>} taskrouter_skills all possible skills that can be assigned
 */
export interface ServiceConfiguration {
    account_sid: string;
    attributes: any;
    call_recording_enabled: boolean;
    call_recording_webhook_url: string | null;
    chat_service_instance_sid: string;
    crm_attributes: any;
    integrations?: Array<IntegrationsConfig>;
    crm_callback_url: string;
    plugin_service_attributes: PluginServiceAttributes;
    crm_enabled: boolean;
    crm_fallback_url: string;
    crm_type: string;
    date_created: string;
    date_updated: string;
    messaging_service_instance_sid: string;
    queue_stats_configuration: null | QueuesConfig;
    runtime_domain: string;
    flex_service_instance_sid: string | null;
    outbound_call_flows: OutboundFlows;
    plugin_service_enabled: boolean | null;
    public_attributes: object;
    service_version: string;
    serverless_service_sids: Array<string>;
    status: string;
    taskrouter_offline_activity_sid?: string;
    taskrouter_skills?: Array<SkillDefinition>;
    taskrouter_target_taskqueue_sid: string;
    taskrouter_target_workflow_sid: string;
    taskrouter_taskqueues: any;
    taskrouter_worker_attributes: any;
    taskrouter_worker_channels: any;
    taskrouter_workspace_sid: string;
    ui_dependencies: {
        [key: string]: string;
    } | null;
    ui_attributes: Partial<Config> & {
        version_compatibility?: CompatibilityOptions;
        version_message?: string;
    };
    ui_language: string;
    ui_version: string;
    url: string;
    markdown: {
        enabled: boolean;
        mode: "readOnly" | "readWrite";
    };
    notifications: {
        enabled: boolean;
        mode: "whenNotInFocus" | "always";
    };
}
/**
 * SSO Configuration interface
 *
 * @typedef {Object} Configuration.SSOConfiguration
 * @property {string} [accountSid] account SID
 * @property {boolean} [loginPopup=false] whether to launch IdP login in a new window
 * @property {string} [loginPopupFeatures] standard window.open() features param to be applied to popup window
 * @property {string} [redirectUrl=window.location.href] redirect url where to return back from identity provider to log in to Flex
 */
export interface SSOConfig {
    accountSid?: string;
    idpUrl?: string;
    loginPopup?: boolean;
    loginPopupFeatures?: string;
    products?: Array<string>;
    redirectUrl?: string;
    tokenRefreshThresholdMs?: number;
}
/**
 * Flex SDK Account Configuration interface
 *
 * @typedef {Object} Configuration.FlexSDKAccountConfiguration
 */
export interface FlexSDKAccountConfiguration extends AccountConfigData<any> {
    markdown: {
        enabled: boolean;
        mode: "readOnly" | "readWrite";
    };
    notifications: {
        enabled: boolean;
        mode: "whenNotInFocus" | "always";
    };
}
export {};
