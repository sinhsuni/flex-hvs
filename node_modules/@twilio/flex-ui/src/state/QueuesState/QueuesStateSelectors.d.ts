import { AppState } from "../AppState";
import { WorkerQueue, QueuesFilterFunction } from "./QueuesStateTypes";
export declare const queuesListSelector: (state: AppState) => {
    [key: string]: WorkerQueue;
};
export declare const queuesListFilterSelector: (state: AppState) => QueuesFilterFunction;
export declare const workspaceStatsSelector: (state: AppState) => import("./QueuesStateTypes").WorkspaceStats;
export declare const queueSelector: (state: AppState, queueSid: string) => WorkerQueue;
export declare const queuesListArraySelector: import("reselect").OutputSelector<AppState, WorkerQueue[], (res1: {
    [key: string]: WorkerQueue;
}, res2: QueuesFilterFunction) => WorkerQueue[]>;
export declare const workspaceActiveTasksSelector: import("reselect").OutputSelector<AppState, number, (res: WorkerQueue[]) => number>;
export declare const workspaceWaitingTasksSelector: import("reselect").OutputSelector<AppState, number, (res: WorkerQueue[]) => number>;
export declare const workspaceLongestQueueSelector: import("reselect").OutputSelector<AppState, WorkerQueue, (res: WorkerQueue[]) => WorkerQueue>;
export declare const validQueueChannelConfigurationsSelector: import("reselect").OutputSelector<AppState, import("./QueuesStateTypes").QueueChannelConfiguration[], (res1: import("./QueuesStateTypes").QueueChannelConfiguration[], res2: string[]) => import("./QueuesStateTypes").QueueChannelConfiguration[]>;
export declare const queueConfigurationSelector: import("reselect").OutputParametricSelector<AppState, {
    queueSid: string;
}, import("./QueuesStateTypes").QueueConfiguration, (res1: import("./QueuesStateTypes").QueueConfiguration[], res2: string) => import("./QueuesStateTypes").QueueConfiguration>;
export declare const queueChannelConfigurationsSelector: import("reselect").OutputParametricSelector<AppState, {
    queueSid: string;
}, import("./QueuesStateTypes").QueueChannelConfiguration[], (res1: import("./QueuesStateTypes").QueueChannelConfiguration[], res2: string) => import("./QueuesStateTypes").QueueChannelConfiguration[]>;
export declare const queuesMetadataListSelector: import("reselect").OutputSelector<AppState, {
    sid: string;
    friendly_name: string;
}[], (res: {
    readonly queuesBySid: {
        [sid: string]: {
            sid: string;
            friendly_name: string;
        };
    };
    readonly queueSids: string[];
    readonly channelsBySid: {
        [sid: string]: {
            sid: string;
            friendly_name: string;
            unique_name: string;
        };
    };
    readonly channelSids: string[];
    readonly hasFetched: boolean;
    readonly error: Error;
}) => {
    sid: string;
    friendly_name: string;
}[]>;
export declare const queuesGlobalConfig: (state: AppState) => {
    service_level_threshold: number;
    short_abandoned_threshold: number;
    reset_timezone: string;
    reset_time: string;
};
export declare const globalSLConfigSelector: import("reselect").OutputSelector<AppState, {
    timezone: string;
    dailyReset: string;
    serviceLevelThreshold: number;
    shortAbandonedThreshold: number;
}, (res: {
    service_level_threshold: number;
    short_abandoned_threshold: number;
    reset_timezone: string;
    reset_time: string;
}) => {
    timezone: string;
    dailyReset: string;
    serviceLevelThreshold: number;
    shortAbandonedThreshold: number;
}>;
