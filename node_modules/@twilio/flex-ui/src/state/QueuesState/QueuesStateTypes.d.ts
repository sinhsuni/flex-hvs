export interface QueuesState {
    queuesList: {
        [key: string]: WorkerQueue;
    };
    hasFetchedList: boolean;
    workspaceStats?: WorkspaceStats;
    filter?: QueuesFilterFunction;
    error?: Error;
    queuesConfig: QueuesConfig;
    metadata: {
        readonly queuesBySid: {
            [sid: string]: {
                sid: string;
                friendly_name: string;
            };
        };
        readonly queueSids: string[];
        readonly channelsBySid: {
            [sid: string]: {
                sid: string;
                friendly_name: string;
                unique_name: string;
            };
        };
        readonly channelSids: string[];
        readonly hasFetched: boolean;
        readonly error: null | Error;
    };
}
export interface QueuesConfig {
    default: {
        service_level_threshold: number;
        short_abandoned_threshold: number;
        reset_timezone: string;
        reset_time: string;
    };
    queue_configurations: null | QueueConfiguration[];
    queue_channel_configurations: null | QueueChannelConfiguration[];
}
export interface QueueConfiguration {
    queue_sid: string;
    reset_timezone: string;
    reset_time: string;
}
export interface QueueChannelConfiguration {
    queue_sid: string;
    channel_sid: string;
    service_level_threshold: number;
    short_abandoned_threshold: number;
}
export interface TRQueue {
    sid: string;
    friendly_name: string;
    date_created: string;
    date_updated: string;
}
/**
 * @typedef QueuesStats․ActivityStatistics
 * @memberof QueuesStats․QueuesDataTable
 *
 * @property {string} sid
 * @property {number} workers
 * @property {string} friendly_name
 * @property {number} available_workers
 */
export interface ActivityStatistic {
    sid: string;
    workers: number;
    friendly_name: string;
    available_workers: number;
}
export interface Queue {
    key: string;
    activity_statistics: ActivityStatistic[];
    tasks_by_priority: {
        [key: string]: number;
    };
    tasks_by_status: {
        reserved: number;
        pending: number;
        assigned: number;
        wrapping: number;
    };
    total_tasks: number;
    longest_task_waiting_sid: string | null;
    longest_task_waiting_from: string | null;
}
/**
 * @typedef QueuesStats․WorkerQueue
 * @memberof QueuesStats․QueuesDataTable
 *
 * @property {string} friendly_name
 * @property {string} key
 * @property {number} total_available_workers
 * @property {number} total_eligible_workers
 * @property {Array<QueuesStats.ActivityStatistic>} activity_statistics
 * @property {Object.<string, number>} tasks_by_priority
 * @property {Object.<{ reserved: number, pending: number, assigned: number, wrapping: number }>} tasks_by_status
 * @property {number} total_tasks
 * @property {string|null} longest_task_waiting_sid
 * @property {string|null} longest_task_waiting_from
 */
export interface WorkerQueue extends Queue {
    friendly_name: string;
    total_available_workers: number;
    total_eligible_workers: number;
    sla_30_min?: WorkerQueueSLA;
    sla_today?: WorkerQueueSLA;
    channels?: WorkerQueueChannel[];
}
export interface WorkspaceStats extends Queue {
    total_workers: number;
}
export interface WorkerQueueTasksNow {
    reserved_tasks: number;
    total_tasks: number;
    pending_tasks: number;
    wrapping_tasks: number;
    timestamp_updated: number;
    assigned_tasks: number;
    longest_task_waiting_sid: string | null;
    longest_task_waiting_from: string | null;
    longest_task_waiting_age: number;
    tasks_by_priority: any;
}
export interface WorkerQueueWorkerStatistics {
    total_available_workers: number;
    total_eligible_workers: number;
    timestamp_updated: number;
    activity_statistics: ActivityStatistic[];
}
export interface WorkerQueueSLA {
    total_tasks_count: number;
    handled_tasks_count: number;
    handled_tasks_within_sl_threshold_count: number;
    handled_tasks_within_sl_threshold_percentage: number;
    short_abandoned_tasks_count: number;
    short_abandoned_tasks_percentage: number;
    abandoned_tasks_count: number;
    abandoned_tasks_percentage: number;
    flow_out_tasks_count: number;
    flow_out_tasks_percentage: number;
    sla_percentage: number;
    timestamp_updated: number;
}
export interface WorkerQueueChannelMetadata {
    unique_name?: string;
    friendly_name?: string;
    sid?: string;
}
export interface WorkerQueueChannel extends WorkerQueueChannelMetadata {
    sla_30_min?: WorkerQueueSLA;
    sla_today?: WorkerQueueSLA;
    tasks_now?: WorkerQueueTasksNow;
}
/**
 * An alias for a function used as a parameter for {@link QueuesStats.setFilter}.
 * <pre>(queue: [WorkerQueue]{@link QueuesStats.WorkerQueue}) => boolean</pre>
 * @typedef QueuesFilterFunction
 * @memberof QueuesStats
 */
export declare type QueuesFilterFunction = (queue: WorkerQueue) => boolean;
export declare type QueuesSubscriptionFilterFunction = (queue: TRQueue) => boolean;
export declare const SET_QUEUES = "FLEX_SET_QUEUES";
export declare const ADD_QUEUE = "FLEX_ADD_QUEUE";
export declare const UPDATE_QUEUE = "FLEX_UPDATE_QUEUE";
export declare const REMOVE_QUEUE = "FLEX_REMOVE_QUEUE";
export declare const SET_WORKSPACE_STATS = "FLEX_SET_WORKSPACE_STATS";
export declare const UPDATE_FILTER = "FLEX_UPDATE_QUEUES_FILTER";
export declare const QUEUES_ERROR = "FLEX_QUEUES_ERROR";
export declare const UPDATE_QUEUES_CONFIG = "FLEX_UPDATE_QUEUES_CONFIG";
export declare const UPDATE_METADATA = "FLEX_UPDATE_QUEUES_METADATA";
export declare type QueuesStateActionTypes = {
    type: typeof SET_QUEUES;
    payload: WorkerQueue[];
} | {
    type: typeof ADD_QUEUE;
    payload: WorkerQueue;
} | {
    type: typeof UPDATE_QUEUE;
    payload: WorkerQueue;
} | {
    type: typeof REMOVE_QUEUE;
    payload: string;
} | {
    type: typeof SET_WORKSPACE_STATS;
    payload: WorkspaceStats;
} | {
    type: typeof UPDATE_FILTER;
    payload: QueuesFilterFunction;
} | {
    type: typeof QUEUES_ERROR;
    payload: Error;
} | {
    type: typeof UPDATE_QUEUES_CONFIG;
    payload: QueuesConfig;
} | {
    type: typeof UPDATE_METADATA;
    payload: QueuesState["metadata"];
};
