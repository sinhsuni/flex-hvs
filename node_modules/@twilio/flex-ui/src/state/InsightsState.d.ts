import { GoodDataProfileInfo, AnalyticalDashboard, ProjectDashboard } from "../models/InsightsModel";
import { SyncClient } from "twilio-sync";
import { IFinding } from "../core/Insights/Findings/Finding.models";
import { InsightsState, InsightsStateActionTypes, Segment, SegmentList } from "./InsightsState.definitions";
import { AppState } from "./AppState";
export declare const currentSegmentSelector: import("reselect").OutputSelector<AppState, Segment, (res1: {
    [segmentId: string]: Segment;
}, res2: string) => Segment>;
export declare const segmentSelector: (state: AppState, segmentId: string) => Segment;
export declare const segmentListSelector: import("reselect").OutputParametricSelector<AppState, string, SegmentList, (res: Segment) => SegmentList>;
export declare const currentSegmentListSelector: import("reselect").OutputSelector<AppState, SegmentList, (res: Segment) => SegmentList>;
export declare const findingsSelector: import("reselect").OutputParametricSelector<AppState, string, IFinding[], (res1: SegmentList, res2: {
    [segmentId: string]: IFinding[];
}) => IFinding[]>;
export declare const displayedFindingsSelector: import("reselect").OutputParametricSelector<AppState, string, {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "agent" | "customer";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[], (res1: {
    [segmentId: string]: Segment;
}, res2: IFinding[]) => {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "agent" | "customer";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[]>;
export declare const silencesAndCrosstalksSelector: import("reselect").OutputParametricSelector<AppState, string, {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "agent" | "customer";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[], (res1: {
    [segmentId: string]: Segment;
}, res2: IFinding[]) => {
    offset: number;
    id: string;
    segment_id: string;
    speaker: "agent" | "customer";
    speech_phrase: string;
    speech_search: string;
    verified: string;
    duration: number;
    confidence: number;
}[]>;
export declare const currentSegmentOffsetSelector: import("reselect").OutputSelector<AppState, number, (res: Segment) => number>;
export declare const mediaLinksSelector: import("reselect").OutputSelector<AppState, import("../components/Insights/Player/Player.definitions").InsightsPlayerMediaLink[], (res: Segment) => import("../components/Insights/Player/Player.definitions").InsightsPlayerMediaLink[]>;
export declare function reduce(state: InsightsState, action: InsightsStateActionTypes): InsightsState;
export declare class Actions {
    private static dispatchAction;
    static init(client: SyncClient): void;
    static shutdown(): Promise<void>;
    static updateGoodDataProfileInfo(info: GoodDataProfileInfo): void;
    static updateInsightsProjectDashboards(dashboards: ProjectDashboard[]): void;
    static updateInsightsAnalyticalDashboards(dashboards: AnalyticalDashboard[]): void;
    static deleteDashboard(dashboardId: string): void;
    static navigateToFirstDashboard(): void;
    static updateDashboardDrillableItems(payload: {
        dashboardId: string;
        items: string[];
    }): void;
}
