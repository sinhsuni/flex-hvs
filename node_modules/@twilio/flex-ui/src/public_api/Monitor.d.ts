import { FlexErrorContents, SessionData } from "../FlexError";
/**
 * Information about the session where the error occured
 * @category Flex Errors
 * @typedef ErrorDetails
 * @extends {FlexError.FlexErrorContents}
 * @property {string} message Error message.
 * @property {string} [wrappedError] The original error message.
 * @memberof Monitor
 */
interface ErrorDetails extends Partial<Omit<FlexErrorContents, "wrappedError">> {
    message: string;
    wrappedError?: string;
}
/**
 * Information about the session where the error occured
 * @category Flex Errors
 * @typedef FlexErrorJSON
 * @property {string} title Normalized title of an error.
 * @property {string} name Raw name of an error.
 * @property {string} message Error message.
 * @property {string} logLine Normalized log line of an error.
 * @property {string} stack Represents stack trace of an error
 * @property {Monitor.ErrorDetails} details Contents more details of an error.
 * @property {string | Monitor.FlexErrorJSON} wrappedError The original error.
 * @property {string} logs Logs around the error.
 * @property {FlexError.SessionData} sessionData Information about the session where the error occured.
 * @memberof Monitor
 */
interface FlexErrorJSON {
    title: string;
    name: string;
    message: string;
    logLine: string;
    stack: string;
    details: ErrorDetails;
    wrappedError: string | FlexErrorJSON;
    logs: string;
    sessionData: SessionData;
}
/**
 * @package
 * @interface Monitor
 * @hideconstructor
 * @category Flex Errors
 */
export declare const Monitor: {
    /**
     * returns an object ({ errors: Array<{@link Monitor.FlexErrorJSON}> }) with errors occoured.
     *
     * @name Monitor.getErrors
     * @example
     * import { Monitor } from "@twilio/flex-ui";
     * Monitor.getErrors(); // returns { errors: Array<{@link Monitor.FlexErrorJSON}> }
     */
    getErrors(): {
        errors: Array<FlexErrorJSON>;
    };
    /**
     * returns an object with logs recorded.
     *
     * @name Monitor.getLogs
     * @returns {{ logs: string }}
     * @example
     * import { Monitor } from "@twilio/flex-ui";
     * Monitor.getLogs(); // returns { logs: string }
     */
    getLogs(): {
        logs: string;
    };
    /**
     * creates and sends a Custom Error Event to Twilio Debugger
     *
     * @name Monitor.sendDebuggerEvent
     * @param {string} message message field of error
     * @param {string} description description of error
     * @returns {{ void }}
     * @example
     * Monitor.sendDebuggerEvent("Connection failed"); // creates and sends error event to Twilio Debugger
     */
    sendDebuggerEvent(message: string, description?: string): void;
};
export {};
