{"version":3,"sources":["webpack://@twilio/flex-sdk/webpack/bootstrap","webpack://@twilio/flex-sdk/external \"inversify\"","webpack://@twilio/flex-sdk/./src/modules/error/InternalError/InternalError.ts","webpack://@twilio/flex-sdk/./src/utils/extractFromPath.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.to-string.js\"","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LogEntry.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.iterator.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.iterator.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.iterator.js\"","webpack://@twilio/flex-sdk/./src/modules/config/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.promise.js\"","webpack://@twilio/flex-sdk/./src/modules/websocket/index.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.weak-map.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.description.js\"","webpack://@twilio/flex-sdk/./src/backend/backend.rtti.ts","webpack://@twilio/flex-sdk/external \"regenerator-runtime/runtime.js\"","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientEvent.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/SessionEvent.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventName.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkEvents/TelemetrySdkEventSource.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/TelemetrySdkClient/TelemetrySDKSessionData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/events/EventPublisher/EventPublisher.ts","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/ErrorCodes.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.rtti.ts","webpack://@twilio/flex-sdk/./src/utils/assert.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/web.dom-collections.for-each.js\"","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/ratelimiter.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.concat.js\"","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/InternalErrorCodes.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.keys.js\"","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClientFactory/createTelemetryClient.ts","webpack://@twilio/flex-sdk/./src/modules/storage/index.ts","webpack://@twilio/flex-sdk/./src/modules/auth/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.symbol.iterator.js\"","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClient/TwilsockClient.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.function.name.js\"","webpack://@twilio/flex-sdk/./src/modules/error/error.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/error/ErrorCode/ErrorCodeHelper.ts","webpack://@twilio/flex-sdk/./src/utils/processHttpAdapterResponse.ts","webpack://@twilio/flex-sdk/./src/utils/typeGuards.ts","webpack://@twilio/flex-sdk/./src/modules/storage/storage.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.filter.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-own-property-descriptors.js\"","webpack://@twilio/flex-sdk/./src/backend/HttpAdapter/authenticationMethods.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuthHelper.ts","webpack://@twilio/flex-sdk/./src/modules/auth/Authenticator/FederatedAuth/FederatedAuth.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/auth/auth.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/auth/AuthenticatorFactory/createAuthenticator/createAuthenticator.ts","webpack://@twilio/flex-sdk/./src/modules/auth/TwilioIdpUrlFunction/getTwilioIdpUrl.ts","webpack://@twilio/flex-sdk/./src/modules/session/Session/SessionImpl.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/client/Client/ClientImpl/ClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/client/client.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/error/ThrowError/reportError.ts","webpack://@twilio/flex-sdk/./src/modules/error/ThrowError/ErrorHelper.ts","webpack://@twilio/flex-sdk/./src/modules/error/error.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/events/events.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/config/EnvironmentConfig/EnvironmentConfigImpl.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig.ts","webpack://@twilio/flex-sdk/./src/modules/config/config.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/websocket.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/TwilsockClientFactory/getTwilsockClient.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/rbac.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/HasRole/hasRole.ts","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerImpl/LoggerImpl.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/formatEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logEntryPlugin.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/createLogEntry.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setContext.ts","webpack://@twilio/flex-sdk/./src/modules/logger/plugins/logentry/setData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/logger.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryClient/TelemetryClientImpl/TelemetryClientImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/telemetry.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryEventGroupFactory/createEventGroup.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/RateLimiter/RateLimiterImpl/RateLimiterImpl.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/ratelimiter.ioc.ts","webpack://@twilio/flex-sdk/./src/modules/storage/ClearCache/clearLocalStorage.ts","webpack://@twilio/flex-sdk/./src/modules/storage/LocalStorage/LocalStorageImpl.ts","webpack://@twilio/flex-sdk/./src/ioc.config.ts","webpack://@twilio/flex-sdk/./src/modules/storage/storage.ioc.ts","webpack://@twilio/flex-sdk/./src/backend/openApi.container.ts","webpack://@twilio/flex-sdk/./src/modules/telemetrySdkClient/telemetrySdkClient.rtti.ts","webpack://@twilio/flex-sdk/./src/utils/mapKeys.ts","webpack://@twilio/flex-sdk/./src/modules/session/session.rtti.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.map.js\"","webpack://@twilio/flex-sdk/./src/modules/client/client.rtti.ts","webpack://@twilio/flex-sdk/./src/modules/error/FlexSdkError/FlexSdkError.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.includes.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.includes.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.exec.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.get-prototype-of.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.to-string.js\"","webpack://@twilio/flex-sdk/./src/modules/logger/Logger/LoggerName.ts","webpack://@twilio/flex-sdk/external \"events\"","webpack://@twilio/flex-sdk/./src/modules/events/events.rtti.ts","webpack://@twilio/flex-sdk/external \"loglevel\"","webpack://@twilio/flex-sdk/./src/utils/retry/retry.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.slice.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.reflect.construct.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.replace.js\"","webpack://@twilio/flex-sdk/./src/modules/error/ErrorSeverity/ErrorSeverity.ts","webpack://@twilio/flex-sdk/./src/modules/storage/LocalStorage/LocalStorageKeys.ts","webpack://@twilio/flex-sdk/external \"lodash/cloneDeep\"","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/index.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockReplyError.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.reduce.js\"","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockEvent.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.from.js\"","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/model/role.ts","webpack://@twilio/flex-sdk/./src/modules/session/SessionOptions/defaultSessionOptions.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientProvider/createClient.ts","webpack://@twilio/flex-sdk/./src/modules/client/ClientOptions/ClientOptionsStore.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer.ts","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigDataGetter/getAccountConfigData.ts","webpack://@twilio/flex-sdk/./src/modules/logger/LoggerFactory/getLogger.ts","webpack://@twilio/flex-sdk/./src/modules/logger/DefaultLoggerLevel/defaultLoggerLevel.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryOptions/getDefaultTelemetryOptions.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/cleanupRateLimiters/cleanupRateLimiters.ts","webpack://@twilio/flex-sdk/./src/modules/ratelimiter/RateLimiterFactory/createRateLimiter/createRateLimiter.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/./src/backend/TwilsockAdapter/TwilsockAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/backend/HttpAdapter/HttpAdapterImpl.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Features/api/features.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Features/ApiServiceBinder.ts","webpack://@twilio/flex-sdk/external \"lodash/camelCase\"","webpack://@twilio/flex-sdk/external \"lodash/snakeCase\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.values.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.constructor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.trim.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.match.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.map.js\"","webpack://@twilio/flex-sdk/external \"twilsock\"","webpack://@twilio/flex-sdk/./src/utils/mergeUserOptions.ts","webpack://@twilio/flex-sdk/external \"lodash/mergeWith\"","webpack://@twilio/flex-sdk/./src/modules/config/AccountConfigProvider/AccountConfigProvider.ts","webpack://@twilio/flex-sdk/./src/modules/config/PublicConfigProvider/getPublicConfig.ts","webpack://@twilio/flex-sdk/external \"lodash/mapKeys\"","webpack://@twilio/flex-sdk/external \"lodash/transform\"","webpack://@twilio/flex-sdk/./src/modules/config/FeaturesProvider/featuresProviderImpl/featuresProviderImpl.ts","webpack://@twilio/flex-sdk/./src/modules/websocket/Twilsock/TwilsockImpl.ts","webpack://@twilio/flex-sdk/./src/modules/rbac/RequiredRole/requiredRole.ts","webpack://@twilio/flex-sdk/./node_modules/loglevel/lib/loglevel.js","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor.ts","webpack://@twilio/flex-sdk/./src/modules/telemetry/TelemetryProcessor/TwilioEventProcessor/toSdkBackendEvent.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Telemetry/api/telemetry.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/Configuration/api/configuration.service.ts","webpack://@twilio/flex-sdk/./src/backend/generated/FederatedAuth/api/federatedAuth.service.ts","webpack://@twilio/flex-sdk/./src/utils/defaultRetryConditionOnFlexSdkError.ts","webpack://@twilio/flex-sdk/external \"reflect-metadata\"","webpack://@twilio/flex-sdk/./src/ioc.helper.ts","webpack://@twilio/flex-sdk/./src/index.ts","webpack://@twilio/flex-sdk/external \"core-js/modules/es.array.find.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.number.is-nan.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.ends-with.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.regexp.constructor.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.object.entries.js\"","webpack://@twilio/flex-sdk/external \"core-js/modules/es.string.starts-with.js\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","InternalError","_Error","_inherits","_super","_this","message","arguments","length","undefined","_classCallCheck","this","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","extractModuleFromPath","path","match","replace","extractFileNameFromPath","Severity","LogEntry","loggerName","severity","Debug","timestamp","Date","context","_config_rtti__WEBPACK_IMPORTED_MODULE_0__","__webpack_exports__","_websocket_rtti__WEBPACK_IMPORTED_MODULE_0__","_Twilsock_TwilsockEvent__WEBPACK_IMPORTED_MODULE_1__","telemetryClientRTTI","for","telemetryClientFactoryRTTI","telemetryEventGroupRTTI","telemetryEventGroupFactoryRTTI","telemetryProcessorRTTI","telemetryOptionsRTTI","telemetryRateLimiterOptionsRTTI","twilsockAdapterRTTI","httpAdapterRTTI","telemetryServiceRTTI","configurationServiceRTTI","featuresServiceRTTI","federatedAuthServiceRTTI","ClientEvent","SessionEvent","TelemetrySdkEventGroup","TelemetrySdkEventName","TelemetrySdkEventSource","SDKDependency","loggerFactoryRTTI","newableLoggerRTTI","loglevelFactoryRTTI","defaultPluginsRTTI","loggerOptionsRTTI","loggerInstancesRTTI","authenticatorRTTI","authenticatorDataContainerRTTI","authenticatorFactoryRTTI","twilioIdpUrlRTTI","twilioIdpUrlMockOptionsRTTI","authenticatorMockOptionsRTTI","proxyEvent","from","to","event","alias","addListener","_len","args","Array","_key","emit","apply","concat","ErrorCode","publicErrorDetails","_defineProperty","_publicErrorDetails","PermissionDeniedError","InvalidAccessToken","AccessTokenExpired","TooManyRequests","AuthorizationError","ValidationError","ConnectionError","SDK","Unknown","Forbidden","InvalidParams","NotFound","InvalidState","TooManySDKRequests","TemporarilyDisabled","NetworkError","TwilsockConnectionError","BadRequest","InvalidCertificate","debuggerErrorCodes","environmentConfigRTTI","accountConfigRTTI","configDataContainerRTTI","accountConfigProviderRTTI","accountConfigUpdaterRTTI","publicConfigProviderRTTI","publicConfigMockOptionsRTTI","featuresProviderRTTI","getAccountConfigRTTI","assertObject","_typeof","isArray","metadata","__dirname","ErrorSeverity","source","__filename","FlexSdkError","assertNotCircularObject","JSON","stringify","err","test","hasCycles","assertString","assertNotEmptyString","trim","assertKeyInObject","rateLimiterRTTI","rateLimiterMapRTTI","rateLimiterFactoryRTTI","cleanupRateLimitersRTTI","newableTwilsockClientRTTI","productIdRTTI","twilsockRTTI","twilsockClientFactoryRTTI","InternalErrorCode","internalErrorDetails","_internalErrorDetails","SyncConnectionError","SyncAccessForbiddenError","SyncMapNotFoundError","SyncInvalidMapItemDataError","SyncInvalidMapItemKeyError","SyncMapItemNotFoundError","SyncNameNotFoundError","SyncNameAlreadyExistsError","SyncInvalidNameError","createTelemetryClient","container","telemetryClient","_storage_rtti__WEBPACK_IMPORTED_MODULE_0__","_LocalStorage_LocalStorageKeys__WEBPACK_IMPORTED_MODULE_1__","_auth_rtti__WEBPACK_IMPORTED_MODULE_0__","_backend_generated_FederatedAuth_model_role__WEBPACK_IMPORTED_MODULE_1__","TwilsockClientEvent","twilsock__WEBPACK_IMPORTED_MODULE_0__","reThrowErrorWithCustomMessageRTTI","throwErrorRTTI","throwErrorFromErrorResponseRTTI","throwErrorFromResponseRTTI","internalToPublicErrorMap","Map","isInternalErrorCode","errorCode","values","find","code","isKnownErrorCode","isPublicErrorCode","isDebuggerErrorCode","includes","getMessage","getPublicErrorCodeMessage","getInternalErrorCodeMessage","getPublicErrorCode","internalErrorCode","convertDateStringValuesToDate","response","dateRegex","dateKeyRegex","RegExp","processedResponse","entries","forEach","_ref","_ref2","_slicedToArray","hasKey","localStorageRTTI","clearCacheRTTI","AuthenticationMethod","makeAuthenticationHeaders","_modules_error__WEBPACK_IMPORTED_MODULE_0__","method","token","Basic","Headers","Authorization","btoa","Content-Type","HostedFlex","x-flex-jwe","getSSOLoginRequestBody","config","products","resource","redirectUrl","FederatedAuth","injectable","_dec","_authenticatorDataContainer","WeakMap","_logger","_federatedAuthService","_class","authenticatorDataContainer","getLogger","federatedAuthService","set","writable","_classPrivateFieldSet","LoggerName","Auth","_refreshToken","_validateToken","_getIdpUrl","inject","_asyncToGenerator","regeneratorRuntime","mark","_callee","payload","accountSid","data","wrap","_context","prev","next","FederatedAuthHelper","_classPrivateFieldGet","getIdpUrl","sent","location","error","abrupt","stop","_x","_callee2","tokenData","_context2","validateToken","roles","valid","dateExpired","expiration","identity","_x2","_callee3","tokenRefreshResult","_context3","refreshToken","_x3","AuthenticatorDataContainerImpl","AuthenticatorDataContainerImpl_dec","_accountSid","AuthenticatorDataContainerImpl_class","AuthenticatorDataContainerImpl_classCallCheck","AuthenticatorDataContainerImpl_classPrivateFieldSet","authModuleContainer","ContainerModule","inSingletonScope","toFactory","createAuthenticator","toDynamicValue","port","twilioServiceLoginUrl","getTwilioIdpUrl","SessionImpl","SessionImpl_dec","_accountConfig","_authFactory","_token","_tokenExpiration","_connection","_options","_accountConfigProvider","_roles","_identity","_isActive","SessionImpl_logger","_needsToAutoUpdateToken","_emitter","_handleTokenAboutToExpire","_autoUpdateToken","SessionImpl_class","connection","options","authFactory","accountConfigProvider","emitter","_value","_value2","SessionImpl_classCallCheck","SessionImpl_asyncToGenerator","SessionImpl_classPrivateFieldGet","SessionImpl_classPrivateFieldSet","newToken","newTokenDateExpired","auth","debug","getTime","warn","TokenMaxLifetimeReached","t0","TokenAutoUpdateFailed","trace","updateToken","info","t1","Session","_destroy","_updateToken","_init","eventEmitterRTTI","sessionOptionsRTTI","autoUpdateToken","connect","TwilsockEvent","TokenAboutToExpire","t2","t3","Promise","resolve","_callee4","_context4","_callee5","_context5","removeListener","destroy","eventName","listener","on","sessionModuleContainer","sessionRTTI","toConstantValue","getDefaultSessionOptions","ClientImpl","ClientImpl_dec","_dec2","postConstruct","_session","ClientImpl_connection","ClientImpl_logger","_telemetryClientFactory","_telemetrySdkClient","ClientImpl_emitter","_cleanupRateLimiters","_sendDestroyEvent","_class2","session","account","telemetryClientFactory","_telemetrySdkClient2","cleanupRateLimiters","fetchFeatures","ClientImpl_classCallCheck","ClientImpl_asyncToGenerator","telemetrySdkClient","group","ClientImpl_classPrivateFieldGet","createEventGroup","Default","addEvents","ClientDestroyed","eventSource","Client","ClientImpl_classPrivateFieldSet","telemetrySdkClientRTTI","TokenExpired","TokenUpdated","ConnectionLost","Connected","ConnectionRestored","Disconnected","removeAllListeners","_toConsumableArray","getOwnPropertyDescriptor","ClientImpl_class","clientModuleContainer","clientOptionsRTTI","ClientOptionsStore","clientRTTI","clientProviderRTTI","toProvider","userOptions","createClient","_wrappedError$message","errorEventGroup","wrappedError","debuggerFlag","loggerFactory","telemetrySdkErrorEventGroupRTTI","addErrorEvent","debugger","reporter","resourceSid","stackTrace","stack","unhandled","wrappedErrorCode","wrappedErrorMessage","throwFlexSdkError","console","publicErrorCode","errorToThrow","_reportError","reportError","reThrowFlexSdkErrorWithCustomMessage","customMessage","throwFlexSdkErrorFromErrorResponse","errorResponse","json","errorModuleContainer","_x4","_throwFlexSdkErrorFromResponse","throwFlexSdkErrorFromResponse","eventsModuleContainer","EventEmitter","getEnvironmentConfig","_window$__TWILIO_FLEX","_objectSpread","window","__TWILIO_FLEX_SDK__","environmentConfig","AccountConfigStore","AccountConfigStore_dec","_dataContainer","_accountConfigUpdater","_currentUpdateConfigPromise","AccountConfigStore_class","dataContainer","updater","AccountConfigStore_classCallCheck","AccountConfigStore_classPrivateFieldSet","_set","AccountConfigStore_classPrivateFieldGet","dataWithoutAccountSid","updateConfigCall","updatedConfigData","_objectWithoutProperties","_excluded","keys","map","updateInCallOrder","then","updateAccountConfig","configurationService","updatedConfiguration","updateConfiguration","updateAccountConfig_objectSpread","configModuleContainer","AccountConfigDataContainer","option","getPublicConfig","featuresProviderImpl","getAccountConfigData","websocketModuleContainer","toConstructor","TwilsockSdkClient","TwilsockImpl","productId","getTwilsockClient","rbacRTTI","rbacModuleContainer","requiredRole","hasRole","role","LoggerImpl","LoggerImpl_dec","_loglevel","LoggerImpl_class","loglevel","LoggerImpl_classCallCheck","LoggerImpl_defineProperty","_classPrivateFieldGet2","LoggerImpl_classPrivateFieldGet","_classPrivateFieldGet3","_classPrivateFieldGet4","_classPrivateFieldGet5","_classPrivateFieldGet6","_classPrivateFieldGet7","level","setLevel","getLevel","LoggerImpl_classPrivateFieldSet","toTwoDigits","number","formatDate","date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","miliseconds","getMilliseconds","factories","originalFactory","methodName","logLevel","firstParam","isLogEntry","messages","unshift","logEntry","toUpperCase","messagePrefix","reverse","logEntryPlugin","f","methodFactory","loggerModuleContainer","getLoglevel","getDefaultLoggerOptions","TelemetryClientImpl","TelemetryClientImpl_dec","_eventGroupFactory","TelemetryClientImpl_logger","TelemetryClientImpl_class","eventGroupFactory","TelemetryClientImpl_classCallCheck","TelemetryClientImpl_classPrivateFieldSet","TelemetryLoggerName","TelemetryClient","_setSessionData","TelemetryClientImpl_classPrivateFieldGet","sessionData","TelemetryEventGroupImpl","TelemetryEventGroupImpl_dec","_processor","TelemetryEventGroupImpl_options","TelemetryEventGroupImpl_connection","TelemetryEventGroupImpl_class","processor","telemetryOptions","twilsock","TelemetryEventGroupImpl_classCallCheck","TelemetryEventGroupImpl_classPrivateFieldSet","_addErrorEvent","_addEvents","TelemetryEventGroupImpl_asyncToGenerator","events","_args","TelemetryEventGroupImpl_classPrivateFieldGet","processEvents","errorEvent","isWebsocketAvailable","isConnected","reportErrors","eventsSucceeded","eventsFailed","eventsNotProcessed","telemetryRateLimiterOptions","timeWindow","maxHitsInTimeWindow","disableFeatureThreshold","telemetryModuleContainer","eventGroup","TwilioTelemetryProcessor","getDefaultTelemetryOptions","telemetrySdkClientModuleContainer","defaultOptions","rateLimiterErrorCode","disableFeatureErrorCode","Number","MAX_VALUE","RateLimiterImpl","RateLimiterImpl_dec","RateLimiterImpl_options","_hitCountInTimeWindow","_rateLimitExceededCount","_resetTimeIntervalHandle","_telemetryEventGroup","RateLimiterImpl_logger","_resetHitCountInTimeWindow","_increaseHitCountInTimeWindow","_increaseExceededCountOnFirstTimeWindowLimitHit","_throwRateLimitErrorIfNeeded","_reportRateLimitErrorIfNeeded","_reportRateLimitHit","_reportRateLimiterDisabledFeature","RateLimiterImpl_class","RateLimiterImpl_classCallCheck","RateLimiterImpl_classPrivateFieldSet","RateLimiterImpl_classPrivateFieldGet","hitCountInTimeWindow","RateLimiterTriggered","RateLimiter","id","RateLimiterDisabledFeature","setInterval","clearInterval","rateLimiterModuleContainer","createRateLimiter","clearLocalStorage","Storage","LocalStorageKeys","localStorage","removeItem","singletonContainer","LocalStorageImpl","LocalStorageImpl_dec","LocalStorageImpl_logger","LocalStorageImpl_class","LocalStorageImpl_classCallCheck","LocalStorageImpl_classPrivateFieldSet","serializedItem","getItem","item","parse","expiry","LocalStorageImpl_classPrivateFieldGet","setItem","storageModuleContainer","createContainer","Container","load","TwilsockAdapterImpl","HttpAdapterImpl","TelemetryBinder","with","ConfigurationServiceBinder","FeaturesBinder","FederatedAuthBinder","withContainer","getSingletonContainer","mapArrayKeys","cb","newArray","newValue","mapAllKeys","push","transform","result","mapRootKeysTo","mapkeys","_","mapRootKeysToSnakeCase","snakecase","mapRootKeysToCamelCase","camelcase","mapAllKeysToSnakeCase","clientMockOptionsRTTI","details","_details","_errorCode","_wrappedError","_metadata","SdkLoggerName","calculateNextDelay","retryCount","initialDelay","backoff","Math","pow","retry","_retry","maxDelay","maxAttempts","errorToReturn","_loop","_ret","delay","logger","functionToRetry","v","retryCondition","reject","setTimeout","delegateYield","_modules_ratelimiter_ratelimiter_rtti__WEBPACK_IMPORTED_MODULE_0__","TwilsockReplyError","isTwilsockReplyError","hasReply","hasStatus","reply","hasCode","status","Role","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0__","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0___default","defaultSessionOptions","cloneDeep","sendClientInitEvent","durationInMs","ClientInitialized","durationMs","_x5","_x6","_createClient","t0Ms","clientOptions","throwError","throwErrorFromErrorResponse","telemetrySessionData","client","now","mergeUserOptions","init","dependencies","Twilsock","setSessionData","_telemetry","_region","_appName","_appVersion","telemetry","_data","sessionToken","configProvider","sdkLoggerNameToLoglevel","twilsockLoglevel","loggers","defaultLevel","loglevelFactory","plugins","getSdkLoglevel","reduce","instance","plugin","defaultLoggerOptions","rateLimiters","cleanup","clear","rateLimiter","setup","ApiServiceBinder","TelemetryServiceImpl","ConfigurationServiceImpl","FederatedAuthServiceImpl","_twilsock","twilsockInjected","_post","url","body","post","_throwError","_throwErrorFromResponse","_mapStatusCodeToFlexSdkErrorCode","_handleErrorResponse","_performNetworkCallOnce","_getToken","envConfig","throwErrorFromResponse","statusCode","flexSdkErrorCode","authMethod","environmentSpecificUrl","getEnvironmentSpecificUrl","fetch","getRequestData","mapBody","ok","tokenInOptions","_performNetworkCall","performNetworkCall","headers","urlEnvSpecifier","region","startsWith","_this2","defaultRetryConditionOnFlexSdkError","_x7","_x8","_x9","_x10","_x11","FeaturesServiceImpl","httpAdapter","_fetchFeatures","ApiServiceBinder_classCallCheck","mergeWith","_srcValue","_object","_source","objectHasKey","objectHasGetterForKey","getPrototypeOf","storage","configData","cachedConfig","accountConfig","Config","fetchConfiguration","setCachedItem","AccountConfig","getCachedItem","RUNTIME_DOMAIN_REGEXP","getPublicConfigQueryParam","isAccountSidOption","paramName","paramValue","domain","sanitizedDomain","endsWith","parsedRuntimeDomain","sanitizeRuntimeDomain","runtimeDomain","_getPublicConfig","queryParam","responseData","fetchPublicConfiguration","PublicConfig","configurations","featuresService","featuresData","cachedFeatures","FeaturesConfig","_productId","_twilsockClientFactory","_environmentConfig","_clientOptions","_throwErrorFromErrorResponse","_proxyTwilsockClientEvent","_proxyEventsFromTwilsockClient","_proxyLogsFromTwilsockClient","_listenAndEmitConnectionError","_isConnectionError","_isTooManyRequestsError","_isServerError","_retryOnTooManyErrorOrConnectionErrorOrServerError","_updateTokenOnce","_waitUntilConnectedOrRejected","twilsockClientFactory","getRawTwilsockClient","StateChanged","twilsockLogger","flexError","twilsockClient","successHandler","connectionErrorHandler","removeConnectionListeners","_connect","clientMetadata","type","sdk","sdkv","version","app","appName","appv","appVersion","_error$body","_error$body2","_this3","connectionDestroyed","disconnect","target","propertyKey","descriptor","originalMethod","currentRoles","wrongRole","toString","root","definition","__WEBPACK_AMD_DEFINE_RESULT__","define","noop","isIE","navigator","userAgent","logMethods","bindMethod","obj","Function","e","traceForIE","log","realMethod","replaceLoggingMethods","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","factory","currentLevel","self","storageKey","getPersistedLevel","storedLevel","ignore","cookie","document","indexOf","encodeURIComponent","exec","slice","levels","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","TypeError","_log","noConflict","getLoggers","__WEBPACK_AMD_DEFINE_FACTORY__","_telemetryService","_isTelemetryDisabled","_rateLimiterFactory","_rateLimiterOptions","_sendTelemetryEvents","_getRateLimiter","telemetryService","rateLimiterFactory","rateLimiterOptions","payloadType","stats","_yield$_classPrivateF","_error$wrappedError","number_of_successful_events","number_of_failed_events","check","postTelemetryEvents","TelemetryProcessor","_processEvents","groupName","_len2","_key2","backendEvents","backendEventsBatch","arrayOfPromises","batchResults","_args2","toSdkBackendEvents","all","acc","batch","toBackendEvent","mappedSessionData","mappedEventData","client_timestamp","toISOString","event_group","payload_type","twilsockAdapter","_postTelemetryEvents","basePath","_updateConfiguration","_fetchPublicConfiguration","_fetchConfiguration","queryParamName","queryParamValue","String","accountConfigData","sSOLoginRequestBody","_metadata2","_metadata3","flexSdkError","createPureFactory","containerCreator","serviceIdentifier","provider","getAccountConfig","clearCache","packageVersion"],"mappings":"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","file":"index.js","sourcesContent":[" \t\n \tvar installedModules = {};\n\n \t\n \tfunction __webpack_require__(moduleId) {\n\n \t\t\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t\n \t\tmodule.l = true;\n\n \t\t\n \t\treturn module.exports;\n \t}\n\n\n \t\n \t__webpack_require__.m = modules;\n\n \t\n \t__webpack_require__.c = installedModules;\n\n \t\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t\n \t\n \t\n \t\n \t\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t\n \t__webpack_require__.p = \"\";\n\n\n \t\n \treturn __webpack_require__(__webpack_require__.s = 117);\n","module.exports = require(\"inversify\");","\n\n\n\nexport class InternalError extends Error {\n    constructor(message: string = \"Internal Error\") {\n        super(message);\n        Object.setPrototypeOf(this, InternalError.prototype);\n    }\n}\n","export function extractModuleFromPath(path: string): string {\n    const regex = \"/modules/[A-z]+\";\n    const match = path.match(regex);\n\n    const module = match ? match[0].replace(\"/modules/\", \"\") : \"\";\n    return module;\n}\n\nexport function extractFileNameFromPath(path: string): string {\n    const regex = \"([A-z])+([.]*[A-z]*)[.][jt]s\";\n    const match = path.match(regex);\n\n    const fileName = match ? match[0] : \"\";\n    return fileName;\n}\n","module.exports = require(\"core-js/modules/es.object.to-string.js\");","\n\n\nexport enum Severity {\n    Trace = \"trace\",\n    Debug = \"debug\",\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\"\n}\n\nexport class LogEntry {\n    constructor(loggerName: string, severity: Severity = Severity.Debug) {\n        this.loggerName = loggerName;\n        this.severity = severity;\n        this.timestamp = new Date();\n        this.context = {};\n    }\n\n    readonly loggerName: string;\n\n    readonly timestamp: Date;\n\n    readonly severity: Severity;\n\n    data: unknown[];\n\n    errorCode?: number;\n\n    readonly context?: {\n        sessionId?: string;\n        userSid?: string;\n        resourceSid?: string;\n        stack?: string;\n    };\n}\n","module.exports = require(\"core-js/modules/es.array.iterator.js\");","module.exports = require(\"core-js/modules/es.string.iterator.js\");","module.exports = require(\"core-js/modules/web.dom-collections.iterator.js\");","export type { AccountConfig, AccountConfigKeys } from \"./AccountConfig/AccountConfig\";\nexport type { AccountConfigProvider } from \"./AccountConfigProvider/AccountConfigProvider\";\nexport type { AccountConfigDataGetter } from \"./AccountConfigDataGetter/AccountConfigDataGetter\";\nexport type { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nexport type { IntegrationsConfig } from \"~/backend/generated/Configuration/model/integrationsConfig\";\nexport type { OutboundFlows } from \"~/backend/generated/Configuration/model/outboundFlows\";\nexport type { SkillDefinition } from \"~/backend/generated/Configuration/model/skillDefinition\";\nexport type { QueueStatsConfiguration } from \"~/backend/generated/Configuration/model/queueStatsConfiguration\";\nexport type { TaskQueue } from \"~/backend/generated/Configuration/model/taskQueue\";\nexport type { WorkerChannel } from \"~/backend/generated/Configuration/model/workerChannel\";\nexport type { DefaultQueueStatsConfiguration } from \"~/backend/generated/Configuration/model/defaultQueueStatsConfiguration\";\nexport type { QueueConfiguration } from \"~/backend/generated/Configuration/model/queueConfiguration\";\nexport type { QueueChannelConfiguration } from \"~/backend/generated/Configuration/model/queueChannelConfiguration\";\n\nexport type { EnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfig\";\nexport {\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI,\n    featuresProviderRTTI,\n    getAccountConfigRTTI\n} from \"./config.rtti\";\nexport type {\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption\n} from \"./PublicConfigProvider/PublicConfigProvider\";\n\nexport type { PublicConfig } from \"~/backend/generated/Configuration/model/publicConfig\";\nexport type { PublicConfigAttributes } from \"~/backend/generated/Configuration/model/publicConfigAttributes\";\n\nexport type { FeaturesProvider, FeaturesConfig, FeaturesList } from \"./FeaturesProvider/FeaturesProvider\";\n","module.exports = require(\"core-js/modules/es.symbol.js\");","module.exports = require(\"core-js/modules/es.promise.js\");","export { twilsockRTTI } from \"./websocket.rtti\";\nexport type { Twilsock, TwilsockResult, Headers } from \"./Twilsock/Twilsock\";\nexport { TwilsockEvent } from \"./Twilsock/TwilsockEvent\";\n","export const telemetryClientRTTI = Symbol.for(\"TelemetryClient\");\nexport const telemetryClientFactoryRTTI = Symbol.for(\"TelemetryClientFactory\");\nexport const telemetryEventGroupRTTI = Symbol.for(\"TelemetryEventGroup\");\nexport const telemetryEventGroupFactoryRTTI = Symbol.for(\"TelemetryEventGroupFactory\");\nexport const telemetryProcessorRTTI = Symbol.for(\"TelemetryProcessor\");\nexport const telemetryOptionsRTTI = Symbol.for(\"TelemetryOptions\");\nexport const telemetryRateLimiterOptionsRTTI = Symbol.for(\"TelemetryRateLimiterOptions\");\n","module.exports = require(\"core-js/modules/es.weak-map.js\");","module.exports = require(\"core-js/modules/es.symbol.description.js\");","export const twilsockAdapterRTTI = Symbol.for(\"TwilsockAdapter\");\nexport const httpAdapterRTTI = Symbol.for(\"HttpAdapter\");\nexport const telemetryServiceRTTI = \"TelemetryService\";\nexport const workspaceStatsServiceRTTI = \"WorkspaceStatsService\";\nexport const configurationServiceRTTI = \"ConfigurationService\";\nexport const featuresServiceRTTI = \"FeaturesService\";\nexport const federatedAuthServiceRTTI = \"FederatedAuthService\";\n","module.exports = require(\"regenerator-runtime/runtime.js\");","\n\n\nexport enum ClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    TokenUpdated = \"tokenUpdated\",\n    TokenAutoUpdateFailed = \"tokenAutoUpdateFailed\",\n    TokenMaxLifetimeReached = \"tokenMaxLifetimeReached\",\n    ConnectionLost = \"connectionLost\",\n    ConnectionRestored = \"connectionRestored\",\n    Disconnected = \"disconnected\"\n}\n","export enum SessionEvent {\n    TokenMaxLifetimeReached = \"tokenMaxLifetimeReached\",\n    TokenAutoUpdateFailed = \"tokenAutoUpdateFailed\"\n}\n","export enum TelemetrySdkEventGroup {\n    Default = \"default\",\n    Error = \"error\",\n    RateLimiter = \"rate_limiter\"\n}\n","export enum TelemetrySdkEventName {\n    ClientInitialized = \"client_initialized\",\n    ClientDestroyed = \"client_destroyed\",\n    RateLimiterTriggered = \"rate_limiter_triggered\",\n    RateLimiterDisabledFeature = \"rate_limiter_disabled_feature\"\n}\n","export enum TelemetrySdkEventSource {\n    Client = \"Client\",\n    RateLimiter = \"RateLimiter\"\n}\n","\n\n\nexport enum SDKDependency {\n    TwilioClient = \"twilio_client\",\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport interface TelemetrySDKSessionData {\n    \n\n\n    dependencies?: { [key in SDKDependency]?: string };\n}\n","export const loggerFactoryRTTI = Symbol.for(\"loggerFactory\");\nexport const newableLoggerRTTI = Symbol.for(\"NewableLogger\");\nexport const loglevelFactoryRTTI = Symbol.for(\"loglevelFactory\");\nexport const defaultPluginsRTTI = Symbol.for(\"loggerDefaultPlugins\");\nexport const loggerOptionsRTTI = Symbol.for(\"LoggerOptions\");\nexport const loggerInstancesRTTI = Symbol.for(\"LoggerInstances\");\n","export const authenticatorRTTI = Symbol.for(\"Authenticator\");\nexport const authenticatorDataContainerRTTI = Symbol.for(\"AuthenticatorDataContainer\");\nexport const authenticatorFactoryRTTI = Symbol.for(\"AuthenticatorFactory\");\nexport const twilioIdpUrlRTTI = Symbol.for(\"TwilioIdpUrl\");\nexport const twilioIdpUrlMockOptionsRTTI = Symbol.for(\"twilioIdpUrlMockOptions\");\nexport const authenticatorMockOptionsRTTI = Symbol.for(\"authenticatorMockOptions\");\n","import { Emitter } from \"~/modules/events/EventPublisher/Emitter\";\n\n\n\n\nexport interface EventPublisher<E extends string | symbol, F = (...args: unknown[]) => void> {\n    addListener(eventName: E, listener: F): this;\n    removeListener(eventName: E, listener: F): this;\n}\n\nexport function proxyEvent<T extends string | symbol, U extends string | symbol>(\n    from: EventPublisher<T>,\n    to: Emitter,\n    event: T,\n    alias: U\n) {\n    from.addListener(event, (...args: unknown[]) => {\n        to.emit(alias, ...args);\n    });\n}\n","\n\n\n\nexport enum ErrorCode {\n    \n\n\n    PermissionDeniedError = 20003,\n    \n\n\n    InvalidAccessToken = 20101,\n    \n\n\n    AccessTokenExpired = 20104,\n    \n\n\n    TooManyRequests = 20429,\n    \n\n\n    AuthorizationError = 45003,\n    \n\n\n    ValidationError = 45004,\n    \n\n\n    ConnectionError = 45011,\n    \n\n\n    SDK = 45500,\n    \n\n\n    Unknown = 45501,\n    \n\n\n    Forbidden = 45502,\n    \n\n\n    InvalidParams = 45503,\n    \n\n\n    NotFound = 45504,\n    \n\n\n    InvalidState = 45505,\n    \n\n\n    TooManySDKRequests = 45506,\n    \n\n\n    TemporarilyDisabled = 45507,\n    \n\n\n    NetworkError = 45508,\n    \n\n\n    TwilsockConnectionError = 45511,\n    \n\n\n    BadRequest = 70002,\n    \n\n\n    InvalidCertificate = 70251\n}\n\nexport type PublicErrorInfoMap = { [TKey in ErrorCode]: string };\n\nexport const publicErrorDetails: PublicErrorInfoMap = {\n    [ErrorCode.PermissionDeniedError]:\n        \"PermissionDeniedError: You lack permission to the resource and method you requested\",\n    [ErrorCode.InvalidAccessToken]: \"Invalid Access Token\",\n    [ErrorCode.AccessTokenExpired]: \"Access Token expired or expiration date invalid\",\n    [ErrorCode.TooManyRequests]: \"TooManyRequests: Twilsock rate limit exceeded\",\n    [ErrorCode.AuthorizationError]: \"Attempt to access resource where access is not allowed for given credentials\",\n    [ErrorCode.ValidationError]: \"Validation error: request body validation fails\",\n    [ErrorCode.ConnectionError]: \"Connection error\",\n    [ErrorCode.SDK]: \"Something went wrong, error from inner SDK\",\n    [ErrorCode.Unknown]: \"Unknown error\",\n    [ErrorCode.Forbidden]: \"User is not authorized to perform the requested operation\",\n    [ErrorCode.InvalidParams]: \"Invalid parameters\",\n    [ErrorCode.NotFound]: \"Resource not found\",\n    [ErrorCode.InvalidState]: \"Invalid state\",\n    [ErrorCode.TooManySDKRequests]: \"Too many requests on the Flex SDK API\",\n    [ErrorCode.TemporarilyDisabled]: \"The feature has been temporarily disabled\",\n    [ErrorCode.NetworkError]: \"NetworkError: Not able to reach the server\",\n    [ErrorCode.TwilsockConnectionError]: \"Twilsock connection error\",\n    [ErrorCode.BadRequest]: \"BadRequest: The data in the request is unparsable\",\n    [ErrorCode.InvalidCertificate]: \"Validation error: invalid certificate\"\n};\n\n\nexport const debuggerErrorCodes: Array<ErrorCode> = [\n    ErrorCode.PermissionDeniedError,\n    ErrorCode.InvalidAccessToken,\n    ErrorCode.AccessTokenExpired,\n    ErrorCode.TooManyRequests,\n    ErrorCode.AuthorizationError,\n    ErrorCode.ValidationError,\n    ErrorCode.BadRequest,\n    ErrorCode.InvalidCertificate\n];\n","export const environmentConfigRTTI = Symbol.for(\"EnvironmentConfig\");\nexport const accountConfigRTTI = Symbol.for(\"AccountConfig\");\nexport const accountConfigDataRTTI = Symbol.for(\"AccountConfigData\");\nexport const configDataContainerRTTI = Symbol.for(\"ConfigDataContainer\");\nexport const accountConfigProviderRTTI = Symbol.for(\"AccountConfigProvider\");\nexport const accountConfigUpdaterRTTI = Symbol.for(\"AccountConfigUpdater\");\nexport const publicConfigProviderRTTI = Symbol.for(\"PublicConfigProvider\");\nexport const publicConfigMockOptionsRTTI = Symbol.for(\"PublicConfigMockOptions\");\nexport const featuresProviderRTTI = Symbol.for(\"FeaturesProvider\");\nexport const getAccountConfigRTTI = Symbol.for(\"getAccountConfig\");\n","import { ErrorCode, ErrorSeverity, FlexSdkError } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nfunction hasCycles(object: object): boolean {\n    try {\n        JSON.stringify(object);\n    } catch (err) {\n        const hasCycle = /^TypeError: Converting circular structure to JSON/.test(err);\n        return hasCycle;\n    }\n\n    return false;\n}\n\nexport function assertArray<T>(value: Array<T>, name: string): asserts value is Array<T> {\n    if (!Array.isArray(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an array`);\n    }\n}\n\nexport function assertBoolean(value: boolean, name: string): asserts value is boolean {\n    if (typeof value !== \"boolean\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a boolean`);\n    }\n}\n\nexport function assertDefined<T>(value: T, name: string): asserts value is T {\n    if (typeof value === \"undefined\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a defined value`);\n    }\n}\n\nexport function assertNumber(value: number, name: string): asserts value is number {\n    if (typeof value !== \"number\" || Number.isNaN(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a number`);\n    }\n}\n\nexport function assertObject<T>(value: T, name: string): asserts value is T {\n    if (typeof value !== \"object\" || value === null || Array.isArray(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an object`);\n    }\n}\n\nexport function assertNotCircularObject<T extends object>(value: T, name: string): asserts value is T {\n    assertObject(value, name);\n    if (hasCycles(value)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected an object without cycles`);\n    }\n}\n\nexport function assertString(value: string, name: string): asserts value is string {\n    if (typeof value !== \"string\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a string`);\n    }\n}\n\nexport function assertNotEmptyString(value: string, name: string): asserts value is string {\n    assertString(value, name);\n    if (value.trim() === \"\") {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${name}, expected a string which is not empty`);\n    }\n}\n\nexport function assertKeyInObject<T>(key: string, object: T): void {\n    if (!(key in object)) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${key} is not a valid key`);\n    }\n}\n","module.exports = require(\"core-js/modules/web.dom-collections.for-each.js\");","export const rateLimiterRTTI = Symbol.for(\"RateLimiter\");\nexport const rateLimiterMapRTTI = Symbol.for(\"Map<RateLimiter>\");\nexport const rateLimiterFactoryRTTI = Symbol.for(\"Factory<RateLimiter>\");\nexport const cleanupRateLimitersRTTI = Symbol.for(\"cleanupRateLimiters()\");\n","export const newableTwilsockClientRTTI = Symbol.for(\"NewableTwilsockClient\");\nexport const productIdRTTI = Symbol.for(\"ProductID\");\nexport const twilsockRTTI = Symbol.for(\"Twilsock\");\nexport const twilsockClientFactoryRTTI = Symbol.for(\"TwilsockClientFactory\");\n","module.exports = require(\"core-js/modules/es.array.concat.js\");","\n\n\n\nexport enum InternalErrorCode {\n    \n\n\n    SyncConnectionError = 45510,\n    \n\n\n    SyncAccessForbiddenError = 54007,\n    \n\n\n    SyncMapNotFoundError = 54200,\n    \n\n\n    SyncMapItemNotFoundError = 54201,\n    \n\n\n    SyncInvalidMapItemDataError = 54206,\n    \n\n\n    SyncInvalidMapItemKeyError = 54209,\n    \n\n\n    SyncNameNotFoundError = 54300,\n    \n\n\n    SyncNameAlreadyExistsError = 54301,\n    \n\n\n    SyncInvalidNameError = 54302\n}\n\nexport type InternalErrorInfoMap = { [TKey in InternalErrorCode]: string };\n\nexport const internalErrorDetails: InternalErrorInfoMap = {\n    [InternalErrorCode.SyncConnectionError]: \"Sync connection error\",\n    [InternalErrorCode.SyncAccessForbiddenError]: \"Sync access forbidden for identity\",\n    [InternalErrorCode.SyncMapNotFoundError]: \"Sync map not found\",\n    [InternalErrorCode.SyncInvalidMapItemDataError]: \"Invalid sync map item data\",\n    [InternalErrorCode.SyncInvalidMapItemKeyError]: \"Invalid sync map item key\",\n    [InternalErrorCode.SyncMapItemNotFoundError]: \"Sync map item not found\",\n    [InternalErrorCode.SyncNameNotFoundError]: \"Sync unique name not found\",\n    [InternalErrorCode.SyncNameAlreadyExistsError]: \"Sync unique name already exists\",\n    [InternalErrorCode.SyncInvalidNameError]: \"Sync invalid unique name\"\n};\n","module.exports = require(\"core-js/modules/es.object.keys.js\");","import { interfaces } from \"inversify\";\nimport { telemetryClientRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient } from \"~/modules/telemetry/TelemetryClient/TelemetryClient\";\n\nexport function createTelemetryClient<U extends object>(\n    container: interfaces.Container,\n    name: string\n): TelemetryClient<U> {\n    const telemetryClient = container.get<TelemetryClient<U>>(telemetryClientRTTI);\n    telemetryClient.name = name;\n    return telemetryClient;\n}\n","export { localStorageRTTI } from \"./storage.rtti\";\nexport { LocalStorageKeys } from \"./LocalStorage/LocalStorageKeys\";\nexport type { LocalStorage } from \"./LocalStorage/LocalStorage\";\nexport type { ClearCache } from \"./ClearCache/ClearCache\";\n","export type { Authenticator, IdpConfig, TokenData, TokenRefreshResult } from \"./Authenticator/Authenticator\";\nexport type { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nexport { authenticatorRTTI, authenticatorFactoryRTTI, twilioIdpUrlRTTI } from \"./auth.rtti\";\nexport type { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nexport { Role } from \"~/backend/generated/FederatedAuth/model/role\";\n","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptor.js\");","module.exports = require(\"core-js/modules/es.symbol.iterator.js\");","import { TwilsockClient as TwilsockSdkClient } from \"twilsock\";\nimport { Result } from \"twilsock/lib/client\";\n\nexport { TwilsockSdkClient };\n\nexport type TwilsockOptions = {\n    region?: string;\n    clientMetadata: {\n        type: string;\n        sdk: string;\n        sdkv: string;\n        app?: string;\n        appv?: string;\n    };\n};\n\nexport enum TwilsockClientEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\"\n}\n\nexport interface NewableTwilsockClient {\n    new (token: string, productId: string, options?: TwilsockOptions): TwilsockClient;\n}\n\nexport interface TwilsockClient {\n    isConnected: boolean;\n\n    connect(): void;\n\n    disconnect(): Promise<void>;\n\n    updateToken(token: string): Promise<void>;\n\n    post(url: string, headers: unknown, body: unknown, grant?: string): Promise<Result>;\n\n    on(event: TwilsockClientEvent, listener: (...args: unknown[]) => void): TwilsockClient;\n\n    removeListener(eventName: TwilsockClientEvent, listener: (...args: unknown[]) => void): TwilsockClient;\n\n    emit(event: string, ...args: unknown[]): boolean;\n}\n","module.exports = require(\"core-js/modules/es.function.name.js\");","export const reThrowErrorWithCustomMessageRTTI = Symbol.for(\"reThrowErrorWithCustomMessage\");\nexport const throwErrorRTTI = Symbol.for(\"throwError\");\nexport const throwErrorFromErrorResponseRTTI = Symbol.for(\"throwErrorFromErrorResponse\");\nexport const throwErrorFromResponseRTTI = Symbol.for(\"throwErrorFromResponse\");\n","import { ErrorCode, publicErrorDetails, debuggerErrorCodes } from \"./ErrorCodes\";\nimport { InternalErrorCode, internalErrorDetails } from \"./InternalErrorCodes\";\n\nconst internalToPublicErrorMap: Map<InternalErrorCode, ErrorCode> = new Map([\n    [InternalErrorCode.SyncConnectionError, ErrorCode.ConnectionError],\n    [InternalErrorCode.SyncAccessForbiddenError, ErrorCode.Forbidden],\n    [InternalErrorCode.SyncMapNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncMapItemNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncInvalidMapItemDataError, ErrorCode.InvalidParams],\n    [InternalErrorCode.SyncInvalidMapItemKeyError, ErrorCode.InvalidParams],\n    [InternalErrorCode.SyncNameNotFoundError, ErrorCode.NotFound],\n    [InternalErrorCode.SyncNameAlreadyExistsError, ErrorCode.InvalidState],\n    [InternalErrorCode.SyncInvalidNameError, ErrorCode.InvalidParams]\n]);\n\nfunction isPublicErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    const publicError = Object.values(ErrorCode).find((code: number) => code === errorCode);\n    return !!publicError;\n}\n\nexport function isInternalErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    const internalError = Object.values(InternalErrorCode).find((code: number) => code === errorCode);\n    return !!internalError;\n}\n\nexport function isKnownErrorCode(errorCode: ErrorCode | InternalErrorCode): boolean {\n    return isPublicErrorCode(errorCode) || isInternalErrorCode(errorCode);\n}\n\nexport function isDebuggerErrorCode(errorCode: ErrorCode): boolean {\n    return debuggerErrorCodes.includes(errorCode);\n}\n\nfunction getPublicErrorCodeMessage(errorCode: ErrorCode | InternalErrorCode): string | undefined {\n    return publicErrorDetails[errorCode as ErrorCode];\n}\n\nfunction getInternalErrorCodeMessage(errorCode: ErrorCode | InternalErrorCode): string | undefined {\n    return internalErrorDetails[errorCode as InternalErrorCode];\n}\n\nexport function getMessage(errorCode: ErrorCode | InternalErrorCode): string {\n    return getPublicErrorCodeMessage(errorCode) || getInternalErrorCodeMessage(errorCode) || \"Error\";\n}\n\nexport function getPublicErrorCode(internalErrorCode: InternalErrorCode): ErrorCode {\n    const publicErrorCode = internalToPublicErrorMap.get(internalErrorCode);\n    return publicErrorCode || ErrorCode.Unknown;\n}\n","import { hasKey } from \"./typeGuards\";\n\nexport function convertDateStringValuesToDate<T extends object>(response: object): T {\n    const dateRegex = /^\\d{4}-\\d{1,2}-\\d{1,2}/;\n    const dateKeyRegex = new RegExp(\"date|expiration\", \"i\");\n    const processedResponse: Record<string, unknown | Date> = {};\n    Object.entries(response).forEach(([key, value]) => {\n        if (hasKey(response, key) && dateKeyRegex.test(key) && dateRegex.test(value)) {\n            processedResponse[key] = new Date(value);\n        } else {\n            processedResponse[key] = value;\n        }\n    });\n    return processedResponse as T;\n}\n","export function hasKey(value: object, key: string): value is { [key: string]: unknown } {\n    return Object.prototype.hasOwnProperty.call(value, key);\n}\n","export const localStorageRTTI = Symbol.for(\"localStorage\");\nexport const clearCacheRTTI = Symbol.for(\"clearCache\");\n","module.exports = require(\"core-js/modules/es.array.filter.js\");","module.exports = require(\"core-js/modules/es.object.get-own-property-descriptors.js\");","import { ErrorCode, FlexSdkError } from \"~/modules/error\";\n\nexport enum AuthenticationMethod {\n    HostedFlex = \"hosted-flex\",\n    Basic = \"basic\"\n}\n\nexport const makeAuthenticationHeaders = (method: AuthenticationMethod, token: string) => {\n    if (method === AuthenticationMethod.Basic) {\n        return new Headers({\n            Authorization: `Basic ${btoa(`token:${token}`)})`,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n\n    if (method === AuthenticationMethod.HostedFlex) {\n        return new Headers({\n            \"x-flex-jwe\": token,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n\n    throw new FlexSdkError(ErrorCode.InvalidParams);\n};\n","import { SSOLoginRequestBody } from \"~/backend/generated/FederatedAuth/model/sSOLoginRequestBody\";\nimport { IdpConfig } from \"~/modules/auth\";\n\n\n\n\n\n\nfunction sanitizeSSOParams(s: string): string {\n    return s.replace(/((Token|Expiration|Identity|Roles)=[^&]+[&]?)/g, \"\").replace(/[&?]$/, \"\");\n}\n\nexport function getSSOLoginRequestBody(config: IdpConfig): SSOLoginRequestBody {\n    return {\n        products: [\"flex\"],\n        resource: sanitizeSSOParams(config.redirectUrl)\n    };\n}\n","import { injectable, inject } from \"inversify\";\nimport { IdpConfig, Authenticator } from \"~/modules/auth\";\nimport { InternalError } from \"~/modules/error\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport * as FederatedAuthHelper from \"./FederatedAuthHelper\";\nimport { federatedAuthServiceRTTI } from \"~/backend/backend.rtti\";\nimport { FederatedAuthService } from \"~/backend/generated/FederatedAuth/api/federatedAuth.serviceInterface\";\nimport { TokenData, TokenRefreshResult } from \"~/modules/auth/Authenticator/Authenticator\";\n\n@injectable()\nexport class FederatedAuth implements Authenticator {\n    readonly #authenticatorDataContainer: AuthenticatorDataContainer;\n\n    readonly #logger: Logger;\n\n    readonly #federatedAuthService: FederatedAuthService;\n\n    constructor(\n        @inject(authenticatorDataContainerRTTI) authenticatorDataContainer: AuthenticatorDataContainer,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(federatedAuthServiceRTTI) federatedAuthService: FederatedAuthService\n    ) {\n        this.#authenticatorDataContainer = authenticatorDataContainer;\n        this.#logger = getLogger(LoggerName.Auth);\n        this.#federatedAuthService = federatedAuthService;\n    }\n\n    public async getIdpUrl(config: IdpConfig): Promise<string> {\n        assertNotEmptyString(config.redirectUrl, \"redirect url\");\n\n        const payload = FederatedAuthHelper.getSSOLoginRequestBody(config);\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n\n        const data = await this.#federatedAuthService.getIdpUrl(accountSid, payload);\n        if (!data.location) {\n            this.#logger.error(\"No redirect location from /authenticate request, data: \", data);\n            throw new InternalError(\"Invalid response from /authenticate endpoint\");\n        }\n        return data.location;\n    }\n\n    async validateToken(token: string): Promise<TokenData> {\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n        const tokenData = await this.#federatedAuthService.validateToken(accountSid, { token }, { token });\n        return {\n            roles: tokenData.roles,\n            valid: tokenData.valid,\n            dateExpired: tokenData.expiration,\n            identity: tokenData.identity\n        };\n    }\n\n    async refreshToken(token: string): Promise<TokenRefreshResult> {\n        const accountSid = this.#authenticatorDataContainer.accountSid;\n        const tokenRefreshResult = await this.#federatedAuthService.refreshToken(accountSid, {\n            token\n        });\n        return { token: tokenRefreshResult.token, dateExpired: tokenRefreshResult.expiration };\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer\";\n\n@injectable()\nexport class AuthenticatorDataContainerImpl implements AuthenticatorDataContainer {\n    #accountSid: string;\n\n    get accountSid(): string {\n        return this.#accountSid;\n    }\n\n    set accountSid(accountSid: string) {\n        this.#accountSid = accountSid;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    authenticatorRTTI,\n    authenticatorFactoryRTTI,\n    twilioIdpUrlRTTI,\n    authenticatorDataContainerRTTI\n} from \"./auth.rtti\";\nimport { Authenticator } from \"./Authenticator/Authenticator\";\nimport { FederatedAuth } from \"./Authenticator/FederatedAuth/FederatedAuth\";\nimport { AuthenticatorFactory } from \"./AuthenticatorFactory/AuthenticatorFactory\";\nimport { createAuthenticator } from \"./AuthenticatorFactory/createAuthenticator/createAuthenticator\";\nimport { TwilioIdpUrlFunction } from \"./TwilioIdpUrlFunction/TwilioIdpUrl\";\nimport { getTwilioIdpUrl } from \"./TwilioIdpUrlFunction/getTwilioIdpUrl\";\nimport { AuthenticatorDataContainer } from \"./AuthenticatorDataContainer/AuthenticatorDataContainer\";\nimport { AuthenticatorDataContainerImpl } from \"./AuthenticatorDataContainer/AuthenticatorDataContainerImpl\";\n\nexport const authModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Authenticator>(authenticatorRTTI).to(FederatedAuth);\n    bind<AuthenticatorDataContainer>(authenticatorDataContainerRTTI)\n        .to(AuthenticatorDataContainerImpl)\n        .inSingletonScope();\n    bind<AuthenticatorFactory>(authenticatorFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (accountSid: string) => {\n            return createAuthenticator(context.container, accountSid);\n        };\n    });\n    bind<TwilioIdpUrlFunction>(twilioIdpUrlRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (port?: string) => {\n            return getTwilioIdpUrl(context.container, port);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { Authenticator, authenticatorRTTI } from \"~/modules/auth\";\nimport { authenticatorDataContainerRTTI } from \"~/modules/auth/auth.rtti\";\nimport { AuthenticatorDataContainer } from \"~/modules/auth/AuthenticatorDataContainer/AuthenticatorDataContainer\";\n\nexport function createAuthenticator(container: interfaces.Container, accountSid: string): Authenticator {\n    const authenticatorDataContainer = container.get<AuthenticatorDataContainer>(authenticatorDataContainerRTTI);\n    authenticatorDataContainer.accountSid = accountSid;\n\n    const auth = container.get<Authenticator>(authenticatorRTTI);\n    return auth;\n}\n","import { interfaces } from \"inversify\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\n\nexport function getTwilioIdpUrl(container: interfaces.Container, port?: string): string {\n    const envConfig = container.get<EnvironmentConfig>(environmentConfigRTTI);\n\n    const twilioServiceLoginUrl = envConfig.twilioServiceLoginUrl;\n    return port ? `${twilioServiceLoginUrl}?localPort=${port}` : twilioServiceLoginUrl;\n}\n","import { injectable, inject } from \"inversify\";\nimport { Role, AuthenticatorFactory, authenticatorFactoryRTTI } from \"~/modules/auth\";\nimport { AccountConfigProvider, accountConfigProviderRTTI, AccountConfig } from \"~/modules/config\";\nimport { sessionOptionsRTTI, Session, SessionOptions, SessionEvent } from \"~/modules/session\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { InternalError } from \"~/modules/error\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { Emitter, eventEmitterRTTI } from \"~/modules/events\";\n\n@injectable()\nexport class SessionImpl implements Session {\n    #accountConfig: AccountConfig;\n\n    readonly #authFactory: AuthenticatorFactory;\n\n    #token: string;\n\n    #tokenExpiration: Date;\n\n    readonly #connection: Twilsock;\n\n    readonly #options: SessionOptions;\n\n    readonly #accountConfigProvider: AccountConfigProvider;\n\n    #roles: Array<Role> = [];\n\n    #identity: string;\n\n    #isActive: boolean = true;\n\n    readonly #logger: Logger;\n\n    #needsToAutoUpdateToken: boolean;\n\n    readonly #emitter: Emitter;\n\n    constructor(\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(sessionOptionsRTTI) options: SessionOptions,\n        @inject(authenticatorFactoryRTTI) authFactory: AuthenticatorFactory,\n        @inject(accountConfigProviderRTTI) accountConfigProvider: AccountConfigProvider,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(eventEmitterRTTI) emitter: Emitter\n    ) {\n        this.#connection = connection;\n        this.#options = options;\n        this.#accountConfigProvider = accountConfigProvider;\n        this.#authFactory = authFactory;\n        this.#logger = getLogger(LoggerName.Session);\n        this.#logger.debug(\"Session constructed\");\n        this.#emitter = emitter;\n    }\n\n    async init(token: string): Promise<void> {\n        this.#logger.debug(\"will initialize session with token: \", token);\n        this.#logger.debug(\"will update token: \", this.#options.autoUpdateToken);\n\n        this.#token = token;\n        await this.#connection.connect(token);\n        if (this.#options.autoUpdateToken) {\n            this.#connection.addListener(TwilsockEvent.TokenAboutToExpire, this.#handleTokenAboutToExpire);\n        }\n\n        \n        this.#accountConfig = await this.#accountConfigProvider(token);\n\n        const accountSid = this.#accountConfig.get().accountSid;\n\n        const auth = this.#authFactory(accountSid);\n        const tokenData = await auth.validateToken(this.#token);\n        this.#roles = tokenData.roles;\n        this.#tokenExpiration = tokenData.dateExpired;\n        this.#identity = tokenData.identity;\n\n        if (this.#needsToAutoUpdateToken) {\n            await this.#autoUpdateToken();\n        }\n\n        return Promise.resolve();\n    }\n\n    async updateToken(token: string): Promise<void> {\n        await this.#connection.updateToken(token);\n        this.#token = token;\n        this.#logger.debug(\"new token set\");\n    }\n\n    readonly #handleTokenAboutToExpire = async () => {\n        if (this.#accountConfig) {\n            await this.#autoUpdateToken();\n        } else {\n            this.#needsToAutoUpdateToken = true;\n        }\n    };\n\n    #autoUpdateToken = async () => {\n        this.#logger.debug(\"Auto-updating token\");\n\n        const accountSid = this.#accountConfig.get().accountSid;\n        if (!accountSid) {\n            throw new InternalError(\"Account sid not set\");\n        }\n\n        let newToken: string | undefined;\n        let newTokenDateExpired: Date | undefined;\n        const auth = this.#authFactory(accountSid);\n        try {\n            const tokenRefreshResult = await auth.refreshToken(this.token);\n            newTokenDateExpired = tokenRefreshResult.dateExpired;\n            if (newTokenDateExpired.getTime() === this.#tokenExpiration.getTime()) {\n                this.#logger.warn(\"Token expiration not extended, because max lifetime reached\");\n                this.#emitter.emit(SessionEvent.TokenMaxLifetimeReached, tokenRefreshResult.dateExpired);\n            }\n\n            newToken = tokenRefreshResult.token;\n        } catch (e) {\n            this.#logger.error(\"Failed to refresh token\", e);\n            this.#emitter.emit(SessionEvent.TokenAutoUpdateFailed);\n        }\n\n        if (!this.#isActive) {\n            this.#logger.trace(\"AutoUpdateToken, session destroyed after refreshToken\");\n            return;\n        }\n\n        if (newToken && newTokenDateExpired) {\n            try {\n                await this.updateToken(newToken);\n                this.#tokenExpiration = newTokenDateExpired;\n                this.#logger.info(\"Token auto-updated\");\n            } catch (e) {\n                this.#logger.error(\"Failed to auto-update token\", e);\n                this.#emitter.emit(SessionEvent.TokenAutoUpdateFailed);\n            }\n        }\n    };\n\n    async destroy(): Promise<void> {\n        this.#isActive = false;\n        this.#connection.removeListener(TwilsockEvent.TokenAboutToExpire, this.#handleTokenAboutToExpire);\n        await this.#connection.destroy();\n    }\n\n    get token(): string {\n        return this.#token;\n    }\n\n    get roles(): Array<Role> {\n        return this.#roles;\n    }\n\n    addListener(eventName: SessionEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: SessionEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { sessionRTTI, sessionOptionsRTTI } from \"./session.rtti\";\nimport { Session, SessionOptions } from \"./Session/Session\";\nimport { SessionImpl } from \"./Session/SessionImpl\";\nimport { getDefaultSessionOptions } from \"./SessionOptions/defaultSessionOptions\";\n\nexport const sessionModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Session>(sessionRTTI).to(SessionImpl).inSingletonScope();\n    bind<SessionOptions>(sessionOptionsRTTI).toConstantValue(getDefaultSessionOptions());\n});\n","import { injectable, inject, postConstruct } from \"inversify\";\nimport { Client, ClientConfigType, ClientEvent } from \"~/modules/client\";\nimport { Role } from \"~/modules/auth\";\nimport { accountConfigRTTI, AccountConfig, FeaturesProvider, featuresProviderRTTI } from \"~/modules/config\";\nimport { Twilsock, twilsockRTTI, TwilsockEvent } from \"~/modules/websocket\";\nimport { Session, SessionEvent, sessionRTTI } from \"~/modules/session\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName } from \"~/modules/logger\";\nimport { TelemetryClient, TelemetryClientFactory, telemetryClientFactoryRTTI } from \"~/modules/telemetry\";\nimport {\n    telemetrySdkClientRTTI,\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkClient,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource\n} from \"~/modules/telemetrySdkClient\";\nimport { Emitter, eventEmitterRTTI, proxyEvent } from \"~/modules/events\";\nimport { cleanupRateLimitersRTTI } from \"~/modules/ratelimiter\";\n\n@injectable()\nexport class ClientImpl implements Client {\n    readonly #session: Session;\n\n    readonly #connection: Twilsock;\n\n    readonly #logger: Logger;\n\n    readonly #telemetryClientFactory: TelemetryClientFactory<any>; \n\n    public readonly config: ClientConfigType;\n\n    readonly #telemetrySdkClient: TelemetrySdkClient;\n\n    readonly #emitter: Emitter;\n\n    readonly #cleanupRateLimiters: Function;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(twilsockRTTI) connection: Twilsock,\n        @inject(accountConfigRTTI) account: AccountConfig,\n        @inject(telemetryClientFactoryRTTI) telemetryClientFactory: TelemetryClientFactory<any>, \n        @inject(telemetrySdkClientRTTI) telemetrySdkClient: TelemetrySdkClient,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(eventEmitterRTTI) emitter: Emitter,\n        @inject(cleanupRateLimitersRTTI) cleanupRateLimiters: Function,\n        @inject(featuresProviderRTTI) fetchFeatures: FeaturesProvider\n    ) {\n        this.#session = session;\n        this.#connection = connection;\n        this.config = {\n            account,\n            fetchFeatures\n        };\n        this.#telemetryClientFactory = telemetryClientFactory;\n        this.#telemetrySdkClient = telemetrySdkClient;\n        this.#logger = getLogger(LoggerName.Client);\n        this.#emitter = emitter;\n        this.#cleanupRateLimiters = cleanupRateLimiters;\n    }\n\n    @postConstruct()\n    setupProxies(): void {\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenAboutToExpire, ClientEvent.TokenAboutToExpire);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenExpired, ClientEvent.TokenExpired);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.TokenUpdated, ClientEvent.TokenUpdated);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.ConnectionError, ClientEvent.ConnectionLost);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.Connected, ClientEvent.ConnectionRestored);\n        proxyEvent(this.#connection, this.#emitter, TwilsockEvent.Disconnected, ClientEvent.Disconnected);\n        proxyEvent(this.#session, this.#emitter, SessionEvent.TokenAutoUpdateFailed, ClientEvent.TokenAutoUpdateFailed);\n        proxyEvent(\n            this.#session,\n            this.#emitter,\n            SessionEvent.TokenMaxLifetimeReached,\n            ClientEvent.TokenMaxLifetimeReached\n        );\n    }\n\n    async updateToken(token: string): Promise<void> {\n        await this.#session.updateToken(token);\n    }\n\n    #sendDestroyEvent = async (): Promise<void> => {\n        try {\n            const telemetrySdkClient = this.#telemetrySdkClient;\n            const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n            await group.addEvents({\n                eventName: TelemetrySdkEventName.ClientDestroyed,\n                eventSource: TelemetrySdkEventSource.Client\n            });\n        } catch (e) {\n            this.#logger.error(\"Failed to send telemetry destroy event\", e);\n        }\n    };\n\n    async destroy(): Promise<void> {\n        await this.#sendDestroyEvent();\n        this.#logger.debug(\"client log out\");\n        await this.#session.destroy();\n        this.#emitter.removeAllListeners();\n        this.#cleanupRateLimiters();\n    }\n\n    get roles(): Array<Role> {\n        return [...this.#session.roles];\n    }\n\n    get token(): string {\n        return this.#session.token;\n    }\n\n    createTelemetryClient<U extends object>(name: string): TelemetryClient<U> {\n        return this.#telemetryClientFactory(name);\n    }\n\n    addListener(eventName: ClientEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: ClientEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    Client,\n    ClientOptions,\n    ClientProvider,\n    clientRTTI,\n    clientProviderRTTI,\n    clientOptionsRTTI\n} from \"~/modules/client\";\nimport { ClientImpl } from \"./Client/ClientImpl/ClientImpl\";\nimport { createClient } from \"./ClientProvider/createClient\";\nimport { ClientOptionsStore } from \"./ClientOptions/ClientOptionsStore\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\n\nexport const clientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<ClientOptions>(clientOptionsRTTI).to(ClientOptionsStore).inSingletonScope();\n\n    bind<Client>(clientRTTI).to(ClientImpl).inSingletonScope();\n    bind<ClientProvider>(clientProviderRTTI).toProvider<Client>((context: interfaces.Context) => {\n        return (token: string, userOptions?: DeepPartial<ClientOptions>) => {\n            return createClient(context.container, token, userOptions);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { isDebuggerErrorCode } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { FlexSdkError } from \"~/modules/error/FlexSdkError/FlexSdkError\";\nimport { ErrorResponse } from \"~/modules/error/ThrowError/ErrorHelper\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { TelemetryErrorEvent, TelemetryEventGroup } from \"~/modules/telemetry\";\nimport { telemetrySdkErrorEventGroupRTTI } from \"~/modules/telemetrySdkClient\";\n\nexport async function reportError(container: interfaces.Container, error: FlexSdkError) {\n    try {\n        const errorEventGroup = container.get<TelemetryEventGroup<TelemetryErrorEvent>>(\n            telemetrySdkErrorEventGroupRTTI\n        );\n\n        const wrappedError = error.wrappedError as ErrorResponse;\n        const debuggerFlag = isDebuggerErrorCode(error.code);\n\n        await errorEventGroup.addErrorEvent({\n            eventName: \"error_reported\",\n            error: {\n                code: error.code,\n                debugger: debuggerFlag,\n                message: error.message,\n                module: error.metadata.module,\n                reporter: \"flex-sdk\",\n                resourceSid: error.metadata.resourceSid,\n                severity: error.metadata.severity,\n                source: error.metadata.source || \"flex-sdk\",\n                stackTrace: error.stack,\n                unhandled: error.metadata.unhandled,\n                wrappedErrorCode: wrappedError?.code,\n                wrappedErrorMessage: wrappedError?.message ?? undefined\n            }\n        });\n    } catch (e) {\n        const loggerFactory = container.get<LoggerFactory>(loggerFactoryRTTI);\n        const logger = loggerFactory(LoggerName.Error);\n        logger.debug(\"Failed to report the error\", e);\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { ErrorCode } from \"~/modules/error/ErrorCode/ErrorCodes\";\nimport { getPublicErrorCode, isInternalErrorCode, isKnownErrorCode } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { FlexSdkError } from \"~/modules/error/FlexSdkError/FlexSdkError\";\n\nimport { InternalErrorCode } from \"~/modules/error/ErrorCode//InternalErrorCodes\";\nimport { reportError } from \"./reportError\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\n\nexport interface ErrorResponse {\n    code?: number;\n    message?: string;\n}\n\n\n\nexport function throwFlexSdkError(\n    container: interfaces.Container,\n    errorCode: number,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string,\n    error?: Error\n): never {\n    \n    if (error instanceof FlexSdkError) {\n        throw error;\n    }\n\n    if (!errorCode || !isKnownErrorCode(errorCode)) {\n        console.warn(\"Unknown error code\"); \n    }\n\n    let publicErrorCode = errorCode;\n    if (isInternalErrorCode(errorCode)) {\n        publicErrorCode = getPublicErrorCode(errorCode as InternalErrorCode);\n    }\n\n    const errorToThrow = new FlexSdkError(publicErrorCode, metadata, message, error);\n    reportError(container, errorToThrow);\n\n    throw errorToThrow;\n}\n\nexport function reThrowFlexSdkErrorWithCustomMessage(error: FlexSdkError, customMessage: string): never {\n    throw new FlexSdkError(error.code, error.metadata, customMessage, error.wrappedError);\n}\n\nexport function throwFlexSdkErrorFromErrorResponse(\n    container: interfaces.Container,\n    errorResponse: ErrorResponse,\n    metadata?: FlexSdkErrorMetadata\n): never {\n    if (errorResponse instanceof FlexSdkError) {\n        throw errorResponse;\n    }\n    const errorCode = errorResponse.code ? errorResponse.code : ErrorCode.Unknown;\n    throwFlexSdkError(container, errorCode, metadata, errorResponse.message);\n}\n\nexport async function throwFlexSdkErrorFromResponse(\n    container: interfaces.Container,\n    response: Response,\n    metadata?: FlexSdkErrorMetadata,\n    message?: string\n): Promise<never> {\n    const errorResponse: ErrorResponse = await response.json();\n    errorResponse.message = message || errorResponse.message;\n    throwFlexSdkErrorFromErrorResponse(container, errorResponse, metadata);\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    throwErrorRTTI,\n    throwErrorFromErrorResponseRTTI,\n    throwErrorFromResponseRTTI,\n    reThrowErrorWithCustomMessageRTTI\n} from \"~/modules/error/error.rtti\";\nimport {\n    ThrowErrorFunction,\n    ThrowErrorFromErrorResponseFunction,\n    ThrowErrorFromResponseFunction,\n    ReThrowErrorWithCustomMessageFunction\n} from \"~/modules/error/ThrowError/ThrowErrorFunctions\";\nimport {\n    throwFlexSdkError,\n    throwFlexSdkErrorFromErrorResponse,\n    throwFlexSdkErrorFromResponse,\n    reThrowFlexSdkErrorWithCustomMessage,\n    ErrorResponse\n} from \"~/modules/error/ThrowError/ErrorHelper\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\n\nexport const errorModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<ThrowErrorFunction>(throwErrorRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return (errorCode: number, metadata?: FlexSdkErrorMetadata, message?: string, error?: Error) => {\n                return throwFlexSdkError(context.container, errorCode, metadata, message, error);\n            };\n        })\n        .inSingletonScope();\n    bind<ThrowErrorFromErrorResponseFunction>(throwErrorFromErrorResponseRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return (errorResponse: ErrorResponse, metadata?: FlexSdkErrorMetadata) => {\n                return throwFlexSdkErrorFromErrorResponse(context.container, errorResponse, metadata);\n            };\n        })\n        .inSingletonScope();\n    bind<ThrowErrorFromResponseFunction>(throwErrorFromResponseRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return (response: Response, metadata?: FlexSdkErrorMetadata, message?: string) => {\n                return throwFlexSdkErrorFromResponse(context.container, response, metadata, message);\n            };\n        })\n        .inSingletonScope();\n    bind<ReThrowErrorWithCustomMessageFunction>(reThrowErrorWithCustomMessageRTTI).toConstantValue(\n        reThrowFlexSdkErrorWithCustomMessage\n    );\n});\n","import { EventEmitter } from \"events\";\nimport { ContainerModule, interfaces } from \"inversify\";\nimport { eventEmitterRTTI } from \"./events.rtti\";\nimport { Emitter } from \"./EventPublisher/Emitter\";\n\nexport const eventsModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Emitter>(eventEmitterRTTI).toDynamicValue(() => new EventEmitter());\n});\n","import { EnvironmentConfig } from \"~/modules/config\";\n\nexport const getEnvironmentConfig = (): EnvironmentConfig => ({\n    twilioServiceLoginUrl: \"https://flex.twilio.com/admin\",\n    ...window.__TWILIO_FLEX_SDK__?.environmentConfig\n});\n","import { inject, injectable } from \"inversify\";\nimport { AccountConfig, AccountConfigData } from \"~/modules/config\";\nimport { accountConfigUpdaterRTTI, configDataContainerRTTI } from \"~/modules/config/config.rtti\";\nimport { assertKeyInObject } from \"~/utils/assert\";\nimport { AccountConfigUpdater } from \"~/modules/config/AccountConfig/AccountConfigUpdater\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\n\n@injectable()\nexport class AccountConfigStore implements AccountConfig {\n    readonly #dataContainer: ConfigDataContainer<AccountConfigData>;\n\n    readonly #accountConfigUpdater: AccountConfigUpdater;\n\n    #currentUpdateConfigPromise: Promise<AccountConfigData> | undefined;\n\n    constructor(\n        @inject(configDataContainerRTTI) dataContainer: ConfigDataContainer<AccountConfigData>,\n        @inject(accountConfigUpdaterRTTI) updater: AccountConfigUpdater\n    ) {\n        this.#dataContainer = dataContainer;\n        this.#accountConfigUpdater = updater;\n    }\n\n    get(): AccountConfigData {\n        return this.#dataContainer.get();\n    }\n\n    async set(config: Partial<AccountConfigData>): Promise<void> {\n        const data = this.#dataContainer.get();\n\n        \n        const { accountSid, ...dataWithoutAccountSid } = data; \n        Object.keys(config).map((key: string) => assertKeyInObject(key, dataWithoutAccountSid));\n\n        \n        const updateConfigCall = () => this.#accountConfigUpdater(accountSid, config);\n        const updatedConfigData = await this.updateInCallOrder(updateConfigCall);\n        this.#dataContainer.set(updatedConfigData);\n\n        return Promise.resolve();\n    }\n\n    updateInCallOrder(updateConfigCall: () => Promise<AccountConfigData>): Promise<AccountConfigData> {\n        if (this.#currentUpdateConfigPromise) {\n            \n            \n            this.#currentUpdateConfigPromise = this.#currentUpdateConfigPromise.then(() => {\n                return updateConfigCall();\n            });\n        } else {\n            this.#currentUpdateConfigPromise = updateConfigCall();\n        }\n\n        return this.#currentUpdateConfigPromise;\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { AccountConfigData } from \"~/modules/config\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\n\nexport const updateAccountConfig = async (\n    container: interfaces.Container,\n    accountSid: string,\n    config: Partial<AccountConfigData>\n): Promise<AccountConfigData> => {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const updatedConfiguration = await configurationService.updateConfiguration({ accountSid, ...config });\n    return updatedConfiguration;\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigData,\n    EnvironmentConfig,\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption,\n    PublicConfig,\n    AccountConfigDataGetter,\n    accountConfigRTTI,\n    accountConfigProviderRTTI,\n    environmentConfigRTTI,\n    publicConfigProviderRTTI,\n    configDataContainerRTTI,\n    featuresProviderRTTI,\n    getAccountConfigRTTI\n} from \"~/modules/config\";\nimport { accountConfigProvider } from \"./AccountConfigProvider/AccountConfigProvider\";\nimport { accountConfigUpdaterRTTI } from \"./config.rtti\";\nimport { getEnvironmentConfig } from \"./EnvironmentConfig/EnvironmentConfigImpl\";\nimport { AccountConfigStore } from \"./AccountConfig/AccountConfigImpl/AccountConfigStore/AccountConfigStore\";\nimport { getPublicConfig } from \"./PublicConfigProvider/getPublicConfig\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { updateAccountConfig } from \"./AccountConfig/AccountConfigImpl/AccountConfigUpdate/updateAccountConfig\";\nimport { ConfigDataContainer } from \"./AccountConfig/ConfigDataContainer\";\nimport { AccountConfigDataContainer } from \"./AccountConfig/AccountConfigImpl/AccountConfigDataContainer/AccountConfigDataContainer\";\nimport { AccountConfigUpdater } from \"./AccountConfig/AccountConfigUpdater\";\nimport { featuresProviderImpl } from \"./FeaturesProvider/featuresProviderImpl/featuresProviderImpl\";\nimport { FeaturesConfig, FeaturesProvider } from \"./FeaturesProvider/FeaturesProvider\";\nimport { getAccountConfigData } from \"./AccountConfigDataGetter/getAccountConfigData\";\n\nexport const configModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<AccountConfig>(accountConfigRTTI).to(AccountConfigStore).inSingletonScope();\n    bind<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI)\n        .to(AccountConfigDataContainer)\n        .inSingletonScope();\n    bind<AccountConfigProvider>(accountConfigProviderRTTI).toProvider<AccountConfig>((context: interfaces.Context) =>\n        accountConfigProvider(context.container)\n    );\n    bind<AccountConfigUpdater>(accountConfigUpdaterRTTI).toDynamicValue((context: interfaces.Context) => {\n        return (accountSid: string, config: Partial<AccountConfigData>) =>\n            updateAccountConfig(context.container, accountSid, config);\n    });\n    bind<EnvironmentConfig>(environmentConfigRTTI).toDynamicValue(getEnvironmentConfig);\n    bind<PublicConfigProvider>(publicConfigProviderRTTI).toProvider<PublicConfig>((context: interfaces.Context) => {\n        return (option: XOR<AccountSidOption, RuntimeDomainOption>) => getPublicConfig(context.container, option);\n    });\n    bind<FeaturesProvider>(featuresProviderRTTI).toProvider<FeaturesConfig>(featuresProviderImpl);\n    bind<AccountConfigDataGetter>(getAccountConfigRTTI).toDynamicValue((context: interfaces.Context) =>\n        getAccountConfigData(context.container)\n    );\n});\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { newableTwilsockClientRTTI, twilsockRTTI, productIdRTTI, twilsockClientFactoryRTTI } from \"./websocket.rtti\";\nimport {\n    NewableTwilsockClient,\n    TwilsockOptions,\n    TwilsockSdkClient,\n    TwilsockClient\n} from \"./TwilsockClient/TwilsockClient\";\nimport { Twilsock } from \"./Twilsock/Twilsock\";\nimport { TwilsockImpl } from \"./Twilsock/TwilsockImpl\";\nimport { TwilsockClientFactory } from \"~/modules/websocket/TwilsockClientFactory/TwilsockClientFactory\";\nimport { getTwilsockClient } from \"~/modules/websocket/TwilsockClientFactory/getTwilsockClient\";\n\nexport const websocketModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<NewableTwilsockClient>(newableTwilsockClientRTTI).toConstructor(TwilsockSdkClient);\n    bind<string>(productIdRTTI).toConstantValue(\"flex\");\n    bind<Twilsock>(twilsockRTTI).to(TwilsockImpl).inSingletonScope();\n    bind<TwilsockClientFactory>(twilsockClientFactoryRTTI).toFactory<TwilsockClient>((context: interfaces.Context) => {\n        return (token: string, productId: string, options?: TwilsockOptions): TwilsockClient => {\n            return getTwilsockClient(context.container, token, productId, options);\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport {\n    NewableTwilsockClient,\n    TwilsockOptions,\n    TwilsockClient\n} from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\nimport { newableTwilsockClientRTTI } from \"~/modules/websocket/websocket.rtti\";\n\nexport function getTwilsockClient(\n    container: interfaces.Container,\n    token: string,\n    productId: string,\n    options?: TwilsockOptions\n): TwilsockClient {\n    const TwilsockClientConstructor = container.get<NewableTwilsockClient>(newableTwilsockClientRTTI);\n    return new TwilsockClientConstructor(token, productId, options);\n}\n","export const rbacRTTI = Symbol.for(\"Rbac\");\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { requiredRole } from \"./RequiredRole/requiredRole\";\nimport { rbacRTTI } from \"./rbac.rtti\";\nimport { Rbac } from \"./Rbac\";\nimport { hasRole } from \"./HasRole/hasRole\";\n\nexport const rbacModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<Rbac>(rbacRTTI).toDynamicValue((context: interfaces.Context) => {\n        return {\n            requiredRole: requiredRole(context.container),\n            hasRole: hasRole(context.container)\n        };\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\n\nexport const hasRole =\n    (container: interfaces.Container) =>\n    (role: Role): boolean => {\n        const session = container.get<Session>(sessionRTTI);\n        const userRoles = session.roles;\n        return userRoles.includes(role);\n    };\n","import { injectable } from \"inversify\";\nimport { Logger, LoggerLevel, LoggerLevelNumbers, Loglevel, LogEntry } from \"~/modules/logger\";\n\n@injectable()\nexport class LoggerImpl implements Logger {\n    readonly #loglevel: Loglevel;\n\n    constructor(loglevel: Loglevel) {\n        this.#loglevel = loglevel;\n    }\n\n    trace = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.trace(...args);\n    };\n\n    debug = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.debug(...args);\n    };\n\n    \n\n\n    log = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.debug(...args);\n    };\n\n    info = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.info(...args);\n    };\n\n    warn = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.warn(...args);\n    };\n\n    error = (...args: unknown[] | LogEntry[]): void => {\n        this.#loglevel.error(...args);\n    };\n\n    setLevel = (level: LoggerLevel): void => {\n        this.#loglevel.setLevel(level);\n    };\n\n    getLevel = (): LoggerLevelNumbers => {\n        return this.#loglevel.getLevel();\n    };\n}\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nconst toTwoDigits = (number: Number) => {\n    if (number < 10) {\n        return `0${number}`;\n    }\n    return `${number}`;\n};\n\nconst formatDate = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = toTwoDigits(date.getMonth() + 1);\n    const day = toTwoDigits(date.getDate());\n    const hours = toTwoDigits(date.getHours());\n    const minutes = toTwoDigits(date.getMinutes());\n    const seconds = toTwoDigits(date.getSeconds());\n    const miliseconds = toTwoDigits(date.getMilliseconds());\n\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${miliseconds}`;\n};\n\nexport const formatEntry =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            const timestamp = formatDate(logEntry.timestamp);\n            const level = logEntry.severity.toUpperCase();\n            const messagePrefix = `[${timestamp}] Flex SDK → ${loggerName} (${level}): `;\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(messagePrefix, ...messages);\n        };\n    };\n","import { Loglevel } from \"~/modules/logger\";\nimport { createLogEntry } from \"./logentry/createLogEntry\";\nimport { setContext } from \"./logentry/setContext\";\nimport { setData } from \"./logentry/setData\";\nimport { formatEntry } from \"./logentry/formatEntry\";\n\nconst factories = [createLogEntry, setContext, setData, formatEntry].reverse();\n\nexport const logEntryPlugin = (loglevel: Loglevel): Loglevel => {\n    factories.forEach((f) => {\n        const originalFactory = loglevel.methodFactory;\n        \n        loglevel.methodFactory = f(originalFactory);\n    });\n\n    loglevel.setLevel(loglevel.getLevel());\n    return loglevel;\n};\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry, Severity } from \"~/modules/logger\";\n\nexport const createLogEntry =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (firstParam: LogEntry | unknown, ...messages: unknown[]): void => {\n            const isLogEntry = firstParam instanceof LogEntry;\n            if (!isLogEntry) {\n                messages.unshift(firstParam);\n            }\n\n            const logEntry = isLogEntry ? (firstParam as LogEntry) : new LogEntry(loggerName, methodName as Severity);\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setContext =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            \n            \n\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { LogLevelNumbers, MethodFactory } from \"loglevel\";\nimport { LogEntry } from \"~/modules/logger\";\n\nexport const setData =\n    (originalFactory: MethodFactory) => (methodName: string, logLevel: LogLevelNumbers, loggerName: string) => {\n        return (logEntry: LogEntry, ...messages: unknown[]): void => {\n            if (!logEntry.data) {\n                \n                logEntry.data = messages;\n            }\n\n            const method = originalFactory(methodName, logLevel, loggerName);\n            return method(logEntry, ...messages);\n        };\n    };\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { getLogger as getLoglevel } from \"loglevel\";\nimport { Logger, NewableLogger, LoggerOptions } from \"./Logger/Logger\";\nimport {\n    loggerFactoryRTTI,\n    newableLoggerRTTI,\n    loglevelFactoryRTTI,\n    defaultPluginsRTTI,\n    loggerOptionsRTTI,\n    loggerInstancesRTTI\n} from \"./logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory/LoggerFactory\";\nimport { getLogger } from \"./LoggerFactory/getLogger\";\nimport { getDefaultLoggerOptions } from \"./DefaultLoggerLevel/defaultLoggerLevel\";\nimport { LoggerImpl } from \"./Logger/LoggerImpl/LoggerImpl\";\nimport { logEntryPlugin } from \"./plugins/logEntryPlugin\";\n\nexport const loggerModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LoglevelFactory>(loglevelFactoryRTTI).toConstantValue(getLoglevel);\n    bind<interfaces.Factory<Logger>>(loggerFactoryRTTI).toFactory<Logger>((context: interfaces.Context) =>\n        getLogger(context.container)\n    );\n    bind<NewableLogger>(newableLoggerRTTI).toConstructor(LoggerImpl);\n    bind<LoggerPlugin[]>(defaultPluginsRTTI).toConstantValue([logEntryPlugin]);\n    bind<LoggerOptions>(loggerOptionsRTTI).toConstantValue(getDefaultLoggerOptions());\n    bind<LoggerInstances>(loggerInstancesRTTI).toConstantValue(new Map());\n});\n","import { injectable, inject } from \"inversify\";\nimport { telemetryEventGroupFactoryRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { TelemetryEventGroup, TelemetryClient } from \"~/modules/telemetry\";\nimport { TelemetryEventGroupFactory } from \"~/modules/telemetry/TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\n\n@injectable()\nexport class TelemetryClientImpl<U extends object> implements TelemetryClient<U> {\n    name: string;\n\n    sessionData?: U;\n\n    readonly #eventGroupFactory: TelemetryEventGroupFactory<unknown>;\n\n    readonly #logger: Logger;\n\n    constructor(\n        @inject(telemetryEventGroupFactoryRTTI) eventGroupFactory: TelemetryEventGroupFactory<unknown>,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>\n    ) {\n        this.#eventGroupFactory = eventGroupFactory;\n        this.#logger = getLogger(TelemetryLoggerName.TelemetryClient);\n    }\n\n    createEventGroup<T>(name?: string): TelemetryEventGroup<T> {\n        this.#logger.debug(\"creating event group with name: \", name);\n        const eventGroup = this.#eventGroupFactory(this, name);\n        return eventGroup;\n    }\n\n    \n    \n    async setSessionData(sessionData: U): Promise<void> {\n        this.sessionData = sessionData;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryClient, TelemetryEvent, TelemetryEventGroup } from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { telemetryProcessorRTTI, telemetryOptionsRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryProcessingResult } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessingResult\";\nimport { TelemetryErrorEvent } from \"~/modules/telemetry/TelemetryEventGroup/TelemetryErrorEvent\";\nimport { TelemetryOptions } from \"../../TelemetryOptions/TelemetryOptions\";\nimport { Twilsock, twilsockRTTI } from \"~/modules/websocket\";\n\n@injectable()\nexport class TelemetryEventGroupImpl<T> implements TelemetryEventGroup<T> {\n    name?: string;\n\n    telemetryClient: TelemetryClient;\n\n    readonly #processor: TelemetryProcessor;\n\n    readonly #options: TelemetryOptions;\n\n    readonly #connection: Twilsock;\n\n    constructor(\n        @inject(telemetryProcessorRTTI) processor: TelemetryProcessor,\n        @inject(telemetryOptionsRTTI) telemetryOptions: TelemetryOptions,\n        @inject(twilsockRTTI) twilsock: Twilsock\n    ) {\n        this.#processor = processor;\n        this.#options = telemetryOptions;\n        this.#connection = twilsock;\n    }\n\n    async addEvents(...events: (T & TelemetryEvent)[]): Promise<TelemetryProcessingResult> {\n        return this.#processor.processEvents(\n            this.telemetryClient.name,\n            this.name,\n            this.telemetryClient.sessionData,\n            ...events\n        );\n    }\n\n    async addErrorEvent(errorEvent: TelemetryErrorEvent): Promise<TelemetryProcessingResult> {\n        const isWebsocketAvailable = this.#connection.isConnected();\n        const suppressErrors = !(this.#options.reportErrors && isWebsocketAvailable);\n\n        if (suppressErrors) {\n            return {\n                eventsSucceeded: 0,\n                eventsFailed: 0,\n                eventsNotProcessed: 1\n            };\n        }\n\n        return this.#processor.processEvents(\n            \"flex-ui-sdk-error-v1\",\n            this.name,\n            this.telemetryClient.sessionData,\n            errorEvent\n        );\n    }\n}\n","import { RateLimiterOptions } from \"~/modules/ratelimiter\";\n\nexport type TelemetryRateLimiterOptions = Omit<RateLimiterOptions, \"name\">;\n\nexport const telemetryRateLimiterOptions: TelemetryRateLimiterOptions = {\n    timeWindow: 60000,\n    maxHitsInTimeWindow: 100,\n    disableFeatureThreshold: 5\n};\n","import { ContainerModule, interfaces } from \"inversify\";\nimport {\n    telemetryClientFactoryRTTI,\n    telemetryEventGroupFactoryRTTI,\n    telemetryClientRTTI,\n    telemetryEventGroupRTTI,\n    telemetryProcessorRTTI,\n    telemetryOptionsRTTI,\n    telemetryRateLimiterOptionsRTTI\n} from \"./telemetry.rtti\";\nimport {\n    createTelemetryClient,\n    TelemetryClient,\n    TelemetryClientFactory,\n    TelemetryEventGroup\n} from \"~/modules/telemetry\";\nimport { TelemetryProcessor } from \"./TelemetryProcessor/TelemetryProcessor\";\nimport { createEventGroup } from \"./TelemetryEventGroupFactory/createEventGroup\";\nimport { TelemetryClientImpl } from \"./TelemetryClient/TelemetryClientImpl/TelemetryClientImpl\";\nimport { TelemetryEventGroupImpl } from \"./TelemetryEventGroup/TelemetryEventGroupImpl/TelemetryEventGroupImpl\";\nimport { TelemetryEventGroupFactory } from \"./TelemetryEventGroupFactory/TelemetryEventGroupFactory\";\nimport { TwilioTelemetryProcessor } from \"./TelemetryProcessor/TwilioEventProcessor/TwilioTelemetryProcessor\";\nimport { TelemetryOptions } from \"./TelemetryOptions/TelemetryOptions\";\nimport { getDefaultTelemetryOptions } from \"./TelemetryOptions/getDefaultTelemetryOptions\";\nimport {\n    TelemetryRateLimiterOptions,\n    telemetryRateLimiterOptions\n} from \"~/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions\";\n\nexport const telemetryModuleContainer = new ContainerModule(<U extends object>(bind: interfaces.Bind) => {\n    bind<TelemetryClientFactory<U>>(telemetryClientFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (name: string) => {\n            return createTelemetryClient(context.container, name);\n        };\n    });\n\n    bind<TelemetryClient<U>>(telemetryClientRTTI).to(TelemetryClientImpl);\n\n    bind<TelemetryEventGroupFactory<U>>(telemetryEventGroupFactoryRTTI).toFactory((context: interfaces.Context) => {\n        return (telemetryClient: TelemetryClient<object>, name?: string) => {\n            return createEventGroup(context.container, telemetryClient, name);\n        };\n    });\n\n    bind<TelemetryEventGroup<U>>(telemetryEventGroupRTTI).to(TelemetryEventGroupImpl);\n\n    bind<TelemetryProcessor>(telemetryProcessorRTTI).to(TwilioTelemetryProcessor).inSingletonScope();\n\n    bind<TelemetryOptions>(telemetryOptionsRTTI).toConstantValue(getDefaultTelemetryOptions());\n\n    bind<TelemetryRateLimiterOptions>(telemetryRateLimiterOptionsRTTI).toConstantValue(telemetryRateLimiterOptions);\n});\n","import { interfaces } from \"inversify\";\nimport { telemetryEventGroupRTTI } from \"~/modules/telemetry/telemetry.rtti\";\nimport { TelemetryClient, TelemetryEventGroup } from \"~/modules/telemetry\";\n\nexport function createEventGroup<T>(\n    container: interfaces.Container,\n    telemetryClient: TelemetryClient<object>,\n    name?: string\n): TelemetryEventGroup<T> {\n    const eventGroup = container.get<TelemetryEventGroup<T>>(telemetryEventGroupRTTI);\n    eventGroup.name = name;\n    eventGroup.telemetryClient = telemetryClient;\n    return eventGroup;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { telemetrySdkClientRTTI, telemetrySdkErrorEventGroupRTTI } from \"./telemetrySdkClient.rtti\";\nimport { TelemetrySdkClient } from \"./TelemetrySdkClient/TelemetrySdkClient\";\nimport { TelemetrySDKSessionData } from \"./TelemetrySdkClient/TelemetrySDKSessionData\";\nimport { createTelemetryClient, TelemetryEventGroup, TelemetryErrorEvent } from \"~/modules/telemetry\";\n\nexport const telemetrySdkClientModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<TelemetrySdkClient>(telemetrySdkClientRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            return createTelemetryClient<TelemetrySDKSessionData>(context.container, \"sdk-v1\");\n        })\n        .inSingletonScope();\n    bind<TelemetryEventGroup<TelemetryErrorEvent>>(telemetrySdkErrorEventGroupRTTI)\n        .toDynamicValue((context: interfaces.Context) => {\n            const errorClient = context.container.get<TelemetrySdkClient>(telemetrySdkClientRTTI);\n            const group = errorClient.createEventGroup<TelemetryErrorEvent>();\n            return group;\n        })\n        .inSingletonScope();\n});\n","import { inject, injectable } from \"inversify\";\nimport { ErrorCode, FlexSdkError, InternalError } from \"~/modules/error\";\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { TelemetryEventGroup } from \"~/modules/telemetry\";\nimport {\n    TelemetrySdkClient,\n    telemetrySdkClientRTTI,\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource\n} from \"~/modules/telemetrySdkClient\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\n\nconst defaultOptions = {\n    rateLimiterErrorCode: ErrorCode.TooManySDKRequests,\n    disableFeatureErrorCode: ErrorCode.TemporarilyDisabled,\n    disableFeatureThreshold: Number.MAX_VALUE\n};\n\n\n\n\n@injectable()\nexport class RateLimiterImpl implements RateLimiter {\n    #options: Required<RateLimiterOptions>;\n\n    #hitCountInTimeWindow: number = 0;\n\n    #rateLimitExceededCount: number = 0;\n\n    #resetTimeIntervalHandle: NodeJS.Timeout;\n\n    readonly #telemetryEventGroup: TelemetryEventGroup<TelemetrySdkEvent>;\n\n    readonly #logger: Logger;\n\n    constructor(\n        @inject(telemetrySdkClientRTTI) telemetryClient: TelemetrySdkClient,\n        @inject(loggerFactoryRTTI) loggerFactory: LoggerFactory\n    ) {\n        this.#telemetryEventGroup = telemetryClient.createEventGroup(TelemetrySdkEventGroup.RateLimiter);\n        this.#logger = loggerFactory(LoggerName.RateLimiter);\n    }\n\n    setup(options: RateLimiterOptions) {\n        if (this.#options) {\n            throw new InternalError(\"RateLimiter is already initialized\");\n        }\n\n        if (options.timeWindow < 100) {\n            throw new InternalError(\"timeWindow should be >= 100\");\n        }\n\n        this.#options = {\n            maxHitsInTimeWindow: options.maxHitsInTimeWindow,\n            disableFeatureThreshold: options.disableFeatureThreshold || defaultOptions.disableFeatureThreshold,\n            timeWindow: options.timeWindow,\n            rateLimiterErrorCode: options.rateLimiterErrorCode || defaultOptions.rateLimiterErrorCode,\n            disableFeatureErrorCode: options.disableFeatureErrorCode || defaultOptions.disableFeatureErrorCode,\n            name: options.name\n        };\n        this.#resetTimeIntervalHandle = setInterval(this.#resetHitCountInTimeWindow, this.timeWindow);\n    }\n\n    get maxHitsInTimeWindow() {\n        return this.#options.maxHitsInTimeWindow;\n    }\n\n    get hitCountInTimeWindow() {\n        return this.#hitCountInTimeWindow;\n    }\n\n    get name() {\n        return this.#options.name;\n    }\n\n    get timeWindow() {\n        return this.#options.timeWindow;\n    }\n\n    check() {\n        if (!this.#options) {\n            throw new InternalError(\"Rate limiter not set up, call setup()\");\n        }\n\n        this.#increaseHitCountInTimeWindow();\n        this.#increaseExceededCountOnFirstTimeWindowLimitHit();\n\n        this.#reportRateLimitErrorIfNeeded();\n        this.#throwRateLimitErrorIfNeeded();\n    }\n\n    cleanup() {\n        clearInterval(this.#resetTimeIntervalHandle);\n    }\n\n    #resetHitCountInTimeWindow = () => {\n        this.#hitCountInTimeWindow = 0;\n        this.#logger.trace(`rate limiter window reset. name=\"${this.name}\"`);\n    };\n\n    #increaseHitCountInTimeWindow = () => {\n        this.#hitCountInTimeWindow += 1;\n    };\n\n    #increaseExceededCountOnFirstTimeWindowLimitHit = () => {\n        if (this.#hitCountInTimeWindow - 1 === this.#options.maxHitsInTimeWindow) {\n            this.#rateLimitExceededCount += 1;\n        }\n    };\n\n    #throwRateLimitErrorIfNeeded = () => {\n        if (this.#rateLimitExceededCount >= this.#options.disableFeatureThreshold) {\n            this.#logger.warn(\n                `temporarily disabled. name=\"${this.name}\", hitCount=${this.#hitCountInTimeWindow}, windowCount=${\n                    this.#rateLimitExceededCount\n                }`\n            );\n            throw new FlexSdkError(\n                ErrorCode.TemporarilyDisabled,\n                undefined,\n                `Feature disabled by rate limiter ${this.name}`\n            );\n        }\n\n        if (this.hitCountInTimeWindow > this.maxHitsInTimeWindow) {\n            this.#logger.warn(`rate limiter hit. name=\"${this.name}\", hitCount=${this.#hitCountInTimeWindow}`);\n            throw new FlexSdkError(\n                ErrorCode.TooManySDKRequests,\n                undefined,\n                `Request blocked by rate limiter ${this.name}`\n            );\n        }\n    };\n\n    #reportRateLimitErrorIfNeeded = () => {\n        if (this.#hitCountInTimeWindow - 1 === this.#options.maxHitsInTimeWindow) {\n            if (this.#rateLimitExceededCount === this.#options.disableFeatureThreshold) {\n                \n                this.#reportRateLimiterDisabledFeature();\n            } else if (this.#rateLimitExceededCount < this.#options.disableFeatureThreshold) {\n                \n                this.#reportRateLimitHit();\n            }\n        }\n    };\n\n    #reportRateLimitHit = () => {\n        this.#telemetryEventGroup.addEvents({\n            eventName: TelemetrySdkEventName.RateLimiterTriggered,\n            eventSource: TelemetrySdkEventSource.RateLimiter,\n            resource: {\n                id: this.#options.name\n            }\n        });\n    };\n\n    #reportRateLimiterDisabledFeature = () => {\n        this.#telemetryEventGroup.addEvents({\n            eventName: TelemetrySdkEventName.RateLimiterDisabledFeature,\n            eventSource: TelemetrySdkEventSource.RateLimiter,\n            resource: {\n                id: this.#options.name\n            }\n        });\n    };\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { cleanupRateLimiters } from \"~/modules/ratelimiter/cleanupRateLimiters/cleanupRateLimiters\";\nimport { createRateLimiter } from \"~/modules/ratelimiter/RateLimiterFactory/createRateLimiter/createRateLimiter\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterFactory } from \"~/modules/ratelimiter/RateLimiterFactory/RateLimiterFactory\";\nimport { RateLimiterImpl } from \"~/modules/ratelimiter/RateLimiter/RateLimiterImpl/RateLimiterImpl\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\nimport {\n    cleanupRateLimitersRTTI,\n    rateLimiterFactoryRTTI,\n    rateLimiterMapRTTI,\n    rateLimiterRTTI\n} from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport const rateLimiterModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<RateLimiter>(rateLimiterRTTI).to(RateLimiterImpl);\n    bind<Map<string, RateLimiter>>(rateLimiterMapRTTI).toConstantValue(new Map());\n    bind<RateLimiterFactory>(rateLimiterFactoryRTTI).toFactory((context: interfaces.Context): RateLimiterFactory => {\n        return (options: RateLimiterOptions) => {\n            return createRateLimiter(context.container, options);\n        };\n    });\n    bind<Function>(cleanupRateLimitersRTTI).toDynamicValue((context: interfaces.Context) => {\n        return () => cleanupRateLimiters(context.container);\n    });\n});\n","import { interfaces } from \"inversify\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { LocalStorageKeys } from \"../LocalStorage/LocalStorageKeys\";\n\nexport const clearLocalStorage =\n    ({ container }: interfaces.Context) =>\n    () => {\n        const getLogger = container.get<LoggerFactory>(loggerFactoryRTTI);\n        const logger = getLogger(LoggerName.Storage);\n        logger.debug(`Clearing out Flex SDK local storage cache`);\n        Object.values(LocalStorageKeys).forEach((key) => {\n            localStorage.removeItem(key);\n        });\n    };\n","import { injectable, inject } from \"inversify\";\nimport { Logger, LoggerName, loggerFactoryRTTI, LoggerFactory } from \"~/modules/logger\";\nimport { LocalStorage, CachedValue } from \"./LocalStorage\";\nimport { LocalStorageKeys } from \"./LocalStorageKeys\";\n\nconst msInHour = 60 * 60 * 1000;\nconst TTL = 24 * msInHour;\n\n@injectable()\nexport class LocalStorageImpl implements LocalStorage {\n    readonly #logger: Logger;\n\n    constructor(@inject(loggerFactoryRTTI) getLogger: LoggerFactory) {\n        this.#logger = getLogger(LoggerName.Storage);\n    }\n\n    getCachedItem<T = unknown>(key: LocalStorageKeys): undefined | T {\n        const serializedItem = localStorage.getItem(key);\n\n        if (!serializedItem) {\n            this.#logger.debug(`The ${key} cache item is not available`);\n            return undefined;\n        }\n\n        const item: CachedValue<T> = JSON.parse(serializedItem);\n        const now = new Date();\n\n        if (now.getTime() > item.expiry) {\n            localStorage.removeItem(key);\n            this.#logger.debug(`The ${key} cache item has expired`);\n            return undefined;\n        }\n\n        return item.value;\n    }\n\n    setCachedItem(key: LocalStorageKeys, value: unknown) {\n        const expiry = new Date().getTime() + TTL;\n\n        const item: CachedValue = {\n            value,\n            expiry\n        };\n\n        try {\n            localStorage.setItem(key, JSON.stringify(item));\n        } catch (err) {\n            \n            this.#logger.error(err);\n        }\n\n        this.#logger.debug(`Cached ${key}`);\n    }\n}\n","import \"reflect-metadata\";\n\nimport { Container } from \"inversify\";\n\nimport { authModuleContainer } from \"./modules/auth/auth.ioc\";\nimport { sessionModuleContainer } from \"./modules/session/session.ioc\";\nimport { clientModuleContainer } from \"./modules/client/client.ioc\";\nimport { errorModuleContainer } from \"./modules/error/error.ioc\";\nimport { eventsModuleContainer } from \"./modules/events/events.ioc\";\nimport { configModuleContainer } from \"./modules/config/config.ioc\";\nimport { websocketModuleContainer } from \"./modules/websocket/websocket.ioc\";\nimport { rbacModuleContainer } from \"./modules/rbac/rbac.ioc\";\nimport { loggerModuleContainer } from \"./modules/logger/logger.ioc\";\nimport { telemetryModuleContainer } from \"./modules/telemetry/telemetry.ioc\";\nimport { telemetrySdkClientModuleContainer } from \"./modules/telemetrySdkClient/telemetrySdkClient.ioc\";\nimport { rateLimiterModuleContainer } from \"./modules/ratelimiter/ratelimiter.ioc\";\nimport { storageModuleContainer } from \"~/modules/storage/storage.ioc\";\nimport { withContainer } from \"./backend/openApi.container\";\n\nexport function createContainer(): Container {\n    const container = new Container();\n    container.load(authModuleContainer);\n    container.load(configModuleContainer);\n    container.load(sessionModuleContainer);\n    container.load(clientModuleContainer);\n    container.load(errorModuleContainer);\n    container.load(eventsModuleContainer);\n    container.load(websocketModuleContainer);\n    container.load(rbacModuleContainer);\n    container.load(loggerModuleContainer);\n    container.load(telemetryModuleContainer);\n    container.load(telemetrySdkClientModuleContainer);\n    container.load(rateLimiterModuleContainer);\n    container.load(storageModuleContainer);\n    withContainer(container);\n    return container;\n}\n\nlet singletonContainer: Container;\nexport function getSingletonContainer(): Container {\n    if (!singletonContainer) {\n        singletonContainer = createContainer();\n    }\n\n    return singletonContainer;\n}\n","import { ContainerModule, interfaces } from \"inversify\";\nimport { ClearCache } from \"~/modules/storage/ClearCache/ClearCache\";\nimport { clearLocalStorage } from \"~/modules/storage/ClearCache/clearLocalStorage\";\nimport { LocalStorage } from \"./LocalStorage/LocalStorage\";\nimport { LocalStorageImpl } from \"./LocalStorage/LocalStorageImpl\";\nimport { clearCacheRTTI, localStorageRTTI } from \"./storage.rtti\";\n\nexport const storageModuleContainer = new ContainerModule((bind: interfaces.Bind) => {\n    bind<LocalStorage>(localStorageRTTI).to(LocalStorageImpl).inSingletonScope();\n    bind<ClearCache>(clearCacheRTTI).toDynamicValue(clearLocalStorage);\n});\n","import { interfaces } from \"inversify\";\nimport { ApiServiceBinder as TelemetryBinder } from \"./generated/Telemetry/ApiServiceBinder\";\nimport { ApiServiceBinder as ConfigurationServiceBinder } from \"./generated/Configuration/ApiServiceBinder\";\nimport { ApiServiceBinder as FeaturesBinder } from \"./generated/Features/ApiServiceBinder\";\nimport { ApiServiceBinder as FederatedAuthBinder } from \"./generated/FederatedAuth/ApiServiceBinder\";\n\nimport { TwilsockAdapter } from \"./TwilsockAdapter/TwilsockAdapter\";\nimport { twilsockAdapterRTTI, httpAdapterRTTI } from \"./backend.rtti\";\nimport { TwilsockAdapterImpl } from \"./TwilsockAdapter/TwilsockAdapterImpl\";\nimport { HttpAdapter } from \"./HttpAdapter/HttpAdapter\";\nimport { HttpAdapterImpl } from \"./HttpAdapter/HttpAdapterImpl\";\n\nexport function withContainer(container: interfaces.Container): void {\n    container.bind<TwilsockAdapter>(twilsockAdapterRTTI).to(TwilsockAdapterImpl).inSingletonScope();\n    container.bind<HttpAdapter>(httpAdapterRTTI).to(HttpAdapterImpl).inSingletonScope();\n\n    TelemetryBinder.with(container);\n    ConfigurationServiceBinder.with(container);\n    FeaturesBinder.with(container);\n    FederatedAuthBinder.with(container);\n}\n","export const telemetrySdkClientRTTI = Symbol.for(\"TelemetrySdkClient\");\nexport const telemetrySdkErrorEventGroupRTTI = Symbol.for(\"TelemetrySdkErrorEventGroup\");\n","import camelcase from \"lodash/camelCase\";\nimport snakecase from \"lodash/snakeCase\";\nimport mapkeys from \"lodash/mapKeys\";\nimport transform from \"lodash/transform\";\nimport { assertNotCircularObject } from \"~/utils/assert\";\n\ninterface LooseObject {\n    [key: string]: unknown;\n}\n\nconst mapArrayKeys = <T extends object>(object: T[], cb: (key: string) => string) => {\n    const newArray = [] as object[];\n    object.forEach((item: T) => {\n        let newValue: T;\n        if (Array.isArray(item)) {\n            newValue = mapArrayKeys(item, cb) as T;\n        } else if (typeof item === \"object\") {\n            \n            newValue = mapAllKeys(item, cb) as T;\n        } else {\n            newValue = item;\n        }\n        newArray.push(newValue);\n    });\n    return newArray;\n};\n\nconst mapAllKeys = <T extends object>(object: T, cb: (key: string) => string) => {\n    \n    return transform<any, LooseObject>(\n        object,\n        (result: LooseObject, value: Object, key: string) => {\n            if (Array.isArray(value)) {\n                \n                result[`${cb(key)}`] = mapArrayKeys(value, cb);\n            } else if (value instanceof Object && !(value instanceof Date)) {\n                \n                result[`${cb(key)}`] = mapAllKeys(value, cb);\n            } else {\n                \n                result[`${cb(key)}`] = value;\n            }\n        },\n        {}\n    );\n};\n\nexport const mapKeysToCamelCase = <T extends object>(object: T): LooseObject =>\n    mapAllKeys(object, (key: string) => camelcase(key));\n\nconst mapRootKeysTo = <T extends object>(object: T, cb: (key: string) => string) =>\n    \n    mapkeys<any>(object, (_, key: string) => cb(key));\n\nexport const mapRootKeysToSnakeCase = <T extends object>(object: T): LooseObject =>\n    mapRootKeysTo(object, (key: string) => snakecase(key));\n\nexport const mapRootKeysToCamelCase = <T extends object>(object: T): object =>\n    mapRootKeysTo(object, (key: string) => camelcase(key));\n\nexport const mapAllKeysToSnakeCase = <T extends object>(object: T): LooseObject => {\n    assertNotCircularObject(object, \"key-value dictionary\");\n    return mapAllKeys(object, (key: string) => snakecase(key));\n};\n","export const sessionRTTI = Symbol.for(\"Session\");\nexport const sessionOptionsRTTI = Symbol.for(\"SessionOptions\");\n","module.exports = require(\"core-js/modules/es.map.js\");","export const clientRTTI = Symbol.for(\"Client\");\nexport const clientProviderRTTI = Symbol.for(\"ClientProvider\");\nexport const clientOptionsRTTI = Symbol.for(\"ClientOptions\");\nexport const clientMockOptionsRTTI = Symbol.for(\"ClientMockOptions\");\n","import { getMessage } from \"~/modules/error/ErrorCode/ErrorCodeHelper\";\nimport { ErrorCode } from \"~/modules/error/ErrorCode/ErrorCodes\";\nimport { ErrorSeverity } from \"~/modules/error/ErrorSeverity/ErrorSeverity\";\nimport { FlexSdkErrorMetadata } from \"~/modules/error/FlexSdkErrorMetadata/FlexSdkErrorMetadata\";\n\n\n\n\n\nexport class FlexSdkError extends Error {\n    readonly #details: string | undefined;\n\n    readonly #errorCode: ErrorCode;\n\n    readonly #wrappedError: Error | undefined;\n\n    readonly #metadata: FlexSdkErrorMetadata;\n\n    constructor(errorCode: ErrorCode, metadata?: FlexSdkErrorMetadata, details?: string, wrappedError?: Error) {\n        super(`${getMessage(errorCode) + (details !== undefined ? `: ${details}` : \"\")} (${errorCode})`);\n        this.#errorCode = errorCode;\n        this.#details = details;\n        this.#metadata = metadata || { severity: ErrorSeverity.Error };\n        this.#wrappedError = wrappedError;\n\n        Object.setPrototypeOf(this, FlexSdkError.prototype);\n    }\n\n    \n\n\n\n\n\n    public get code(): ErrorCode {\n        return this.#errorCode;\n    }\n\n    \n\n\n\n\n\n    public get details(): string | undefined {\n        return this.#details;\n    }\n\n    \n\n\n\n\n\n    public get wrappedError(): Error | undefined {\n        return this.#wrappedError;\n    }\n\n    \n\n\n\n\n\n    public get metadata(): FlexSdkErrorMetadata {\n        return { ...this.#metadata };\n    }\n}\n","module.exports = require(\"core-js/modules/es.array.includes.js\");","module.exports = require(\"core-js/modules/es.string.includes.js\");","module.exports = require(\"core-js/modules/es.regexp.exec.js\");","module.exports = require(\"core-js/modules/es.object.get-prototype-of.js\");","module.exports = require(\"core-js/modules/es.regexp.to-string.js\");","\n\n\nexport enum LoggerName {\n    Client = \"flex:Client\",\n    Error = \"flex:Error\",\n    Session = \"flex:Session\",\n    Twilsock = \"flex:Twilsock\",\n    Auth = \"flex:Auth\",\n    Config = \"flex:Config\",\n    RateLimiter = \"flex:RateLimiter\",\n    Sync = \"flex:Sync\",\n    SyncAdapter = \"flex:SyncAdapter\",\n    QueueStats = \"flex:QueueStats\",\n    Storage = \"flex:Storage\"\n    \n}\n\n\n\n\nexport enum SdkLoggerName {\n    Twilsock = \"twilsock\"\n}\n\n\n\n\nexport enum TelemetryLoggerName {\n    TelemetryClient = \"TelemetryClient\",\n    TelemetryProcessor = \"TelemetryProcessor\",\n    TelemetrySdkClient = \"TelemetrySdkClient\"\n}\n\n\n\n\nexport type InternalLoggerName = LoggerName | SdkLoggerName | TelemetryLoggerName;\n","module.exports = require(\"events\");","export const eventEmitterRTTI = Symbol.for(\"eventEmitter\");\n","module.exports = require(\"loglevel\");","import { InternalError } from \"~/modules/error\";\nimport { RetryOptions } from \"~/utils/retry/RetryOptions\";\n\nfunction calculateNextDelay(retryCount: number, initialDelay: number, backoff: \"exponential\" | \"linear\"): number {\n    if (backoff === \"exponential\") {\n        return 1.5 ** retryCount * initialDelay;\n    }\n    return (retryCount + 1) * initialDelay;\n}\n\nexport async function retry<T>(options: RetryOptions<T>): Promise<T> {\n    let retryCount = 0;\n    const maxDelay = 15 * 60 * 1000; \n    const initialDelay = typeof options.initialDelay !== \"undefined\" ? options.initialDelay : 100;\n    const maxAttempts = typeof options.maxAttempts !== \"undefined\" ? options.maxAttempts : 3;\n    const backoff = options.backoff || \"exponential\";\n    let errorToReturn;\n\n    if (maxAttempts < 1) {\n        throw new InternalError(\"The value of max retry attempts has to be bigger than 0\");\n    }\n\n    do {\n        try {\n            if (options.logger && retryCount > 0) {\n                options.logger.debug(\"Retry attempt: \", retryCount);\n            }\n\n            \n            return await options.functionToRetry();\n        } catch (error) {\n            if (!options.retryCondition(error)) {\n                return Promise.reject(error);\n            }\n            if (retryCount >= maxAttempts - 1) {\n                errorToReturn = error;\n                break;\n            }\n        }\n        let delay = calculateNextDelay(retryCount, initialDelay, backoff);\n\n        \n        if (delay > maxDelay) {\n            delay = maxDelay;\n        }\n\n        \n        await new Promise((resolve) => setTimeout(resolve, delay));\n    } while (retryCount++ < maxAttempts - 1);\n\n    return Promise.reject(errorToReturn);\n}\n","module.exports = require(\"core-js/modules/es.array.slice.js\");","module.exports = require(\"core-js/modules/es.reflect.construct.js\");","module.exports = require(\"core-js/modules/es.string.replace.js\");","\n\n\n\nexport enum ErrorSeverity {\n    Fatal = \"fatal\",\n    Error = \"error\",\n    Warning = \"warning\",\n    Info = \"info\"\n}\n","export enum LocalStorageKeys {\n    AccountConfig = \"FLEX_SDK_CACHE_ACCOUNT_CONFIG\",\n    PublicConfig = \"FLEX_SDK_CACHE_PUBLIC_CONFIG\",\n    FeaturesConfig = \"FLEX_SDK_CACHE_FEATURES_CONFIG\"\n}\n","module.exports = require(\"lodash/cloneDeep\");","export type { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nexport type { RateLimiterFactory } from \"~/modules/ratelimiter/RateLimiterFactory/RateLimiterFactory\";\nexport type { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\n\nexport { rateLimiterFactoryRTTI, cleanupRateLimitersRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n","\n\n\n\n\n\nexport class TwilsockReplyError extends Error {\n    reply: {\n        status: {\n            code: number;\n        };\n    };\n}\n\nexport function isTwilsockReplyError(error: Error): boolean {\n    const hasReply = Object.prototype.hasOwnProperty.call(error, \"reply\");\n    const hasStatus = hasReply && Object.prototype.hasOwnProperty.call((error as TwilsockReplyError).reply, \"status\");\n    const hasCode =\n        hasStatus && Object.prototype.hasOwnProperty.call((error as TwilsockReplyError).reply.status, \"code\");\n\n    return hasReply && hasStatus && hasCode;\n}\n","module.exports = require(\"core-js/modules/es.array.reduce.js\");","export enum TwilsockEvent {\n    TokenExpired = \"tokenExpired\",\n    TokenAboutToExpire = \"tokenAboutToExpire\",\n    StateChanged = \"stateChanged\",\n    ConnectionError = \"connectionError\",\n    Connected = \"connected\",\n    Disconnected = \"disconnected\",\n    TokenUpdated = \"tokenUpdated\"\n}\n","module.exports = require(\"core-js/modules/es.array.from.js\");","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport enum Role {\n    Guest = \"guest\",\n    Agent = \"agent\",\n    Admin = \"admin\",\n    Supervisor = \"supervisor\"\n}\n","import cloneDeep from \"lodash/cloneDeep\";\nimport { SessionOptions } from \"~/modules/session\";\n\nconst defaultSessionOptions: SessionOptions = {\n    autoUpdateToken: true\n};\n\nexport function getDefaultSessionOptions(): SessionOptions {\n    return cloneDeep(defaultSessionOptions);\n}\n","import { interfaces } from \"inversify\";\nimport { Client, ClientOptions, clientRTTI, clientOptionsRTTI } from \"~/modules/client\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { mergeUserOptions } from \"~/utils/mergeUserOptions\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport {\n    TelemetrySdkEvent,\n    TelemetrySdkEventGroup,\n    TelemetrySdkEventName,\n    TelemetrySdkEventSource,\n    TelemetrySdkClient,\n    telemetrySdkClientRTTI,\n    SDKDependency\n} from \"~/modules/telemetrySdkClient\";\n\nimport { Logger, LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport {\n    ErrorCode,\n    throwErrorFromErrorResponseRTTI,\n    throwErrorRTTI,\n    ThrowErrorFunction,\n    ThrowErrorFromErrorResponseFunction,\n    ErrorSeverity\n} from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\n\nconst sendClientInitEvent = async (logger: Logger, telemetrySdkClient: TelemetrySdkClient, durationInMs: number) => {\n    try {\n        const group = telemetrySdkClient.createEventGroup<TelemetrySdkEvent>(TelemetrySdkEventGroup.Default);\n        await group.addEvents({\n            eventName: TelemetrySdkEventName.ClientInitialized,\n            eventSource: TelemetrySdkEventSource.Client,\n            durationMs: durationInMs\n        });\n    } catch (e) {\n        logger.error(\"Failed to send client init event\", e);\n    }\n};\n\nexport async function createClient(\n    container: interfaces.Container,\n    token: string,\n    userOptions?: DeepPartial<ClientOptions>\n): Promise<Client> {\n    const t0Ms = Date.now();\n\n    assertNotEmptyString(token, \"token\");\n    const clientOptions = container.get<ClientOptions>(clientOptionsRTTI);\n    const getLogger = container.get<LoggerFactory>(loggerFactoryRTTI);\n    const logger = getLogger(LoggerName.Client);\n    const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n    const throwErrorFromErrorResponse = container.get<ThrowErrorFromErrorResponseFunction>(\n        throwErrorFromErrorResponseRTTI\n    );\n\n    mergeUserOptions(clientOptions, userOptions);\n\n    const session = container.get<Session>(sessionRTTI);\n\n    try {\n        await session.init(token);\n    } catch (err) {\n        const metadata = {\n            module: extractModuleFromPath(__dirname),\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        \n        \n        if (err.code === 2002 || err.code === 20003) {\n            metadata.source = \"Twilsock\";\n            \n            throwError(ErrorCode.Forbidden, metadata, \"Insufficient permissions\", err.source);\n        } else {\n            throwErrorFromErrorResponse(err, metadata);\n        }\n    }\n\n    try {\n        const telemetrySessionData = {\n            dependencies: {\n                [SDKDependency.Twilsock]: \"default\"\n            }\n        };\n\n        const telemetrySdkClient = container.get<TelemetrySdkClient>(telemetrySdkClientRTTI);\n        await telemetrySdkClient.setSessionData(telemetrySessionData);\n\n        const durationMs = Date.now() - t0Ms;\n        \n        await sendClientInitEvent(logger, telemetrySdkClient, durationMs);\n    } catch (e) {\n        logger.error(\"Failed to set session data for telemetry\", e);\n    }\n\n    const client = container.get<Client>(clientRTTI);\n    return client;\n}\n","import { injectable, inject } from \"inversify\";\nimport { ClientOptions } from \"~/modules/client\";\nimport { SessionOptions, sessionOptionsRTTI } from \"~/modules/session\";\nimport { LoggerOptions, loggerOptionsRTTI } from \"~/modules/logger\";\nimport { TelemetryOptions, telemetryOptionsRTTI } from \"~/modules/telemetry\";\n\n@injectable()\nexport class ClientOptionsStore implements ClientOptions {\n    readonly #session: SessionOptions;\n\n    readonly #logger: LoggerOptions;\n\n    readonly #telemetry: TelemetryOptions;\n\n    \n    \n    #region: string;\n\n    #appName: string;\n\n    #appVersion: string;\n\n    constructor(\n        @inject(sessionOptionsRTTI) session: SessionOptions,\n        @inject(loggerOptionsRTTI) logger: LoggerOptions,\n        @inject(telemetryOptionsRTTI) telemetry: TelemetryOptions\n    ) {\n        this.#session = session;\n        this.#logger = logger;\n        this.#telemetry = telemetry;\n    }\n\n    get session(): SessionOptions {\n        return this.#session;\n    }\n\n    get logger(): LoggerOptions {\n        return this.#logger;\n    }\n\n    get telemetry(): TelemetryOptions {\n        return this.#telemetry;\n    }\n\n    get region(): string {\n        return this.#region;\n    }\n\n    set region(value: string) {\n        this.#region = value;\n    }\n\n    get appName(): string {\n        return this.#appName;\n    }\n\n    set appName(value: string) {\n        this.#appName = value;\n    }\n\n    get appVersion(): string {\n        return this.#appVersion;\n    }\n\n    set appVersion(value: string) {\n        this.#appVersion = value;\n    }\n}\n","import { injectable } from \"inversify\";\nimport { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { InternalError } from \"~/modules/error\";\n\n@injectable()\nexport class AccountConfigDataContainer implements ConfigDataContainer<AccountConfigData> {\n    #data?: AccountConfigData;\n\n    get(): AccountConfigData {\n        if (!this.#data) {\n            throw new InternalError(\"Config data hasn't been fetched\");\n        }\n        return this.#data;\n    }\n\n    set(data: AccountConfigData): void {\n        this.#data = data;\n    }\n}\n","import { interfaces } from \"inversify\";\nimport { AccountConfigData } from \"~/backend/generated/Configuration/model/accountConfigData\";\nimport { AccountConfigProvider } from \"../AccountConfigProvider/AccountConfigProvider\";\nimport { accountConfigProviderRTTI } from \"../config.rtti\";\n\nexport const getAccountConfigData =\n    (container: interfaces.Container) =>\n    async (sessionToken: string): Promise<AccountConfigData> => {\n        const configProvider = container.get<AccountConfigProvider>(accountConfigProviderRTTI);\n        const config = await configProvider(sessionToken);\n        return config.get();\n    };\n","import { interfaces } from \"inversify\";\n\nimport twilsockLoglevel from \"loglevels/twilsock\";\nimport * as defaultLoglevel from \"loglevel\";\n\nimport {\n    loglevelFactoryRTTI,\n    newableLoggerRTTI,\n    defaultPluginsRTTI,\n    loggerOptionsRTTI,\n    loggerInstancesRTTI\n} from \"~/modules/logger/logger.rtti\";\nimport { LoglevelFactory, LoggerPlugin, LoggerInstances } from \"./LoggerFactory\";\nimport { LoggerOptions, Logger, Loglevel } from \"~/modules/logger\";\nimport { assertString } from \"~/utils/assert\";\nimport { InternalLoggerName, SdkLoggerName } from \"~/modules/logger/Logger/LoggerName\";\nimport { NewableLogger } from \"~/modules/logger/Logger/Logger\";\n\nconst sdkLoggerNameToLoglevel: { [name in SdkLoggerName]: defaultLoglevel.RootLogger } = {\n    [SdkLoggerName.Twilsock]: twilsockLoglevel\n};\n\nconst getSdkLoglevel = (name: SdkLoggerName) => {\n    return sdkLoggerNameToLoglevel[name].getLogger(name);\n};\n\nexport const getLogger =\n    (container: interfaces.Container) =>\n    (name: InternalLoggerName): Logger => {\n        assertString(name, \"name\");\n\n        const loggers = container.get<LoggerInstances>(loggerInstancesRTTI);\n        let logger = loggers.get(name);\n        if (logger) {\n            return logger;\n        }\n\n        const defaultLevel = container.get<LoggerOptions>(loggerOptionsRTTI).level;\n        const loglevelFactory = container.get<LoglevelFactory>(loglevelFactoryRTTI);\n        const plugins = container.get<LoggerPlugin[]>(defaultPluginsRTTI);\n\n        let loglevel;\n        if (Object.keys(sdkLoggerNameToLoglevel).includes(name)) {\n            loglevel = getSdkLoglevel(name as SdkLoggerName);\n        } else {\n            loglevel = loglevelFactory(name);\n        }\n\n        loglevel = plugins.reduce((instance: Loglevel, plugin: LoggerPlugin) => plugin(instance), loglevel);\n\n        const LoggerConstructor = container.get<NewableLogger>(newableLoggerRTTI);\n        logger = new LoggerConstructor(loglevel);\n\n        logger.setLevel(defaultLevel);\n\n        loggers.set(name, logger);\n        return logger;\n    };\n","import cloneDeep from \"lodash/cloneDeep\";\nimport { LoggerOptions } from \"~/modules/logger\";\n\nconst defaultLoggerOptions: LoggerOptions = {\n    level: \"ERROR\"\n};\n\nexport function getDefaultLoggerOptions(): LoggerOptions {\n    return cloneDeep(defaultLoggerOptions);\n}\n","import { TelemetryOptions } from \"./TelemetryOptions\";\n\nexport function getDefaultTelemetryOptions(): TelemetryOptions {\n    return {\n        reportErrors: true\n    };\n}\n","import { interfaces } from \"inversify\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { rateLimiterMapRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport function cleanupRateLimiters(container: interfaces.Container) {\n    const rateLimiters = container.get<Map<string, RateLimiter>>(rateLimiterMapRTTI);\n    rateLimiters.forEach((value) => value.cleanup());\n    rateLimiters.clear();\n}\n","import { interfaces } from \"inversify\";\nimport { RateLimiter } from \"~/modules/ratelimiter/RateLimiter/RateLimiter\";\nimport { RateLimiterOptions } from \"~/modules/ratelimiter/RateLimiter/RateLimiterOptions\";\nimport { rateLimiterMapRTTI, rateLimiterRTTI } from \"~/modules/ratelimiter/ratelimiter.rtti\";\n\nexport function createRateLimiter<T extends RateLimiter = RateLimiter>(\n    container: interfaces.Container,\n    options: RateLimiterOptions\n): T {\n    const rateLimiters = container.get<Map<string, T>>(rateLimiterMapRTTI);\n\n    let rateLimiter = rateLimiters.get(options.name);\n    if (!rateLimiter) {\n        rateLimiter = container.get<T>(rateLimiterRTTI);\n        rateLimiter.setup(options);\n        rateLimiters.set(options.name, rateLimiter);\n    }\n\n    return rateLimiter;\n}\n","import { interfaces } from \"inversify\";\n\nimport { TelemetryServiceImpl } from \"./api/telemetry.service\";\nimport { TelemetryService } from \"./api/telemetry.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<TelemetryService>(\"TelemetryService\").to(TelemetryServiceImpl).inSingletonScope();\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { ConfigurationServiceImpl } from \"./api/configuration.service\";\nimport { ConfigurationService } from \"./api/configuration.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<ConfigurationService>(\"ConfigurationService\").to(ConfigurationServiceImpl).inSingletonScope();\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { FederatedAuthServiceImpl } from \"./api/federatedAuth.service\";\nimport { FederatedAuthService } from \"./api/federatedAuth.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<FederatedAuthService>(\"FederatedAuthService\").to(FederatedAuthServiceImpl).inSingletonScope();\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport { Twilsock, twilsockRTTI, TwilsockResult } from \"~/modules/websocket\";\nimport { TwilsockAdapter } from \"./TwilsockAdapter\";\n\n@injectable()\nexport class TwilsockAdapterImpl implements TwilsockAdapter {\n    readonly #twilsock: Twilsock;\n\n    constructor(@inject(twilsockRTTI) twilsockInjected: Twilsock) {\n        this.#twilsock = twilsockInjected;\n    }\n\n    public async post<U>(url: string, body: object): Promise<TwilsockResult<U>> {\n        const result = await this.#twilsock.post<U>(url, {}, body);\n        return result;\n    }\n}\n","import { injectable, inject } from \"inversify\";\nimport {\n    ErrorCode,\n    ErrorSeverity,\n    FlexSdkError,\n    InternalError,\n    ThrowErrorFromResponseFunction,\n    throwErrorFromResponseRTTI,\n    ThrowErrorFunction,\n    throwErrorRTTI\n} from \"~/modules/error\";\nimport { sessionRTTI, Session } from \"~/modules/session\";\nimport { HttpAdapter } from \"./HttpAdapter\";\nimport { EnvironmentConfig, environmentConfigRTTI } from \"~/modules/config\";\nimport { mapRootKeysToCamelCase, mapRootKeysToSnakeCase } from \"~/utils/mapKeys\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\nimport { retry } from \"~/utils/retry/retry\";\nimport { defaultRetryConditionOnFlexSdkError } from \"~/utils/defaultRetryConditionOnFlexSdkError\";\nimport { AuthenticationMethod, makeAuthenticationHeaders } from \"./authenticationMethods\";\n\n@injectable()\nexport class HttpAdapterImpl implements HttpAdapter {\n    private readonly session: Session;\n\n    private readonly envConfig: EnvironmentConfig;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    readonly #throwErrorFromResponse: ThrowErrorFromResponseFunction;\n\n    constructor(\n        @inject(sessionRTTI) session: Session,\n        @inject(environmentConfigRTTI) envConfig: EnvironmentConfig,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction,\n        @inject(throwErrorFromResponseRTTI) throwErrorFromResponse: ThrowErrorFromResponseFunction\n    ) {\n        this.session = session;\n        this.envConfig = envConfig;\n        this.#throwError = throwError;\n        this.#throwErrorFromResponse = throwErrorFromResponse;\n    }\n\n    public get<T>(url: string, authMethod?: AuthenticationMethod, options?: { [key: string]: unknown }): Promise<T> {\n        return this.performNetworkCall<T>(url, \"GET\", authMethod, undefined, options);\n    }\n\n    public post<T>(\n        url: string,\n        authMethod?: AuthenticationMethod,\n        body?: {},\n        options?: { [key: string]: unknown }\n    ): Promise<T> {\n        return this.performNetworkCall<T>(url, \"POST\", authMethod, body, options);\n    }\n\n    public put<T>(url: string, authMethod?: AuthenticationMethod, body?: {}): Promise<T> {\n        return this.performNetworkCall<T>(url, \"PUT\", authMethod, body);\n    }\n\n    public delete<T>(url: string, authMethod?: AuthenticationMethod): Promise<T> {\n        return this.performNetworkCall<T>(url, \"DELETE\", authMethod);\n    }\n\n    private getRequestData(\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): { headers: Headers | undefined; method: string; body: string } {\n        let headers;\n\n        if (authMethod) {\n            headers = makeAuthenticationHeaders(authMethod, this.#getToken(options));\n        } else {\n            headers = new Headers({\n                \"Content-Type\": \"application/json\"\n            });\n        }\n\n        return { headers, method, body: JSON.stringify(body) };\n    }\n\n    private getEnvironmentSpecificUrl(url: string): string {\n        let urlEnvSpecifier = \"\";\n        const region = this.envConfig.region || \"\";\n        if (region.startsWith(\"dev-\")) {\n            urlEnvSpecifier = \".dev\";\n        } else if (region.startsWith(\"stage-\")) {\n            urlEnvSpecifier = \".stage\";\n        }\n        return url.replace(\"[environment]\", urlEnvSpecifier);\n    }\n\n    private mapBody(body: object | undefined): { [key: string]: unknown } | undefined {\n        if (body) {\n            return mapRootKeysToSnakeCase(body);\n        }\n        return body;\n    }\n\n    #mapStatusCodeToFlexSdkErrorCode = (statusCode: number): ErrorCode | undefined => {\n        const HTTPS_STATUS_CODE_TOO_MANY_REQUESTS = 429;\n        const HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;\n\n        let errorCode;\n        if (statusCode === HTTPS_STATUS_CODE_TOO_MANY_REQUESTS) {\n            errorCode = ErrorCode.TooManyRequests;\n        } else if (statusCode >= HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR) {\n            errorCode = ErrorCode.Unknown;\n        }\n        return errorCode;\n    };\n\n    #handleErrorResponse = async (response: Response): Promise<void> => {\n        const metadata = {\n            module: \"backend\",\n            severity: ErrorSeverity.Error,\n            source: extractFileNameFromPath(__filename)\n        };\n        const flexSdkErrorCode = this.#mapStatusCodeToFlexSdkErrorCode(response.status);\n\n        if (flexSdkErrorCode) {\n            this.#throwError(flexSdkErrorCode, metadata);\n        }\n        await this.#throwErrorFromResponse(response, metadata);\n    };\n\n    private async performNetworkCall<T>(\n        url: string,\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): Promise<T> {\n        return retry({\n            functionToRetry: () => this.#performNetworkCallOnce<T>(url, method, authMethod, body, options),\n            retryCondition: defaultRetryConditionOnFlexSdkError\n        });\n    }\n\n    #performNetworkCallOnce = async <T>(\n        url: string,\n        method: string,\n        authMethod?: AuthenticationMethod,\n        body?: object,\n        options?: { [key: string]: unknown }\n    ): Promise<T> => {\n        const environmentSpecificUrl = this.getEnvironmentSpecificUrl(url);\n\n        let response: Response;\n        try {\n            response = await fetch(\n                environmentSpecificUrl,\n                this.getRequestData(method, authMethod, this.mapBody(body), options)\n            );\n        } catch (e) {\n            throw new FlexSdkError(ErrorCode.NetworkError, undefined, undefined, e);\n        }\n\n        if (!response.ok) {\n            await this.#handleErrorResponse(response);\n        }\n        const result = await response.json();\n\n        return mapRootKeysToCamelCase(result) as Promise<T>;\n    };\n\n    #getToken = (options?: { [key: string]: unknown }) => {\n        const tokenInOptions = options?.token;\n        if (!tokenInOptions) {\n            return this.session.token;\n        }\n        if (tokenInOptions && typeof tokenInOptions === \"string\") {\n            return tokenInOptions;\n        }\n\n        throw new InternalError(\"No token in request body\");\n    };\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { FeaturesConfig } from \"../model/featuresConfig\";\n\nimport { FeaturesService } from \"./features.serviceInterface\";\n\n@injectable()\nexport class FeaturesServiceImpl implements FeaturesService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n    public async fetchFeatures(): Promise<FeaturesConfig> {\n        const response = await this.httpAdapter.get<FeaturesConfig>(\n            `https://flex[environment].twilio.com/api/v1/Session`,\n            AuthenticationMethod.HostedFlex\n        );\n        const processedResponse = convertDateStringValuesToDate<FeaturesConfig>(response);\n        return processedResponse;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { FeaturesServiceImpl } from \"./api/features.service\";\nimport { FeaturesService } from \"./api/features.serviceInterface\";\n\nexport class ApiServiceBinder {\n    public static with(container: interfaces.Container) {\n        container.bind<FeaturesService>(\"FeaturesService\").to(FeaturesServiceImpl).inSingletonScope();\n    }\n}\n","module.exports = require(\"lodash/camelCase\");","module.exports = require(\"lodash/snakeCase\");","module.exports = require(\"core-js/modules/es.object.values.js\");","module.exports = require(\"core-js/modules/es.number.constructor.js\");","module.exports = require(\"core-js/modules/es.string.trim.js\");","module.exports = require(\"core-js/modules/es.string.match.js\");","module.exports = require(\"core-js/modules/es.array.map.js\");","module.exports = require(\"twilsock\");","import mergeWith from \"lodash/mergeWith\";\nimport { ErrorCode, ErrorSeverity, FlexSdkError } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { assertObject } from \"./assert\";\nimport { DeepPartial } from \"./DeepPartial\";\n\nexport function mergeUserOptions<T>(options: T, userOptions?: DeepPartial<T>): void {\n    if (typeof userOptions !== \"undefined\") {\n        assertObject(userOptions, \"userOptions\");\n    }\n\n    \n    const customMerger = (\n        value: undefined | Object,\n        _srcValue: never,\n        key: string,\n        \n        _object: object,\n        \n        _source: never\n    ) => {\n        const objectHasKey = Object.prototype.hasOwnProperty.call(_object, key);\n        \n        const objectHasGetterForKey = Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(_object), key);\n        if (!objectHasKey && !objectHasGetterForKey) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            \n            throw new FlexSdkError(ErrorCode.InvalidParams, metadata, `${key} is not a valid property`);\n        }\n\n        return undefined; \n    };\n\n    mergeWith(options, userOptions, customMerger);\n}\n","module.exports = require(\"lodash/mergeWith\");","import { interfaces } from \"inversify\";\nimport { AccountConfig, AccountConfigData, accountConfigRTTI, configDataContainerRTTI } from \"~/modules/config\";\nimport { ConfigDataContainer } from \"~/modules/config/AccountConfig/ConfigDataContainer\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { ThrowErrorFunction, throwErrorRTTI, ErrorSeverity, ErrorCode } from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\n\n\n\nexport type AccountConfigProvider = (sessionToken: string) => Promise<AccountConfig>;\n\n\n\n\nexport const accountConfigProvider =\n    (container: interfaces.Container) =>\n    async (sessionToken: string): Promise<AccountConfig> => {\n        const dataContainer = container.get<ConfigDataContainer<AccountConfigData>>(configDataContainerRTTI);\n        const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n        const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n        const storage = container.get<LocalStorage>(localStorageRTTI);\n        const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n\n        let configData: AccountConfigData;\n\n        try {\n            configData = await configurationService.fetchConfiguration({ token: sessionToken });\n            storage.setCachedItem(LocalStorageKeys.AccountConfig, configData);\n        } catch (err) {\n            const cachedConfig = storage.getCachedItem<AccountConfigData>(LocalStorageKeys.AccountConfig);\n\n            if (cachedConfig === undefined) {\n                const message = `Failed to fetch account configuration: ${err}. No cache found.`;\n                const errorCode = err.code || ErrorCode.Unknown;\n                return throwError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n            }\n\n            logger.warn(`Failed to fetch account configuration: ${err}. Using cache instead`);\n            configData = cachedConfig;\n        }\n        dataContainer.set(configData);\n\n        const accountConfig = container.get<AccountConfig>(accountConfigRTTI);\n        return accountConfig;\n    };\n","import { interfaces } from \"inversify\";\nimport { RuntimeDomainOption, AccountSidOption, PublicConfig } from \"~/modules/config\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { XOR } from \"~/utils/utilityTypes\";\nimport { ConfigurationService } from \"~/backend/generated/Configuration/api/configuration.serviceInterface\";\nimport { PublicConfigResponse } from \"~/backend/generated/Configuration/model/publicConfigResponse\";\nimport { configurationServiceRTTI } from \"~/backend/backend.rtti\";\nimport { mapRootKeysToCamelCase } from \"~/utils/mapKeys\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\n\nconst TWILIO_DOMAIN = \".twil.io\";\nconst RUNTIME_DOMAIN_REGEXP = /^([a-z]+-[a-z]+-\\d+)$/;\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\nfunction sanitizeRuntimeDomain(domain: string): string {\n    let sanitizedDomain = domain.trim();\n\n    if (sanitizedDomain.endsWith(\"/\")) {\n        sanitizedDomain = sanitizedDomain.replace(/\\/$/, \"\");\n    }\n\n    if (!sanitizedDomain.endsWith(TWILIO_DOMAIN)) {\n        const parsedRuntimeDomain = sanitizedDomain.match(RUNTIME_DOMAIN_REGEXP);\n        if (parsedRuntimeDomain && parsedRuntimeDomain[1]) {\n            sanitizedDomain += TWILIO_DOMAIN;\n        }\n    }\n\n    return sanitizedDomain;\n}\n\nfunction isAccountSidOption(option: XOR<AccountSidOption, RuntimeDomainOption>): option is AccountSidOption {\n    return !!(option as AccountSidOption).accountSid;\n}\n\nfunction getPublicConfigQueryParam(option: XOR<AccountSidOption, RuntimeDomainOption>): {\n    paramName: \"AccountSid\" | \"RuntimeDomain\";\n    paramValue: string;\n} {\n    if (isAccountSidOption(option)) {\n        const accountSid = (option as AccountSidOption).accountSid;\n        return { paramName: \"AccountSid\", paramValue: accountSid };\n    }\n\n    const runtimeDomain = (option as RuntimeDomainOption).runtimeDomain;\n    const sanitizedDomain = sanitizeRuntimeDomain(runtimeDomain);\n    return { paramName: \"RuntimeDomain\", paramValue: sanitizedDomain };\n}\n\nexport async function getPublicConfig(\n    container: interfaces.Container,\n    option: XOR<AccountSidOption, RuntimeDomainOption>\n): Promise<PublicConfig> {\n    const configurationService = container.get<ConfigurationService>(configurationServiceRTTI);\n    const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n    const storage = container.get<LocalStorage>(localStorageRTTI);\n    const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n    const queryParam = getPublicConfigQueryParam(option);\n    let responseData: PublicConfigResponse;\n\n    try {\n        responseData = await configurationService.fetchPublicConfiguration(queryParam.paramName, queryParam.paramValue);\n        storage.setCachedItem(LocalStorageKeys.PublicConfig, responseData);\n    } catch (err) {\n        const cachedConfig = storage.getCachedItem<PublicConfigResponse>(LocalStorageKeys.PublicConfig);\n\n        if (cachedConfig === undefined) {\n            const message = `Failed to fetch public configuration: ${err}. No cache found.`;\n            const errorCode = err.code || ErrorCode.Unknown;\n            return throwError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n        }\n\n        logger.warn(`Failed to fetch public configuration: ${err}. Using cache instead`);\n        responseData = cachedConfig;\n    }\n\n    if (!(responseData && responseData.configurations && responseData.configurations.length)) {\n        throwError(\n            ErrorCode.SDK,\n            { ...metadata, severity: ErrorSeverity.Error },\n            \"Invalid response from public configuration endpoint\"\n        );\n    }\n\n    return mapRootKeysToCamelCase(responseData.configurations[0]) as PublicConfig;\n}\n","module.exports = require(\"lodash/mapKeys\");","module.exports = require(\"lodash/transform\");","import { interfaces } from \"inversify\";\nimport { FeaturesConfig } from \"../FeaturesProvider\";\nimport { LoggerFactory, loggerFactoryRTTI, LoggerName } from \"~/modules/logger\";\nimport { ThrowErrorFunction, throwErrorRTTI, ErrorSeverity, ErrorCode } from \"~/modules/error\";\nimport { LocalStorage, localStorageRTTI, LocalStorageKeys } from \"~/modules/storage\";\nimport { featuresServiceRTTI } from \"~/backend/backend.rtti\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { FeaturesService } from \"~/backend/generated/Features/api/features.serviceInterface\";\n\nconst metadata = {\n    module: extractModuleFromPath(__dirname),\n    eventSource: extractFileNameFromPath(__filename)\n};\n\nexport const featuresProviderImpl =\n    ({ container }: interfaces.Context) =>\n    async (): Promise<FeaturesConfig> => {\n        const featuresService = container.get<FeaturesService>(featuresServiceRTTI);\n        const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n        const storage = container.get<LocalStorage>(localStorageRTTI);\n        const logger = container.get<LoggerFactory>(loggerFactoryRTTI)(LoggerName.Config);\n\n        let featuresData: FeaturesConfig;\n\n        try {\n            featuresData = await featuresService.fetchFeatures();\n            storage.setCachedItem(LocalStorageKeys.FeaturesConfig, featuresData);\n        } catch (err) {\n            const cachedFeatures = storage.getCachedItem<FeaturesConfig>(LocalStorageKeys.FeaturesConfig);\n\n            if (cachedFeatures === undefined) {\n                const message = `Failed to fetch features: ${err}. No cache found.`;\n                const errorCode = err.code || ErrorCode.Unknown;\n                return throwError(errorCode, { ...metadata, severity: ErrorSeverity.Error }, message);\n            }\n\n            logger.warn(`Failed to fetch features: ${err}. Using cache instead`);\n            featuresData = cachedFeatures;\n        }\n\n        return featuresData;\n    };\n","import { injectable, inject } from \"inversify\";\nimport loglevel from \"loglevel\";\nimport { version } from \"package.json\";\nimport { eventEmitterRTTI, Emitter } from \"~/modules/events\";\nimport { TwilsockClient, TwilsockClientEvent } from \"~/modules/websocket/TwilsockClient/TwilsockClient\";\nimport { productIdRTTI, twilsockClientFactoryRTTI } from \"~/modules/websocket/websocket.rtti\";\nimport { Headers, Twilsock, TwilsockResult, TwilsockEvent } from \"~/modules/websocket\";\nimport {\n    ErrorCode,\n    FlexSdkError,\n    throwErrorRTTI,\n    throwErrorFromErrorResponseRTTI,\n    ThrowErrorFunction,\n    ThrowErrorFromErrorResponseFunction,\n    InternalError,\n    ErrorSeverity\n} from \"~/modules/error\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, LoggerName, LoglevelMethodName } from \"~/modules/logger\";\nimport { environmentConfigRTTI, EnvironmentConfig } from \"~/modules/config\";\nimport { ClientOptions, clientOptionsRTTI } from \"~/modules/client\";\nimport { retry } from \"~/utils/retry/retry\";\nimport { TwilsockClientFactory } from \"~/modules/websocket/TwilsockClientFactory/TwilsockClientFactory\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { DeepPartial } from \"~/utils/DeepPartial\";\nimport { isTwilsockReplyError, TwilsockReplyError } from \"~/modules/websocket/Twilsock/TwilsockReplyError\";\n\nconst FLEX_SDK_NAME = \"flex-sdk\";\nconst FLEX_SDK_PLATFORM = \"JS\";\n\n@injectable()\nexport class TwilsockImpl implements Twilsock {\n    readonly #productId: string;\n\n    readonly #twilsockClientFactory: TwilsockClientFactory;\n\n    \n    \n    private twilsockClient?: TwilsockClient;\n\n    readonly #logger: Logger;\n\n    readonly #environmentConfig: EnvironmentConfig;\n\n    readonly #clientOptions: DeepPartial<ClientOptions>;\n\n    readonly #emitter: Emitter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    readonly #throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction;\n\n    constructor(\n        @inject(twilsockClientFactoryRTTI) twilsockClientFactory: TwilsockClientFactory,\n        @inject(productIdRTTI) productId: string,\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory,\n        @inject(environmentConfigRTTI) environmentConfig: EnvironmentConfig,\n        @inject(clientOptionsRTTI) clientOptions: DeepPartial<ClientOptions>,\n        @inject(eventEmitterRTTI) emitter: Emitter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction,\n        @inject(throwErrorFromErrorResponseRTTI) throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction\n    ) {\n        this.#twilsockClientFactory = twilsockClientFactory;\n        this.#productId = productId;\n        this.#logger = getLogger(LoggerName.Twilsock);\n        this.#logger.debug(\"Twilsock constructed\");\n        this.#environmentConfig = environmentConfig;\n        this.#clientOptions = clientOptions;\n        this.#emitter = emitter;\n\n        this.#throwError = throwError;\n        this.#throwErrorFromErrorResponse = throwErrorFromErrorResponse;\n    }\n\n    async connect(token: string): Promise<void> {\n        if (this.twilsockClient) {\n            throw new InternalError(\"Twilsock connection already exists\");\n        }\n        const clientOptions = {\n            region: this.#clientOptions.region || this.#environmentConfig.region,\n            clientMetadata: {\n                type: FLEX_SDK_NAME,\n                sdk: FLEX_SDK_PLATFORM,\n                sdkv: version,\n                app: this.#clientOptions.appName,\n                appv: this.#clientOptions.appVersion\n            }\n        };\n        this.twilsockClient = this.#twilsockClientFactory(token, this.#productId, clientOptions);\n        this.#proxyEventsFromTwilsockClient();\n        this.#proxyLogsFromTwilsockClient();\n        this.twilsockClient.connect();\n        await this.#waitUntilConnectedOrRejected();\n    }\n\n    #proxyTwilsockClientEvent = (event: TwilsockClientEvent, alias: TwilsockEvent) => {\n        this.getRawTwilsockClient().on(event, (...args: unknown[]) => this.#emitter.emit(alias, ...args));\n    };\n\n    #proxyEventsFromTwilsockClient = () => {\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.TokenExpired, TwilsockEvent.TokenExpired);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.TokenAboutToExpire, TwilsockEvent.TokenAboutToExpire);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.StateChanged, TwilsockEvent.StateChanged);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.Connected, TwilsockEvent.Connected);\n        this.#proxyTwilsockClientEvent(TwilsockClientEvent.Disconnected, TwilsockEvent.Disconnected);\n        this.#listenAndEmitConnectionError();\n    };\n\n    #proxyLogsFromTwilsockClient = () => {\n        const twilsockLogger = loglevel.getLogger(\"twilsock\");\n        twilsockLogger.methodFactory =\n            (methodName: LoglevelMethodName) =>\n            (...messages: unknown[]) => {\n                return this.#logger[methodName](...messages);\n            };\n        twilsockLogger.setLevel(\"trace\");\n    };\n\n    #listenAndEmitConnectionError = (): void => {\n        this.getRawTwilsockClient().on(TwilsockClientEvent.ConnectionError, ({ errorCode, metadata, message }) => {\n            const flexError = new FlexSdkError(errorCode || ErrorCode.TwilsockConnectionError, metadata, message);\n            this.#emitter.emit(TwilsockEvent.ConnectionError, flexError);\n        });\n    };\n\n    #isConnectionError = (error: Error): boolean => {\n        return error instanceof FlexSdkError && error.code === ErrorCode.TwilsockConnectionError;\n    };\n\n    #isTooManyRequestsError = (error: Error): boolean => {\n        const HTTP_STATUS_CODE_TOO_MANY_REQUESTS = 429;\n\n        return (\n            isTwilsockReplyError(error) &&\n            (error as TwilsockReplyError).reply.status.code === HTTP_STATUS_CODE_TOO_MANY_REQUESTS\n        );\n    };\n\n    #isServerError = (error: Error): boolean => {\n        const HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;\n\n        return (\n            isTwilsockReplyError(error) &&\n            (error as TwilsockReplyError).reply.status.code >= HTTPS_STATUS_CODE_INTERNAL_SERVER_ERROR\n        );\n    };\n\n    #retryOnTooManyErrorOrConnectionErrorOrServerError = (error: Error): boolean => {\n        return this.#isTooManyRequestsError(error) || this.#isServerError(error) || this.#isConnectionError(error);\n    };\n\n    #updateTokenOnce = async (token: string): Promise<void> => {\n        if (!this.twilsockClient) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n\n            this.#throwError(ErrorCode.InvalidState, metadata, \"no twilsock client\");\n        } else {\n            await this.twilsockClient.updateToken(token);\n            this.#emitter.emit(TwilsockEvent.TokenUpdated, token);\n        }\n    };\n\n    async updateToken(token: string): Promise<void> {\n        try {\n            await retry<void>({\n                functionToRetry: () => this.#updateTokenOnce(token),\n                retryCondition: this.#retryOnTooManyErrorOrConnectionErrorOrServerError,\n                logger: this.#logger\n            });\n        } catch (error) {\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: \"update Twilsock token\"\n            };\n\n            this.#throwErrorFromErrorResponse(error, metadata);\n        }\n    }\n\n    #waitUntilConnectedOrRejected = (): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            if (this.getRawTwilsockClient().isConnected) {\n                resolve();\n                return;\n            }\n\n            const successHandler = () => {\n                return resolve();\n            };\n\n            const connectionErrorHandler = (error: FlexSdkError) => {\n                return reject(error);\n            };\n\n            const removeConnectionListeners = () => {\n                this.removeListener(TwilsockEvent.Connected, successHandler);\n                this.removeListener(TwilsockEvent.ConnectionError, connectionErrorHandler);\n            };\n\n            this.addListener(TwilsockEvent.Connected, () => {\n                removeConnectionListeners();\n                successHandler();\n            });\n            this.addListener(TwilsockEvent.ConnectionError, (error: FlexSdkError) => {\n                removeConnectionListeners();\n                connectionErrorHandler(error);\n            });\n        });\n    };\n\n    getRawTwilsockClient(): TwilsockClient {\n        if (!this.twilsockClient) {\n            throw new InternalError(\"Twilsock hasn't been initialized\");\n        }\n        return this.twilsockClient;\n    }\n\n    async post<T>(url: string, headers: Headers, body: object): Promise<TwilsockResult<T>> {\n        try {\n            return await retry<TwilsockResult<T>>({\n                functionToRetry: () => this.getRawTwilsockClient().post(url, headers, body),\n                retryCondition: this.#retryOnTooManyErrorOrConnectionErrorOrServerError,\n                logger: this.#logger\n            });\n        } catch (error) {\n            const code: number = error.body?.code || ErrorCode.SDK;\n            const message: string = error.body?.message || error.message;\n            const metadata = {\n                module: extractModuleFromPath(__dirname),\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n\n            return this.#throwError(code, metadata, message, error);\n        }\n    }\n\n    async destroy(): Promise<void> {\n        if (!this.twilsockClient) {\n            return;\n        }\n        const twilsockClient = this.twilsockClient;\n        const connectionDestroyed = new Promise((resolve) => {\n            twilsockClient.on(TwilsockClientEvent.Disconnected, resolve);\n        });\n        await twilsockClient.disconnect();\n        await connectionDestroyed;\n\n        \n        \n        delete this.twilsockClient;\n        this.#emitter.removeAllListeners();\n    }\n\n    addListener(eventName: TwilsockEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.on(eventName, listener);\n        return this;\n    }\n\n    removeListener(eventName: TwilsockEvent, listener: (...args: unknown[]) => void): this {\n        this.#emitter.removeListener(eventName, listener);\n        return this;\n    }\n\n    isConnected(): boolean {\n        if (!this.twilsockClient) {\n            return false;\n        }\n\n        return this.getRawTwilsockClient().isConnected;\n    }\n}\n","import { interfaces } from \"inversify\";\n\nimport { Role } from \"~/modules/auth\";\nimport { Session, sessionRTTI } from \"~/modules/session\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nexport const requiredRole = (container: interfaces.Container) => (role: Role) => {\n    return function decorator(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        const session = container.get<Session>(sessionRTTI);\n\n        \n        descriptor.value = function wrappedMethod(...args: Array<unknown>) {\n            const currentRoles = session.roles;\n            if (!currentRoles.includes(role)) {\n                const wrongRole: string = currentRoles.length ? currentRoles.toString() : \"no role\";\n\n                const metadata = {\n                    module: extractModuleFromPath(__dirname),\n                    severity: ErrorSeverity.Error,\n                    source: extractFileNameFromPath(__filename)\n                };\n                const throwError = container.get<ThrowErrorFunction>(throwErrorRTTI);\n                throwError(ErrorCode.Forbidden, metadata, `Expected the role ${role}, but got ${wrongRole} instead.`);\n            }\n\n            const result = originalMethod.apply(this, args);\n            return result;\n        };\n    };\n};\n","\n\n\n\n\n\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    \n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    \n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                \n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    \n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                \n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    \n    \n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; \n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    \n\n    function replaceLoggingMethods(level, loggerName) {\n        \n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        \n        this.log = this.debug;\n    }\n\n    \n    \n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    \n    \n    function defaultMethodFactory(methodName, level, loggerName) {\n        \n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          \n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          \n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          \n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          \n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      \n\n\n\n\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  \n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      \n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    \n\n\n\n\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    \n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    \n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import { injectable, inject } from \"inversify\";\nimport { TelemetryProcessor } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessor\";\nimport { TelemetryProcessingResult } from \"~/modules/telemetry/TelemetryProcessor/TelemetryProcessingResult\";\nimport { TelemetryEvent } from \"~/modules/telemetry\";\nimport { Logger, loggerFactoryRTTI, LoggerFactory, TelemetryLoggerName } from \"~/modules/logger\";\nimport { toSdkBackendEvents } from \"./toSdkBackendEvent\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { ProcessingStats } from \"~/backend/generated/Telemetry/model/processingStats\";\nimport { TelemetryService } from \"~/backend/generated/Telemetry/api/telemetry.serviceInterface\";\nimport { telemetryServiceRTTI } from \"~/backend/backend.rtti\";\nimport {\n    ErrorCode,\n    ErrorSeverity,\n    FlexSdkError,\n    ThrowErrorFromErrorResponseFunction,\n    throwErrorFromErrorResponseRTTI,\n    ThrowErrorFunction,\n    throwErrorRTTI\n} from \"~/modules/error\";\nimport { assertNotEmptyString } from \"~/utils/assert\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\nimport { RateLimiter, RateLimiterFactory, rateLimiterFactoryRTTI } from \"~/modules/ratelimiter\";\nimport { TelemetryRateLimiterOptions } from \"~/modules/telemetry/TelemetryProcessor/TelemetryRateLimiterOptions\";\nimport { telemetryRateLimiterOptionsRTTI } from \"~/modules/telemetry/telemetry.rtti\";\n\nconst TELEMETRY_DISABLED_HTTP_STATUS_CODE = 409;\nconst MAX_NUMBER_OF_EVENTS_IN_BATCH = 50;\n\n@injectable()\nexport class TwilioTelemetryProcessor implements TelemetryProcessor {\n    readonly #logger: Logger;\n\n    readonly #telemetryService: TelemetryService;\n\n    #isTelemetryDisabled = false;\n\n    readonly #throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    readonly #rateLimiterFactory: RateLimiterFactory;\n\n    readonly #rateLimiterOptions: TelemetryRateLimiterOptions;\n\n    constructor(\n        @inject(loggerFactoryRTTI) getLogger: LoggerFactory<TelemetryLoggerName>,\n        @inject(telemetryServiceRTTI) telemetryService: TelemetryService,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction,\n        @inject(throwErrorFromErrorResponseRTTI) throwErrorFromErrorResponse: ThrowErrorFromErrorResponseFunction,\n        @inject(rateLimiterFactoryRTTI) rateLimiterFactory: RateLimiterFactory,\n        @inject(telemetryRateLimiterOptionsRTTI) rateLimiterOptions: TelemetryRateLimiterOptions\n    ) {\n        this.#logger = getLogger(TelemetryLoggerName.TelemetryProcessor);\n        this.#telemetryService = telemetryService;\n        this.#throwError = throwError;\n        this.#throwErrorFromErrorResponse = throwErrorFromErrorResponse;\n        this.#rateLimiterFactory = rateLimiterFactory;\n        this.#rateLimiterOptions = rateLimiterOptions;\n    }\n\n    async processEvents(\n        payloadType: string,\n        groupName?: string,\n        sessionData?: object,\n        ...events: TelemetryEvent[]\n    ): Promise<TelemetryProcessingResult> {\n        assertNotEmptyString(payloadType, \"payload type\");\n\n        if (typeof groupName !== \"undefined\") {\n            assertNotEmptyString(groupName, \"group name\");\n        }\n\n        events.forEach(({ eventName, eventSource }) => {\n            assertNotEmptyString(eventName, \"event name\");\n            if (typeof eventSource !== \"undefined\") {\n                assertNotEmptyString(eventSource, \"event source\");\n            }\n        });\n\n        if (this.#isTelemetryDisabled) {\n            this.#logger.trace(\"Events not sent: telemetry disabled\");\n            return {\n                eventsNotProcessed: events.length,\n                eventsSucceeded: 0,\n                eventsFailed: 0\n            };\n        }\n        this.#logger.debug(\"common attributes:\", sessionData);\n        const backendEvents = toSdkBackendEvents(this.#throwError, payloadType, groupName, sessionData, ...events);\n\n        let eventsSucceeded = 0;\n        let eventsFailed = 0;\n\n        if (backendEvents.length) {\n            let backendEventsBatch;\n            const arrayOfPromises = [];\n            for (let i = 0; i < backendEvents.length; i += MAX_NUMBER_OF_EVENTS_IN_BATCH) {\n                backendEventsBatch = backendEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_IN_BATCH);\n                arrayOfPromises.push(this.#sendTelemetryEvents(payloadType, ...backendEventsBatch));\n            }\n            const batchResults = await Promise.all(arrayOfPromises);\n            eventsSucceeded = batchResults.reduce((acc, batch) => acc + batch.number_of_successful_events, 0);\n            eventsFailed = batchResults.reduce((acc, batch) => acc + batch.number_of_failed_events, 0);\n        }\n\n        const eventsNotProcessed = events.length - eventsSucceeded - eventsFailed;\n\n        return {\n            eventsSucceeded,\n            eventsFailed,\n            eventsNotProcessed\n        };\n    }\n\n    #sendTelemetryEvents = async (\n        payloadType: string,\n        ...events: TelemetryBackendEvent[]\n    ): Promise<ProcessingStats> => {\n        this.#logger.debug(\"Sending\", events.length, \"telemetry events\");\n        this.#logger.trace(\"Events\", events);\n        let stats: ProcessingStats = {\n            number_of_successful_events: 0,\n            number_of_failed_events: 0\n        };\n\n        try {\n            const rateLimiter = this.#getRateLimiter(payloadType);\n            rateLimiter.check();\n\n            const { body } = await this.#telemetryService.postTelemetryEvents({ events });\n\n            if (body) {\n                stats = body;\n                this.#logger.debug(\"Telemetry sent successfully\");\n            }\n        } catch (error) {\n            if (\n                error instanceof FlexSdkError &&\n                [ErrorCode.TooManySDKRequests, ErrorCode.TemporarilyDisabled].includes(error.code)\n            ) {\n                \n                return stats;\n            }\n\n            const httpErrorCode = error.wrappedError?.status;\n            if (httpErrorCode !== TELEMETRY_DISABLED_HTTP_STATUS_CODE) {\n                const metadata = {\n                    module: extractModuleFromPath(__dirname),\n                    severity: ErrorSeverity.Error,\n                    eventSource: extractFileNameFromPath(__filename)\n                };\n\n                this.#throwErrorFromErrorResponse(error, metadata);\n            }\n            this.#logger.warn(\"Telemetry is disabled for this account\");\n            this.#isTelemetryDisabled = true;\n        }\n\n        return stats;\n    };\n\n    #getRateLimiter = (name: string): RateLimiter => {\n        return this.#rateLimiterFactory({\n            ...this.#rateLimiterOptions,\n            name\n        });\n    };\n}\n","import { TelemetryEvent } from \"~/modules/telemetry/\";\nimport { TelemetryBackendEvent } from \"~/backend/generated/Telemetry/model/telemetryBackendEvent\";\nimport { mapAllKeysToSnakeCase } from \"~/utils/mapKeys\";\nimport { Payload } from \"~/backend/generated/Telemetry/model/payload\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction } from \"~/modules/error\";\nimport { extractFileNameFromPath, extractModuleFromPath } from \"~/utils/extractFromPath\";\n\nfunction instanceOfPayload(object: object): object is Payload {\n    return (\n        Object.prototype.hasOwnProperty.call(object, \"event_name\") &&\n        Object.prototype.hasOwnProperty.call(object, \"client_timestamp\")\n    );\n}\n\nfunction toBackendEvent(\n    throwError: ThrowErrorFunction,\n    payloadType: string,\n    event: TelemetryEvent,\n    groupName?: string,\n    sessionData?: object\n): TelemetryBackendEvent {\n    const mappedSessionData = sessionData === undefined ? {} : mapAllKeysToSnakeCase(sessionData);\n    const mappedEventData = {\n        ...mapAllKeysToSnakeCase(event),\n        client_timestamp: new Date().toISOString(), \n        event_group: groupName \n    };\n    if (instanceOfPayload(mappedEventData)) {\n        return {\n            payload_type: payloadType, \n            payload: {\n                ...mappedEventData,\n                ...mappedSessionData\n            }\n        };\n    }\n    const metadata = {\n        module: extractModuleFromPath(__dirname),\n        severity: ErrorSeverity.Error,\n        source: extractFileNameFromPath(__filename)\n    };\n    return throwError(ErrorCode.InvalidParams, metadata, \"Telemetry event has missing fields\");\n}\n\nexport function toSdkBackendEvents(\n    throwError: ThrowErrorFunction,\n    payloadType: string,\n    groupName?: string,\n    sessionData?: object,\n    ...events: TelemetryEvent[]\n): TelemetryBackendEvent[] {\n    return events.map((event: TelemetryEvent) => {\n        return toBackendEvent(throwError, payloadType, event, groupName, sessionData);\n    });\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { twilsockAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { TwilsockAdapter } from \"~/backend/TwilsockAdapter/TwilsockAdapter\";\nimport { TwilsockResult } from \"~/modules/websocket\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { Events } from \"../model/events\";\nimport { ProcessingStats } from \"../model/processingStats\";\n\nimport { TelemetryService } from \"./telemetry.serviceInterface\";\n\n@injectable()\nexport class TelemetryServiceImpl implements TelemetryService {\n    private basePath: string = \"http://flex-sdk.twilio.com/v1\";\n\n    private twilsockAdapter: TwilsockAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(twilsockAdapterRTTI) twilsockAdapter: TwilsockAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.twilsockAdapter = twilsockAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n    public async postTelemetryEvents(events: Events): Promise<TwilsockResult<ProcessingStats>> {\n        if (events === null || events === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter events was null or undefined when calling postTelemetryEvents.\"\n            );\n        }\n\n        const response = await this.twilsockAdapter.post<ProcessingStats>(`${this.basePath}/Telemetry/Events`, events);\n        return response;\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { AccountConfigData } from \"../model/accountConfigData\";\nimport { PublicConfigResponse } from \"../model/publicConfigResponse\";\n\nimport { ConfigurationService } from \"./configuration.serviceInterface\";\n\n@injectable()\nexport class ConfigurationServiceImpl implements ConfigurationService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n    public async fetchConfiguration(options?: object): Promise<AccountConfigData> {\n        const response = await this.httpAdapter.get<AccountConfigData>(\n            `https://flex-api[environment].twilio.com/v1/Configuration`,\n            AuthenticationMethod.Basic,\n            options\n        );\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async fetchPublicConfiguration(\n        queryParamName: \"AccountSid\" | \"RuntimeDomain\",\n        queryParamValue: string\n    ): Promise<PublicConfigResponse> {\n        if (queryParamName === null || queryParamName === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter queryParamName was null or undefined.\"\n            );\n        }\n        if (queryParamValue === null || queryParamValue === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter queryParamValue was null or undefined.\"\n            );\n        }\n        const response = await this.httpAdapter.get<PublicConfigResponse>(\n            `https://flex-api[environment].twilio.com/v1/Configuration/Public?${encodeURIComponent(\n                String(queryParamName)\n            )}=${encodeURIComponent(String(queryParamValue))}`,\n            undefined\n        );\n        const processedResponse = convertDateStringValuesToDate<PublicConfigResponse>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n    public async updateConfiguration(accountConfigData: Partial<AccountConfigData>): Promise<AccountConfigData> {\n        if (accountConfigData === null || accountConfigData === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter accountConfigData was null or undefined.\"\n            );\n        }\n        const response = await this.httpAdapter.post<AccountConfigData>(\n            `https://flex-api[environment].twilio.com/v1/Configuration`,\n            AuthenticationMethod.Basic,\n            accountConfigData\n        );\n        const processedResponse = convertDateStringValuesToDate<AccountConfigData>(response);\n        return processedResponse;\n    }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\nimport { inject, injectable } from \"inversify\";\nimport { ErrorCode, ErrorSeverity, ThrowErrorFunction, throwErrorRTTI } from \"~/modules/error\";\nimport { httpAdapterRTTI } from \"~/backend/backend.rtti\";\nimport { HttpAdapter } from \"~/backend/HttpAdapter/HttpAdapter\";\nimport { AuthenticationMethod } from \"~/backend/HttpAdapter/authenticationMethods\";\nimport { convertDateStringValuesToDate } from \"~/utils/processHttpAdapterResponse\";\nimport { extractFileNameFromPath } from \"~/utils/extractFromPath\";\n\nimport { IdpUrlResponse } from \"../model/idpUrlResponse\";\nimport { SSOLoginRequestBody } from \"../model/sSOLoginRequestBody\";\nimport { Token } from \"../model/token\";\nimport { TokenData } from \"../model/tokenData\";\nimport { TokenRefreshResult } from \"../model/tokenRefreshResult\";\n\nimport { FederatedAuthService } from \"./federatedAuth.serviceInterface\";\n\n@injectable()\nexport class FederatedAuthServiceImpl implements FederatedAuthService {\n    private httpAdapter: HttpAdapter;\n\n    readonly #throwError: ThrowErrorFunction;\n\n    constructor(\n        @inject(httpAdapterRTTI) httpAdapter: HttpAdapter,\n        @inject(throwErrorRTTI) throwError: ThrowErrorFunction\n    ) {\n        this.httpAdapter = httpAdapter;\n        this.#throwError = throwError;\n    }\n\n    \n\n\n\n\n\n\n    public async getIdpUrl(accountSid: string, sSOLoginRequestBody: SSOLoginRequestBody): Promise<IdpUrlResponse> {\n        if (accountSid === null || accountSid === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (sSOLoginRequestBody === null || sSOLoginRequestBody === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(\n                ErrorCode.InvalidParams,\n                metadata,\n                \"Required parameter sSOLoginRequestBody was null or undefined.\"\n            );\n        }\n        const response = await this.httpAdapter.post<IdpUrlResponse>(\n            `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(String(accountSid))}/authenticate`,\n            undefined,\n            sSOLoginRequestBody\n        );\n        const processedResponse = convertDateStringValuesToDate<IdpUrlResponse>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async refreshToken(accountSid: string, token: Token): Promise<TokenRefreshResult> {\n        if (accountSid === null || accountSid === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (token === null || token === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter token was null or undefined.\");\n        }\n        const response = await this.httpAdapter.post<TokenRefreshResult>(\n            `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(String(accountSid))}/Tokens/refresh`,\n            undefined,\n            token\n        );\n        const processedResponse = convertDateStringValuesToDate<TokenRefreshResult>(response);\n        return processedResponse;\n    }\n\n    \n\n\n\n\n\n\n    public async validateToken(accountSid: string, token: Token, options?: object): Promise<TokenData> {\n        if (accountSid === null || accountSid === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter accountSid was null or undefined.\");\n        }\n        if (token === null || token === undefined) {\n            const metadata = {\n                module: \"backend\",\n                severity: ErrorSeverity.Error,\n                source: extractFileNameFromPath(__filename)\n            };\n            this.#throwError(ErrorCode.InvalidParams, metadata, \"Required parameter token was null or undefined.\");\n        }\n        const response = await this.httpAdapter.post<TokenData>(\n            `https://iam[environment].twilio.com/v1/Accounts/${encodeURIComponent(String(accountSid))}/Tokens/validate`,\n            AuthenticationMethod.Basic,\n            token,\n            options\n        );\n        const processedResponse = convertDateStringValuesToDate<TokenData>(response);\n        return processedResponse;\n    }\n}\n","import { ErrorCode, FlexSdkError } from \"~/modules/error\";\n\nexport const defaultRetryConditionOnFlexSdkError = (flexSdkError: FlexSdkError): boolean => {\n    const retryOnErrors = [ErrorCode.Unknown, ErrorCode.TooManyRequests, ErrorCode.NetworkError];\n\n    return retryOnErrors.includes(flexSdkError.code);\n};\n","module.exports = require(\"reflect-metadata\");","import { Container, interfaces } from \"inversify\";\n\nexport function createPureFactory<T extends (...args: unknown[]) => unknown>(containerCreator: () => Container) {\n    return (serviceIdentifier: interfaces.ServiceIdentifier<T>): T => {\n        const factory = (...args: unknown[]): unknown => {\n            const container = containerCreator();\n            const provider = container.get<T>(serviceIdentifier);\n            return provider(...args);\n        };\n        return factory as T;\n    };\n}\n","import { version as packageVersion } from \"package.json\";\nimport { createContainer, getSingletonContainer } from \"~/ioc.config\";\nimport {\n    publicConfigProviderRTTI,\n    PublicConfigProvider,\n    AccountConfigDataGetter,\n    getAccountConfigRTTI\n} from \"~/modules/config\";\nimport { clientProviderRTTI, ClientProvider } from \"~/modules/client\";\nimport { authenticatorFactoryRTTI, twilioIdpUrlRTTI, AuthenticatorFactory, TwilioIdpUrlFunction } from \"~/modules/auth\";\nimport { LoggerFactory, loggerFactoryRTTI } from \"~/modules/logger\";\nimport { createPureFactory } from \"~/ioc.helper\";\nimport { ClearCache } from \"~/modules/storage\";\nimport { clearCacheRTTI } from \"~/modules/storage/storage.rtti\";\n\nexport type { SessionOptions } from \"./modules/session\";\nexport type { DeepPartial } from \"./utils/DeepPartial\";\nexport type { Without, XOR } from \"./utils/utilityTypes\";\nexport type {\n    AccountConfig,\n    AccountConfigProvider,\n    AccountConfigKeys,\n    AccountConfigData,\n    IntegrationsConfig,\n    OutboundFlows,\n    SkillDefinition,\n    QueueStatsConfiguration,\n    PublicConfig,\n    PublicConfigAttributes,\n    PublicConfigProvider,\n    AccountSidOption,\n    RuntimeDomainOption,\n    TaskQueue,\n    WorkerChannel,\n    DefaultQueueStatsConfiguration,\n    QueueConfiguration,\n    QueueChannelConfiguration,\n    FeaturesConfig,\n    FeaturesList,\n    AccountConfigDataGetter\n} from \"./modules/config\";\nexport type { Logger, LoggerFactory, LoggerOptions, LoggerLevel, LoggerLevelNumbers } from \"./modules/logger\";\nexport { LoggerName } from \"./modules/logger\";\nexport type { Client, ClientProvider, ClientOptions, ClientConfigType } from \"./modules/client\";\nexport { ClientEvent } from \"./modules/client\";\nexport type {\n    Authenticator,\n    AuthenticatorFactory,\n    TwilioIdpUrlFunction,\n    IdpConfig,\n    Role,\n    TokenData,\n    TokenRefreshResult\n} from \"./modules/auth\";\nexport type { EventPublisher } from \"./modules/events\";\nexport type {\n    TelemetryEvent,\n    TelemetryErrorEvent,\n    TelemetryEventGroup,\n    TelemetryClient,\n    TelemetryProcessingResult,\n    TelemetryOptions\n} from \"./modules/telemetry\";\nexport type { ClearCache } from \"~/modules/storage\";\n\n\n\n\n\n\n\nexport const auth = createPureFactory<AuthenticatorFactory>(createContainer)(authenticatorFactoryRTTI);\n\n\n\n\nexport const getLogger = createPureFactory<LoggerFactory<string>>(getSingletonContainer)(loggerFactoryRTTI);\n\n\n\n\nexport const getTwilioIdpUrl = createPureFactory<TwilioIdpUrlFunction>(createContainer)(twilioIdpUrlRTTI);\n\n\n\n\nexport const getPublicConfig = createPureFactory<PublicConfigProvider>(createContainer)(publicConfigProviderRTTI);\n\n\n\n\nexport const getAccountConfig = createPureFactory<AccountConfigDataGetter>(createContainer)(getAccountConfigRTTI);\n\n\n\n\nexport const createClient = createPureFactory<ClientProvider>(createContainer)(clientProviderRTTI);\n\n\n\n\nexport const clearCache = createPureFactory<ClearCache>(createContainer)(clearCacheRTTI);\n\n\n\n\nexport const version: string = packageVersion;\n\nexport type { FlexSdkErrorMetadata } from \"./modules/error\";\nexport { FlexSdkError, ErrorCode, ErrorSeverity } from \"./modules/error\";\n","module.exports = require(\"core-js/modules/es.array.find.js\");","module.exports = require(\"core-js/modules/es.number.is-nan.js\");","module.exports = require(\"core-js/modules/es.string.ends-with.js\");","module.exports = require(\"core-js/modules/es.regexp.constructor.js\");","module.exports = require(\"core-js/modules/es.object.entries.js\");","module.exports = require(\"core-js/modules/es.string.starts-with.js\");"],"sourceRoot":""}