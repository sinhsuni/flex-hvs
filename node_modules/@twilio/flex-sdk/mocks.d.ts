/// <reference types="jest" />
/// <reference types="node" />
import { LogLevelDesc } from 'loglevel';
import { LogLevelNumbers } from 'loglevel';

/**
 * @public
 */
export declare interface AccountConfig {
    get(): AccountConfigData;
    set(config: Partial<AccountConfigData>): Promise<void>;
}

/**
 * Account Configuration Data Response
 * @public
 */
export declare interface AccountConfigData<TUI = any> {
    /**
     * The SID of the Account that created the resource
     */
    accountSid: string;
    /**
     * An object that contains application-specific data
     */
    attributes: object;
    /**
     * Whether call recording is enabled
     */
    callRecordingEnabled: boolean;
    /**
     * The call recording webhook URL
     */
    callRecordingWebhookUrl: string | null;
    /**
     * The SID of the chat service this user belongs to
     */
    chatServiceInstanceSid: string;
    /**
     * An object that contains the CRM attributes
     */
    crmAttributes: object | null;
    /**
     * A list of objects that contain the configurations for the Integrations supported in this configuration
     */
    integrations?: Array<IntegrationsConfig> | null;
    /**
     * The CRM Callback URL
     */
    crmCallbackUrl: string | null;
    /**
     * Whether CRM is present for Flex
     */
    crmEnabled: boolean | null;
    /**
     * The CRM Fallback URL
     */
    crmFallbackUrl: string | null;
    /**
     * The CRM type
     */
    crmType: string | null;
    /**
     * The ISO 8601 date and time in GMT when the Configuration resource was created
     */
    dateCreated: Date;
    /**
     * The ISO 8601 date and time in GMT when the Configuration resource was last updated
     */
    dateUpdated: Date;
    /**
     * The SID of the Messaging service instance
     */
    messagingServiceInstanceSid: string | null;
    /**
     * The URL where the Flex instance is hosted
     */
    runtimeDomain: string;
    /**
     * The SID of the Flex service instance
     */
    flexServiceInstanceSid: string | null;
    /**
     * The list of outbound call flows
     */
    outboundCallFlows: {
        [key: string]: OutboundFlows;
    } | null;
    /**
     * If flex-ui should load plugins
     */
    pluginServiceEnabled: boolean | null;
    /**
     * The plugin service attributes
     */
    pluginServiceAttributes: object | null;
    /**
     * The list of public attributes, which are visible to unauthenticated clients
     */
    publicAttributes: object;
    /**
     * The Flex Service version
     */
    serviceVersion: string | null;
    /**
     * The list of serverless service SIDs
     */
    serverlessServiceSids: Array<string> | null;
    /**
     * The status of the Flex onboarding. Can be: \'ok\', \'inprogress\',\'notstarted\'
     */
    status: string;
    /**
     * The TaskRouter SID of the offline activity
     */
    taskrouterOfflineActivitySid?: string;
    /**
     * The Skill description for TaskRouter workers
     */
    taskrouterSkills?: Array<SkillDefinition>;
    /**
     * The SID of the TaskRouter Target TaskQueue
     */
    taskrouterTargetTaskqueueSid: string;
    /**
     * The SID of the TaskRouter target Workflow
     */
    taskrouterTargetWorkflowSid: string;
    /**
     * The list of TaskRouter TaskQueues
     */
    taskrouterTaskqueues: Array<TaskQueue> | null;
    /**
     * The TaskRouter Worker attributes
     */
    taskrouterWorkerAttributes: {
        [key: string]: object;
    } | null;
    /**
     * The TaskRouter default channel capacities and availability for workers
     */
    taskrouterWorkerChannels: {
        [key: string]: WorkerChannel;
    } | null;
    /**
     * The SID of the TaskRouter Workspace
     */
    taskrouterWorkspaceSid: string;
    /**
     * The object that defines the NPM packages and versions to be used in Hosted Flex
     */
    uiDependencies: {
        [key: string]: string;
    } | null;
    /**
     * The object that describes Flex UI characteristics and settings
     */
    uiAttributes: TUI;
    /**
     * The primary language of the Flex UI
     */
    uiLanguage: string | null;
    /**
     * The Pinned UI version
     */
    uiVersion: string;
    queueStatsConfiguration: QueueStatsConfiguration | null;
    /**
     * The absolute URL of the Configuration resource
     */
    url: string;
}

/**
 * @public
 */
export declare type AccountConfigDataGetter = (sessionToken: string) => Promise<AccountConfigData>;

/**
 * Account config keys
 * Possible keys from AccountConfigData structure
 * @public
 */
export declare type AccountConfigKeys = keyof AccountConfigData;

/**
 * @public
 */
export declare type AccountConfigProvider = (sessionToken: string) => Promise<AccountConfig>;

/**
 * Account sid option
 * @public
 */
export declare interface AccountSidOption {
    /**
     * Account sid
     */
    accountSid: string;
}

/**
 * Authenticator
 * Provides methods for authentication
 *
 * @public
 */
export declare interface Authenticator {
    /**
     * Validates token
     * @param token - token to validate
     * @returns token information if valid
     */
    validateToken(token: string): Promise<TokenData>;
    /**
     * Refreshes token used by the SDK. Only applicable if Flex FA service is used
     * @param token - old token
     * @returns new token information
     */
    refreshToken(token: string): Promise<TokenRefreshResult>;
    /**
     * Returns identity provider url
     * @param config - config options
     * @returns idp url
     */
    getIdpUrl(config: IdpConfig): Promise<string>;
}

/**
 * Builds an Authentication object with the given account sid
 * @param accountSid - Account sid
 *
 * @public
 */
export declare type AuthenticatorFactory = (accountSid: string) => Authenticator;

/**
 * @public
 */
export declare class AuthenticatorMock implements Authenticator {
    constructor(mockOptions: AuthenticatorMockOptions);
    private onAuthenticatorConstructed;
    validateToken: jest.Mock<Promise<TokenData>, []>;
    refreshToken: jest.Mock<Promise<{
        token: string;
        dateExpired: Date;
    }>, [token: string]>;
    getIdpUrl: jest.Mock<Promise<string>, [config: IdpConfig]>;
    setAccountSid: jest.Mock<any, any>;
    $setIdpUrl(url: string): void;
}

/**
 * @public
 */
export declare type AuthenticatorMockFactory = (...params: Parameters<AuthenticatorFactory>) => AuthenticatorMock;

/**
 * @public
 */
export declare type AuthenticatorMockOptions = {
    authenticatorConstructed?: (authenticator: AuthenticatorMock) => void;
    refreshedToken?: string;
};

/**
 * Clear cached values, like Flex SDK configuration stored in Local Storage
 *
 * @public
 */
export declare type ClearCache = () => void;

/**
 * @public
 */
export declare interface Client extends EventPublisher<ClientEvent> {
    readonly config: ClientConfigType;
    readonly roles: Array<Role>;
    readonly token: string;
    destroy(): Promise<void>;
    updateToken(token: string): Promise<void>;
    createTelemetryClient<U extends object>(name: string): TelemetryClient<U>;
}

/**
 * @public
 */
export declare interface ClientConfigType {
    readonly account: AccountConfig;
    fetchFeatures(): Promise<FeaturesConfig>;
}

/**
 * @public
 */
export declare enum ClientEvent {
    TokenExpired = "tokenExpired",
    TokenAboutToExpire = "tokenAboutToExpire",
    TokenUpdated = "tokenUpdated",
    TokenAutoUpdateFailed = "tokenAutoUpdateFailed",
    TokenMaxLifetimeReached = "tokenMaxLifetimeReached",
    ConnectionLost = "connectionLost",
    ConnectionRestored = "connectionRestored",
    Disconnected = "disconnected"
}

/**
 * @public
 */
export declare type ClientMockOptions = {
    accountConfig?: AccountConfig;
};

/**
 * Client options
 * @public
 */
export declare interface ClientOptions {
    /**
     * Session related options
     */
    readonly session: SessionOptions;
    /**
     * Logger related options
     */
    readonly logger: LoggerOptions;
    /**
     * Telemetry related options
     */
    readonly telemetry: TelemetryOptions;
    /**
     * Twilio Region ID, e.g. "us1", "ie1" etc
     */
    region: string;
    /**
     * Name of the app that is using Flex SDK, e.g. "My Custom App"
     */
    appName: string;
    /**
     * Version of the app that is using Flex SDK, e.g. "2.3"
     */
    appVersion: string;
}

/**
 * @public
 */
export declare type ClientProvider = (token: string, userOptions?: DeepPartial<ClientOptions>) => Promise<Client>;

/**
 * @public
 */
export declare type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]> | T[P];
};

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * default configuration
 * @public
 */
export declare interface DefaultQueueStatsConfiguration {
    service_level_threshold?: number;
    short_abandoned_threshold?: number;
    reset_timezone?: string;
    reset_time?: string;
}

/**
 * Error code
 * @public
 */
export declare enum ErrorCode {
    /**
     * PermissionDenied error
     */
    PermissionDeniedError = 20003,
    /**
     * Invalid access token
     */
    InvalidAccessToken = 20101,
    /**
     * Access Token expired or expiration date invalid
     */
    AccessTokenExpired = 20104,
    /**
     * Twilsock rate limit exceeded
     */
    TooManyRequests = 20429,
    /**
     * Authorization error
     */
    AuthorizationError = 45003,
    /**
     * Validation error
     */
    ValidationError = 45004,
    /**
     * Connection error
     */
    ConnectionError = 45011,
    /**
     * Unknown error thrown by a child SDK
     */
    SDK = 45500,
    /**
     * Unknown error
     */
    Unknown = 45501,
    /**
     * Access denied
     */
    Forbidden = 45502,
    /**
     * Invalid parameter value received as argument
     */
    InvalidParams = 45503,
    /**
     * Resource was not found
     */
    NotFound = 45504,
    /**
     * Function called in invalid state of the object
     */
    InvalidState = 45505,
    /**
     * Too many Flex SDK API requests
     */
    TooManySDKRequests = 45506,
    /**
     * The feature has been temporarily disabled.
     */
    TemporarilyDisabled = 45507,
    /**
     * Not able to reach the server
     */
    NetworkError = 45508,
    /**
     * TwilsockConnection error
     */
    TwilsockConnectionError = 45511,
    /**
     * Bad request error
     */
    BadRequest = 70002,
    /**
     * Invalid certificate
     */
    InvalidCertificate = 70251
}

/**
 * Error severity
 * @public
 */
export declare enum ErrorSeverity {
    Fatal = "fatal",
    Error = "error",
    Warning = "warning",
    Info = "info"
}

/**
 * @public
 */
export declare interface EventPublisher<E extends string | symbol, F = (...args: unknown[]) => void> {
    addListener(eventName: E, listener: F): this;
    removeListener(eventName: E, listener: F): this;
}

/**
 * Flex Feature Flags enable admins to opt-in to features that are currently in Pilot or Beta in Flex.
 * @public
 */
export declare interface FeaturesConfig {
    readonly features: Array<FeaturesList>;
    /**
     * Indicates if Ytica is active on the account
     */
    readonly insightsActive: boolean;
}

/**
 * Flex Features
 * Features for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * List of features
 * @public
 */
export declare interface FeaturesList {
    /**
     * Feature description
     */
    readonly description: string;
    /**
     * Documentation URL
     */
    readonly docUrl: string;
    /**
     * Is feature enabled
     */
    readonly enabled: boolean;
    /**
     * Feature identifier
     */
    readonly id: string;
    /**
     * Feature name
     */
    readonly name: string;
    /**
     * Feature stage
     */
    readonly stage: string;
}

/**
 * Error thrown by Flex SDK
 * @public
 */
export declare class FlexSdkError extends Error {
    constructor(errorCode: ErrorCode, metadata?: FlexSdkErrorMetadata, details?: string, wrappedError?: Error);
    /**
     * Error code
     *
     * @readonly
     * @type {ErrorCode}
     */
    get code(): ErrorCode;
    /**
     * Detailed information about what caused the error
     *
     * @readonly
     * @type {string | undefined}
     */
    get details(): string | undefined;
    /**
     * Gets the wrapped Error that caused the exception
     *
     * @readonly
     * @returns {Error | undefined}
     */
    get wrappedError(): Error | undefined;
    /**
     * Gets the metadata about the error
     *
     * @readonly
     * @returns {FlexSdkErrorMetadata}
     */
    get metadata(): FlexSdkErrorMetadata;
}

/**
 * Metadata about error thrown by Flex SDK
 * @public
 */
export declare interface FlexSdkErrorMetadata {
    module?: string;
    resourceSid?: string;
    severity: ErrorSeverity;
    source?: string;
    unhandled?: boolean;
}

/**
 * @public
 */
export declare const getMock: <T extends keyof Mocks>(name: T, config?: Parameters<Mocks[T]>[0] | undefined) => ReturnType<Mocks[T]>;

/**
 * Identity provider configuration interface
 *
 * @public
 */
export declare interface IdpConfig {
    /**
     * redirect url where to return back from identity provider to log in to Flex
     */
    redirectUrl: string;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Integrations config
 * @public
 */
export declare interface IntegrationsConfig {
    name: string;
    type: string;
    active: boolean;
    config: object;
    /**
     * Url of logo
     */
    logo?: string;
    author?: string;
}

/**
 * Logger
 * @public
 */
export declare interface Logger {
    trace: (...log: unknown[]) => void;
    debug: (...log: unknown[]) => void;
    log: (...log: unknown[]) => void;
    info: (...log: unknown[]) => void;
    warn: (...log: unknown[]) => void;
    error: (...log: unknown[]) => void;
    setLevel: (level: LoggerLevel) => void;
    getLevel: () => LoggerLevelNumbers;
}

/**
 * Logger Factory
 * @public
 */
export declare type LoggerFactory<TName = LoggerName> = (name: TName) => Logger;

/**
 * Logger level
 * @public
 */
export declare type LoggerLevel = LogLevelDesc;

/**
 * @public
 */
export declare type LoggerLevelNumbers = LogLevelNumbers;

/**
 * @public
 */
export declare enum LoggerName {
    Client = "flex:Client",
    Error = "flex:Error",
    Session = "flex:Session",
    Twilsock = "flex:Twilsock",
    Auth = "flex:Auth",
    Config = "flex:Config",
    RateLimiter = "flex:RateLimiter",
    Sync = "flex:Sync",
    SyncAdapter = "flex:SyncAdapter",
    QueueStats = "flex:QueueStats",
    Storage = "flex:Storage"
}

/**
 * Logger options
 * @public
 */
export declare interface LoggerOptions {
    level: LoggerLevel;
}

/**
 * @public
 */
export declare type MockFactory<M, O = undefined> = (options?: O) => M;

/**
 * @public
 */
export declare type Mocks = {
    auth: MockFactory<AuthenticatorMockFactory, AuthenticatorMockOptions>;
    getLogger: MockFactory<LoggerFactory<string>>;
    getTwilioIdpUrl: MockFactory<TwilioIdpUrlFunction, TwilioIdpUrlMockOptions>;
    getPublicConfig: MockFactory<PublicConfigProvider, PublicConfigMockOptions>;
    createClient: MockFactory<ClientProvider, ClientMockOptions>;
    clearCache: MockFactory<ClearCache>;
    getAccountConfig: MockFactory<AccountConfigDataGetter>;
};

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Outbound flows
 * @public
 */
export declare interface OutboundFlows {
    /**
     * Enable flag
     */
    enabled: boolean;
    /**
     * Phone number
     */
    caller_id: string;
    /**
     * Queue sid
     */
    queue_sid: string;
    /**
     * Country code
     */
    location: string;
    /**
     * Workflow sid
     */
    workflow_sid: string;
}

/**
 * Public configuration object
 * @public
 */
export declare interface PublicConfig {
    /**
     * Runtime domain
     */
    runtimeDomain: string;
    publicAttributes: PublicConfigAttributes | null;
    /**
     * Account SID (may be encrypted)
     */
    accountSid: string;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Public configuration attributes
 * @public
 */
export declare interface PublicConfigAttributes {
    [key: string]: object | unknown;
    /**
     * Whether the SSO flow needs to be launched in a popup window
     */
    loginPopup?: boolean;
}

/**
 * @public
 */
export declare type PublicConfigMockOptions = {
    publicConfig?: PublicConfig;
};

/**
 * Public Config Provider
 * @public
 */
export declare type PublicConfigProvider = (option: XOR<AccountSidOption, RuntimeDomainOption>) => Promise<PublicConfig>;

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Queue channel configuration object
 * @public
 */
export declare interface QueueChannelConfiguration {
    /**
     * Queue sid
     */
    queue_sid: string;
    channel_sid: string;
    service_level_threshold: number;
    short_abandoned_threshold: number;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Queue configuration object
 * @public
 */
export declare interface QueueConfiguration {
    queue_sid: string;
    reset_timezone: string;
    reset_time: string;
}

/**
 * Queue stats configuration object
 * @public
 */
export declare interface QueueStatsConfiguration {
    default: DefaultQueueStatsConfiguration;
    /**
     * List of Queue Configurations for an account
     */
    queue_configurations: Array<QueueConfiguration>;
    /**
     * List of Queue Channel Configurations for an account
     */
    queue_channel_configurations: Array<QueueChannelConfiguration>;
}

/**
 * FederatedAuth Service
 * Authentication for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Role of the user
 * @public
 */
export declare enum Role {
    Guest = "guest",
    Agent = "agent",
    Admin = "admin",
    Supervisor = "supervisor"
}

/**
 * Runtime domain option
 * @public
 */
export declare interface RuntimeDomainOption {
    /**
     * Runtime domain
     */
    runtimeDomain: string;
}

/**
 * @public
 */
export declare interface SessionOptions {
    readonly autoUpdateToken: boolean;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Taskrouter skill definition
 * @public
 */
export declare interface SkillDefinition {
    /**
     * Skill name
     */
    name: string;
    /**
     * Skill type, if true value can be given between min and max
     */
    multivalue: boolean;
    /**
     * minimum value
     */
    minimum?: number;
    /**
     * maximum value
     */
    maximum?: number;
}

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Task queues used for Transfers
 * @public
 */
export declare interface TaskQueue {
    /**
     * TaskQueue Sid
     */
    sid: string;
    /**
     * TaskQueue available as target
     */
    targettable: boolean;
}

/**
 * Telemetry client
 * @public
 */
export declare interface TelemetryClient<U extends object = object> {
    /**
     * Name of the type of client attributes
     */
    name: string;
    /**
     * Session data
     */
    sessionData?: U;
    /**
     * Creates event group
     * @param name - group name
     */
    createEventGroup<T>(name?: string): TelemetryEventGroup<T>;
    setSessionData(sessionData: U): Promise<void>;
}

/**
 * Event for error specific events
 * @public
 */
export declare interface TelemetryErrorEvent extends TelemetryEvent {
    /**
     * Error payload
     */
    error: {
        /**
         * Error code
         */
        code: number;
        /**
         * Whether the error should be reported to the debugger
         */
        debugger?: boolean;
        /**
         * Description of the error
         */
        description?: string;
        /**
         * Error message
         */
        message: string;
        /**
         * Code area, module or component that reported the error
         */
        module?: string;
        /**
         * Name of the plugin where the error originated from
         */
        plugin?: string;
        /**
         * Plugin version that caused the error
         */
        pluginVersion?: string;
        /**
         * Name of the reporter
         */
        reporter: string;
        /**
         * Resource SID that the error correlates with
         */
        resourceSid?: string;
        /**
         * Severity of the error
         */
        severity: "fatal" | "error" | "warning" | "info";
        /**
         * Source where the error originated, e.g. when thrown by some other SDK
         */
        source: string;
        /**
         * Stack Trace of the error
         */
        stackTrace?: string;
        /**
         * Whether it's an unhandled error
         */
        unhandled?: boolean;
        /**
         * Error message of the error that was wrapped
         */
        wrappedErrorMessage?: string;
        /**
         * Error code of the error that was wrapped
         */
        wrappedErrorCode?: number;
    };
}

/**
 * Event base properties
 * @public
 */
export declare interface TelemetryEvent {
    /**
     * Event name
     */
    eventName: string;
    /**
     * Source that initiated the event
     */
    eventSource?: string;
}

/**
 * Wrapper for a list of events and common fields for all the events
 * @public
 */
export declare interface TelemetryEventGroup<T> {
    /**
     * Group name
     */
    name?: string;
    /**
     * TelemetryClientAttributes
     */
    telemetryClient: TelemetryClient<object>;
    /**
     * Add events to group
     * @param events - Events to be added
     */
    addEvents(...events: (T & TelemetryEvent)[]): Promise<TelemetryProcessingResult>;
    /**
     * Add error event to group
     * @param event - ErrorEvent to be added
     */
    addErrorEvent(event: TelemetryErrorEvent): Promise<TelemetryProcessingResult>;
}

/**
 * @public
 */
export declare type TelemetryOptions = {
    /**
     * Set to `false` to opt-out from submitting errors via telemetry
     */
    readonly reportErrors: boolean;
};

/**
 * @public
 */
export declare type TelemetryProcessingResult = {
    eventsSucceeded: number;
    eventsFailed: number;
    eventsNotProcessed: number;
};

/**
 * Token information
 *
 * @public
 */
export declare type TokenData = {
    roles: Array<Role>;
    valid: boolean;
    dateExpired: Date;
    identity: string;
};

/**
 * Object returned by refreshToken()
 *
 * @public
 */
export declare type TokenRefreshResult = {
    token: string;
    dateExpired: Date;
};

/**
 * Returns Twilio IDP url
 * @param port - port
 *
 * @public
 */
export declare type TwilioIdpUrlFunction = (port?: string) => string;

/**
 * @public
 */
export declare type TwilioIdpUrlMockOptions = {
    twilioIdpUrl?: string;
};

/**
 * @public
 */
export declare const version: string;

/**
 * Without
 * Constructs a type by forcing all properties from T that are not assignable to U to be undefined
 * @public
 */
export declare type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};

/**
 * Configuration Service
 * Configuration for a Flex instance
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Default Worker attribute settings
 * @public
 */
export declare interface WorkerChannel {
    /**
     * Unique name of the TaskChannel associated to this WorkerChannel
     */
    name: string;
    /**
     * Default capacity value
     */
    capacity: number;
    /**
     * Default availability
     */
    availability: boolean;
}

/**
 * XOR
 * Constructs a type that requires type T or U, but not both
 * @public
 */
export declare type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

export { }
